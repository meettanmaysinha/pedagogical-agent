{"id": 0, "code": "```python\nresult = df.iloc[List].reset_index(drop=True)\n```", "metadata": {"problem_id": 0, "library_problem_id": 0, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 1, "code": "```python\ndf = df.iloc[List].reset_index(drop=True)\nresult = sum(df['Type'] != df['Type'].iloc[0])\n```", "metadata": {"problem_id": 1, "library_problem_id": 1, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 0}}
{"id": 2, "code": "```python\nvalue_counts_threshold = 2\ncolumns_to_process = ['Qu1', 'Qu3']\n\nfor col in columns_to_process:\n    value_counts = data[col].value_counts()\n    replace_values = value_counts[value_counts < value_counts_threshold].index\n    data[col] = data[col].replace(replace_values, 'other')\n\nresult = data\n```", "metadata": {"problem_id": 2, "library_problem_id": 2, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 2}}
{"id": 3, "code": "```python\nvalue_counts_threshold = 3\ncolumns_to_process = ['Qu1', 'Qu3']\n\nfor col in columns_to_process:\n    value_counts = data[col].value_counts()\n    replace_values = value_counts[value_counts < value_counts_threshold].index\n    data[col] = data[col].replace(replace_values, 'other')\n\nresult = data\n```", "metadata": {"problem_id": 3, "library_problem_id": 3, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 2}}
{"id": 4, "code": "```python\nvalue_counts_threshold = 2\nfor column in ['Qu1', 'Qu3']:\n    value_counts = data[column].value_counts()\n    replace_values = value_counts[value_counts < value_counts_threshold].index\n    data[column] = data[column].replace(replace_values, 'other')\n```", "metadata": {"problem_id": 4, "library_problem_id": 4, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 2}}
{"id": 5, "code": "```python\nvalue_counts_qu1 = data['Qu1'].value_counts()\nvalue_counts_qu2 = data['Qu2'].value_counts()\nvalue_counts_qu3 = data['Qu3'].value_counts()\n\nqu1_replace_dict = {item: 'other' for item, count in value_counts_qu1.items() if count < 3}\nqu2_replace_dict = {item: 'other' for item, count in value_counts_qu2.items() if count < 2}\nqu3_replace_dict = {item: 'other' for item, count in value_counts_qu3.items() if count < 2}\n\ndata['Qu1'] = data['Qu1'].replace(qu1_replace_dict)\ndata['Qu2'] = data['Qu2'].replace(qu2_replace_dict)\ndata['Qu3'] = data['Qu3'].replace(qu3_replace_dict)\n\nresult = data\n```", "metadata": {"problem_id": 5, "library_problem_id": 5, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 2}}
{"id": 6, "code": "```python\nresult = df.copy()\n\n# For Qu1\nvalue_counts_qu1 = df['Qu1'].value_counts()\nqu1_replace_dict = {item: 'other' for item, count in value_counts_qu1.items() if count < 3}\nqu1_replace_dict.pop('apple', None)  # Keep 'apple' unchanged\nresult['Qu1'] = df['Qu1'].replace(qu1_replace_dict)\n\n# For Qu2 and Qu3\nfor col in ['Qu2', 'Qu3']:\n    value_counts_col = df[col].value_counts()\n    col_replace_dict = {item: 'other' for item, count in value_counts_col.items() if count < 2}\n    result[col] = df[col].replace(col_replace_dict)\n\nprint(result)\n```", "metadata": {"problem_id": 6, "library_problem_id": 6, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 2}}
{"id": 7, "code": "```python\nresult = df.groupby('url').apply(lambda x: x[x['keep_if_dup'] == 'Yes'].head(1).combine_first(x[x['keep_if_dup'] == 'No'].head(1))).reset_index(drop=True)\n```", "metadata": {"problem_id": 7, "library_problem_id": 7, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 7}}
{"id": 8, "code": "```python\nresult = df.loc[df.groupby('url')['drop_if_dup'].transform(lambda x: (x == 'No') | (x != 'Yes').idxmax())]\n```", "metadata": {"problem_id": 8, "library_problem_id": 8, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 7}}
{"id": 9, "code": "```python\nresult = df.loc[df.groupby('url')['id'].idxmax()]\n```", "metadata": {"problem_id": 9, "library_problem_id": 9, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 7}}
{"id": 10, "code": "```python\nresult = df.set_index(['name', 'v1']).to_dict(orient='index')\n```", "metadata": {"problem_id": 10, "library_problem_id": 10, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 10}}
{"id": 11, "code": "```python\ndf['datetime'] = df['datetime'].dt.tz_localize(None)\n```", "metadata": {"problem_id": 11, "library_problem_id": 11, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 11}}
{"id": 12, "code": "```python\nreturn df['datetime'].dt.tz_localize(None).astype(str)\n```", "metadata": {"problem_id": 12, "library_problem_id": 12, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 11}}
{"id": 13, "code": "```python\ndf['datetime'] = df['datetime'].dt.tz_localize(None).dt.strftime('%d-%b-%Y %H:%M:%S')\n```", "metadata": {"problem_id": 13, "library_problem_id": 13, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 11}}
{"id": 14, "code": "```python\ndf['datetime'] = df['datetime'].dt.tz_localize(None)\n```", "metadata": {"problem_id": 14, "library_problem_id": 14, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 11}}
{"id": 15, "code": "```python\nresult = pd.json_normalize(df['message'].str.strip('[]').str.split(', ', expand=True).apply(lambda x: dict(item.split(': ') for item in x)))\nresult = result.add_prefix('').rename(columns=lambda x: x.replace(\"'\", \"\"))\ndf = pd.concat([df.drop('message', axis=1), result], axis=1)\n```", "metadata": {"problem_id": 15, "library_problem_id": 15, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 15}}
{"id": 16, "code": "```python\ndf.loc[df['product'].isin(products), 'score'] *= 10\n```", "metadata": {"problem_id": 16, "library_problem_id": 16, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 16}}
{"id": 17, "code": "```python\ndf.loc[df['product'].isin(products), 'score'] *= 10\n```", "metadata": {"problem_id": 17, "library_problem_id": 17, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 16}}
{"id": 18, "code": "```python\ndf.loc[df['product'].isin([1069104, 1069105, 1066489, 1066491]), 'score'] *= 10\n```", "metadata": {"problem_id": 18, "library_problem_id": 18, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 16}}
{"id": 19, "code": "```python\ndf.loc[df['product'].isin(products), 'score'] = (df.loc[df['product'].isin(products), 'score'] - df.loc[df['product'].isin(products), 'score'].min()) / (df.loc[df['product'].isin(products), 'score'].max() - df.loc[df['product'].isin(products), 'score'].min())\n```", "metadata": {"problem_id": 19, "library_problem_id": 19, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 16}}
{"id": 20, "code": "```python\ndf['category'] = df.idxmax(axis=1)\n```", "metadata": {"problem_id": 20, "library_problem_id": 20, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 20}}
{"id": 21, "code": "```python\ndf['category'] = df.idxmin(axis=1)\n```", "metadata": {"problem_id": 21, "library_problem_id": 21, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 20}}
{"id": 22, "code": "```python\ndf['category'] = df.apply(lambda row: [col for col in df.columns if row[col] == 1], axis=1)\n```", "metadata": {"problem_id": 22, "library_problem_id": 22, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 20}}
{"id": 23, "code": "```python\ndf['Date'] = df['Date'].dt.strftime('%b-%Y')\n```", "metadata": {"problem_id": 23, "library_problem_id": 23, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 23}}
{"id": 24, "code": "```python\ndf['Date'] = df['Date'].dt.strftime('%d-%b-%Y')\n```", "metadata": {"problem_id": 24, "library_problem_id": 24, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 23}}
{"id": 25, "code": "```python\ndf['Date'] = pd.to_datetime(df['Date'])\ndate_range = pd.date_range(start='2017-08-17', end='2018-01-31')\nfiltered_df = df[(df['Date'].dt.normalize() >= date_range.min()) & (df['Date'].dt.normalize() <= date_range.max())]\nfiltered_df['Month-Year-Day'] = filtered_df['Date'].dt.strftime('%d-%b-%Y %A')\nresult = filtered_df[['Month-Year-Day']]\n```", "metadata": {"problem_id": 25, "library_problem_id": 25, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 23}}
{"id": 26, "code": "```python\ndf['#1'] = df['#1'].shift(-1).combine_first(df['#1'].iloc[0]).shift(1)\n```", "metadata": {"problem_id": 26, "library_problem_id": 26, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 26}}
{"id": 27, "code": "```python\ndf['#1'] = df['#1'].shift(-1).combine_first(df['#1'].iloc[0]).shift(1)\n```", "metadata": {"problem_id": 27, "library_problem_id": 27, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 26}}
{"id": 28, "code": "```python\ndf_shifted = pd.DataFrame({\n    '#1': [df.iloc[-1]['#1']] + list(df.iloc[:-1]['#1']),\n    '#2': list(df.iloc[1:]) + [df.iloc[0]['#2']]\n})\n```", "metadata": {"problem_id": 28, "library_problem_id": 28, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 26}}
{"id": 29, "code": "```python\ndf_shifted = df.shift(1).combine_first(df.shift(-1))\n```", "metadata": {"problem_id": 29, "library_problem_id": 29, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 26}}
{"id": 30, "code": "```python\ndf.rename(columns={col: col + 'X' for col in df.columns}, inplace=True)\n```", "metadata": {"problem_id": 30, "library_problem_id": 30, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 30}}
{"id": 31, "code": "```python\ndf.rename(columns=lambda x: 'X' + x, inplace=True)\n```", "metadata": {"problem_id": 31, "library_problem_id": 31, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 30}}
{"id": 32, "code": "```python\ndf.rename(columns=lambda x: f'X{x}' if not x.endswith('X') else x, inplace=True)\n```", "metadata": {"problem_id": 32, "library_problem_id": 32, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 30}}
{"id": 33, "code": "```python\nresult = df.groupby('group').agg({'group_color': 'first', **{col: 'mean' for col in df.columns if col.startswith('val')}})\n```", "metadata": {"problem_id": 33, "library_problem_id": 33, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 33}}
{"id": 34, "code": "```python\nresult = df.groupby('group').agg({'group_color': 'first'}).join(df.groupby('group').sum().add_prefix(''))\n```", "metadata": {"problem_id": 34, "library_problem_id": 34, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 33}}
{"id": 35, "code": "```python\nresult = df.groupby('group').agg({col: 'mean' if col.endswith('2') else 'sum' for col in df.columns if col.startswith('val')})\n```", "metadata": {"problem_id": 35, "library_problem_id": 35, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 33}}
{"id": 36, "code": "```python\nresult = df.loc[row_list, column_list].mean(axis=0)\n```", "metadata": {"problem_id": 36, "library_problem_id": 36, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 36}}
{"id": 37, "code": "```python\nresult = df.loc[row_list, column_list].sum(axis=0)\n```", "metadata": {"problem_id": 37, "library_problem_id": 37, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 36}}
{"id": 38, "code": "```python\nresult = df.loc[row_list, column_list].sum(axis=0)\nresult.drop(result.idxmax(), inplace=True)\n```", "metadata": {"problem_id": 38, "library_problem_id": 38, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 36}}
{"id": 39, "code": "```python\nresult = df.apply(lambda col: col.value_counts(dropna=False)).stack()\n```", "metadata": {"problem_id": 39, "library_problem_id": 39, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 39}}
{"id": 40, "code": "```python\nresult = df.isnull().sum()\n```", "metadata": {"problem_id": 40, "library_problem_id": 40, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 39}}
{"id": 41, "code": "```python\nresult = \"\"\nfor col in df.columns:\n    result += f\"---- {col} ---\\n{df[col].value_counts()}\\n\\n\"\n```", "metadata": {"problem_id": 41, "library_problem_id": 41, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 39}}
{"id": 42, "code": "```python\ndf.iloc[0] += df.iloc[1]\ndf = df.drop(1).reset_index(drop=True)\n```", "metadata": {"problem_id": 42, "library_problem_id": 42, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 42}}
{"id": 43, "code": "```python\ndf.iloc[0] += df.iloc[1]\ndf = df.drop(1).reset_index(drop=True)\n```", "metadata": {"problem_id": 43, "library_problem_id": 43, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 42}}
{"id": 44, "code": "```python\ndf.apply(lambda x: x.dropna().tolist() + x.fillna(np.nan).tolist(), axis=1)\n```", "metadata": {"problem_id": 44, "library_problem_id": 44, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 44}}
{"id": 45, "code": "```python\ndf.apply(lambda x: x.sort_values().reset_index(drop=True), axis=1)\n```", "metadata": {"problem_id": 45, "library_problem_id": 45, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 44}}
{"id": 46, "code": "```python\ndf.apply(lambda x: x.sort_values().reset_index(drop=True), axis=0)\n```", "metadata": {"problem_id": 46, "library_problem_id": 46, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 44}}
{"id": 47, "code": "```python\nthreshold = 6\nsmall_rows = df.loc[df['value'] < threshold]\nsum_small_rows = small_rows['value'].sum()\nnew_row = pd.DataFrame({'value': [sum_small_rows]}, index=['X'])\nresult = pd.concat([df.loc[df['value'] >= threshold], new_row]).sort_index()\n```", "metadata": {"problem_id": 47, "library_problem_id": 47, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 47}}
{"id": 48, "code": "```python\nthreshold = 6\ngrouped = df[df['value'] >= threshold].groupby(df[df['value'] >= threshold].index).mean()\nmask = df['value'] < threshold\ndf.loc[mask.index, 'value'] = None\ndf = df.combine_first(grouped)\ndf = df.dropna(subset=['value']).reset_index().rename(columns={'index': 'lab'})\ndf.loc[len(df)] = ['X', df['value'].dropna().mean()]\ndf.set_index('lab', inplace=True)\n```", "metadata": {"problem_id": 48, "library_problem_id": 48, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 47}}
{"id": 49, "code": "```python\nresult = df[(df['value'] >= section_left) & (df['value'] <= section_right)]\navg_value = df[~((df['value'] >= section_left) & (df['value'] <= section_right))]['value'].mean()\nresult.loc['X'] = avg_value\nresult = result.sort_index()\n```", "metadata": {"problem_id": 49, "library_problem_id": 49, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 47}}
{"id": 50, "code": "```python\nresult = pd.concat([df, df.apply(lambda x: 1 / x)], axis=1)\n```", "metadata": {"problem_id": 50, "library_problem_id": 50, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 50}}
{"id": 51, "code": "```python\nresult = pd.concat([df, df.apply(np.exp)], axis=1)\n```", "metadata": {"problem_id": 51, "library_problem_id": 51, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 50}}
{"id": 52, "code": "```python\nresult = pd.concat([df, 1 / df.replace(0, np.inf)], axis=1)\n```", "metadata": {"problem_id": 52, "library_problem_id": 52, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 50}}
{"id": 53, "code": "```python\nimport numpy as np\n\nresult = df.copy()\nfor col in df.columns:\n    result[f'sigmoid_{col}'] = 1 / (1 + np.exp(-df[col]))\n```", "metadata": {"problem_id": 53, "library_problem_id": 53, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 50}}
{"id": 54, "code": "```python\nresult = df.apply(lambda col: col[::-1].idxmax())\n```", "metadata": {"problem_id": 54, "library_problem_id": 54, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 54}}
{"id": 55, "code": "```python\nresult = df.apply(lambda col: col.argmax())\n```", "metadata": {"problem_id": 55, "library_problem_id": 55, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 54}}
{"id": 56, "code": "```python\nmin_date = df['dt'].min()\nmax_date = df['dt'].max()\n\ndate_range = pd.date_range(start=min_date, end=max_date)\n\nexpanded_df = pd.DataFrame({\n    'dt': date_range,\n    'user': df['user'].unique().repeat(len(date_range))\n})\n\nmerged_df = pd.merge(expanded_df, df, on=['dt', 'user'], how='left').fillna(0).sort_values(by=['user', 'dt']).reset_index(drop=True)\nresult = merged_df\n```", "metadata": {"problem_id": 56, "library_problem_id": 56, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 56}}
{"id": 57, "code": "```python\nmin_date = df['dt'].min()\nmax_date = df['dt'].max()\n\ndate_range = pd.date_range(start=min_date, end=max_date)\n\nexpanded_df = pd.DataFrame({\n    'dt': date_range,\n    'user': df['user'].unique().repeat(len(date_range))\n})\n\nmerged_df = pd.merge(expanded_df, df, on=['dt', 'user'], how='left').fillna(0).sort_values(by=['user', 'dt']).reset_index(drop=True)\nresult = merged_df\n```", "metadata": {"problem_id": 57, "library_problem_id": 57, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 56}}
{"id": 58, "code": "```python\nmin_date = df['dt'].min()\nmax_date = df['dt'].max()\n\ndate_range = pd.date_range(start=min_date, end=max_date)\n\nexpanded_df = pd.DataFrame({\n    'dt': date_range,\n    'user': df['user'].unique().repeat(len(date_range)),\n    'val': 233\n})\n\nresult = pd.merge(expanded_df, df, on=['dt', 'user'], how='left').fillna({'val': 233})\nresult = result[['dt', 'user', 'val']].reset_index(drop=True)\n```", "metadata": {"problem_id": 58, "library_problem_id": 58, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 56}}
{"id": 59, "code": "```python\nmin_date = df['dt'].min()\nmax_date = df['dt'].max()\n\nexpanded_df = pd.DataFrame({\n    'dt': pd.date_range(min_date, max_date),\n    'user': df['user'].unique().repeat(len(pd.date_range(min_date, max_date)))\n})\n\nexpanded_df = expanded_df.merge(df, on=['dt', 'user'], how='left').fillna(method='ffill')\n\nresult = expanded_df.sort_values(by=['user', 'dt']).reset_index(drop=True)\n```", "metadata": {"problem_id": 59, "library_problem_id": 59, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 56}}
{"id": 60, "code": "```python\nmin_date = df['dt'].min()\nmax_date = df['dt'].max()\n\ndate_range = pd.date_range(start=min_date, end=max_date)\n\nexpanded_df = []\nfor user in df['user'].unique():\n    max_val = df[df['user'] == user]['val'].max()\n    expanded_df.extend([(date, user, max_val) for date in date_range])\n\nresult = pd.DataFrame(expanded_df, columns=['dt', 'user', 'val'])\nresult['dt'] = result['dt'].dt.strftime('%d-%b-%Y')\n```", "metadata": {"problem_id": 60, "library_problem_id": 60, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 56}}
{"id": 61, "code": "```python\ndf['name'] = df['name'].astype('category').cat.codes + 1\n```", "metadata": {"problem_id": 61, "library_problem_id": 61, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 61}}
{"id": 62, "code": "```python\ndf['a'] = df.groupby('name')['a'].transform(lambda x: x.factorize()[0] + 1)\n```", "metadata": {"problem_id": 62, "library_problem_id": 62, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 61}}
{"id": 63, "code": "```python\ndf['name'] = df['name'].astype('category').cat.codes + 1\n```", "metadata": {"problem_id": 63, "library_problem_id": 63, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 61}}
{"id": 64, "code": "```python\ndf['ID'] = df.groupby(['name', 'a']).ngroup() + 1\nresult = df[['ID', 'b', 'c']]\n```", "metadata": {"problem_id": 64, "library_problem_id": 64, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 61}}
{"id": 65, "code": "```python\ndf = pd.melt(df, id_vars=['user', 'someBool'], var_name='date', value_name='value')\n```", "metadata": {"problem_id": 65, "library_problem_id": 65, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 65}}
{"id": 66, "code": "```python\ndf = pd.melt(df, id_vars='user', var_name='others', value_name='value')\n```", "metadata": {"problem_id": 66, "library_problem_id": 66, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 65}}
{"id": 67, "code": "```python\ndf = pd.melt(df, id_vars=['user', 'someBool'], var_name='date', value_name='value')\n```", "metadata": {"problem_id": 67, "library_problem_id": 67, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 65}}
{"id": 68, "code": "```python\nresult = df.loc[df['c'] > 0.5, ['b', 'e']].to_numpy()\n```", "metadata": {"problem_id": 68, "library_problem_id": 68, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 68}}
{"id": 69, "code": "```python\nresult = df.loc[df['c'] > 0.45, ['a', 'b', 'e']].values\n```", "metadata": {"problem_id": 69, "library_problem_id": 69, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 68}}
{"id": 70, "code": "```python\nresult = df.loc[df['c'] > 0.5, ['b', 'e']].to_numpy()\n```", "metadata": {"problem_id": 70, "library_problem_id": 70, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 68}}
{"id": 71, "code": "```python\ndf.loc[(df['c'] > 0.5), ['b', 'e']].assign(sum=lambda x: x['b'] + x['e'])\n```", "metadata": {"problem_id": 71, "library_problem_id": 71, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 68}}
{"id": 72, "code": "```python\ndf.loc[df['c'] > 0.5, ['b', 'e']]\n```", "metadata": {"problem_id": 72, "library_problem_id": 72, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 68}}
{"id": 73, "code": "```python\nfrom datetime import datetime, timedelta\n\ndf['date'] = pd.to_datetime(df['date'], format='%m/%d/%y')\nsorted_df = df.sort_values(by='date')\n\nfiltered_dates = set()\nresult = []\n\nfor index, row in sorted_df.iterrows():\n    if row['date'] not in filtered_dates:\n        result.append(row)\n        filtered_dates.update([row['date'] + timedelta(days=1) for _ in range(X)])\n\nresult = pd.DataFrame(result)\n```", "metadata": {"problem_id": 73, "library_problem_id": 73, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 73}}
{"id": 74, "code": "```python\nfrom datetime import datetime, timedelta\n\n# Convert date column to datetime format\ndf['date'] = pd.to_datetime(df['date'], format='%m/%d/%y')\n\n# Sort the dataframe by date\ndf.sort_values(by='date', inplace=True)\n\n# Initialize an empty list to store indices of rows to keep\nindices_to_keep = []\n\n# Iterate over the dataframe\nfor i in range(len(df)):\n    # Add the current row index to the list\n    indices_to_keep.append(i)\n    \n    # Find the next row that is more than X weeks away\n    for j in range(i+1, len(df)):\n        if (df.loc[j, 'date'] - df.loc[i, 'date']).days > X * 7:\n            break\n    \n    # Skip the rows between the current and the next non-overlapping row\n    i = j - 1\n\n# Filter the dataframe to keep only the selected rows\nresult = df.loc[indices_to_keep].reset_index(drop=True)\n```", "metadata": {"problem_id": 74, "library_problem_id": 74, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 73}}
{"id": 75, "code": "```python\nfrom datetime import datetime, timedelta\n\ndef remove_overlapping_rows(df, X):\n    df['date'] = pd.to_datetime(df['date'], format='%m/%d/%y')\n    sorted_df = df.sort_values(by='date').reset_index(drop=True)\n    filtered_indices = []\n    \n    for i in range(len(sorted_df)):\n        if i == 0:\n            filtered_indices.append(i)\n        else:\n            current_date = sorted_df.at[i, 'date']\n            previous_date = sorted_df.at[filtered_indices[-1], 'date']\n            if (current_date - previous_date).days > X * 7:\n                filtered_indices.append(i)\n    \n    return sorted_df.loc[filtered_indices].reset_index(drop=True)\n\nresult = remove_overlapping_rows(df, X)\n```", "metadata": {"problem_id": 75, "library_problem_id": 75, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 73}}
{"id": 76, "code": "```python\nresult = df.groupby(df.index // 3).transform(lambda x: x.mean())\n```", "metadata": {"problem_id": 76, "library_problem_id": 76, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 76}}
{"id": 77, "code": "```python\nresult = df.groupby(df.index // 3).transform('mean').round().astype(int)\n```", "metadata": {"problem_id": 77, "library_problem_id": 77, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 76}}
{"id": 78, "code": "```python\nresult = df.groupby(df.index // 4).sum().reset_index(drop=True)\n```", "metadata": {"problem_id": 78, "library_problem_id": 78, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 76}}
{"id": 79, "code": "```python\nresult = df[::-3].mean().reset_index(drop=True)\n```", "metadata": {"problem_id": 79, "library_problem_id": 79, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 76}}
{"id": 80, "code": "```python\nresult = []\nfor i in range(0, len(df), 5):\n    group = df[i:i+5]\n    if len(group) >= 3:\n        result.append(group[:3].sum())\n    if len(group) >= 5:\n        result.append(group[3:].mean())\n\nresult = pd.DataFrame(result, columns=['col1'])\n```", "metadata": {"problem_id": 80, "library_problem_id": 80, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 76}}
{"id": 81, "code": "```python\nresult = []\nfor i in range(len(df)):\n    if (i + 1) % 5 == 0:\n        result.append(df.iloc[i-2:i+1].sum())\n    elif (i + 1) % 5 == 4:\n        result.append(df.iloc[i-1:i+1].mean())\nresult.reverse()\nresult = pd.DataFrame(result, columns=['col1'])\n```", "metadata": {"problem_id": 81, "library_problem_id": 81, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 76}}
{"id": 82, "code": "```python\ndf['A'].replace(0, pd.NA).ffill().fillna(0)\n```", "metadata": {"problem_id": 82, "library_problem_id": 82, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 82}}
{"id": 83, "code": "```python\ndf['A'].replace(0, pd.NA).ffill().fillna(0)\n```", "metadata": {"problem_id": 83, "library_problem_id": 83, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 82}}
{"id": 84, "code": "```python\ndf['A'] = df['A'].replace(0, np.nan).ffill().bfill()\n```", "metadata": {"problem_id": 84, "library_problem_id": 84, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 82}}
{"id": 85, "code": "```python\ndf['number'] = df.duration.str.extract('(\\d+)').astype(int)\ndf['time'] = df.duration.str.extract('(year|month|week|day)')\ndf['time_days'] = df.time.map({'year': 365, 'month': 30, 'week': 7, 'day': 1})\n```", "metadata": {"problem_id": 85, "library_problem_id": 85, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 85}}
{"id": 86, "code": "```python\ndf['number'] = df.duration.str.extract(r'(\\d+)').astype(int)\ndf['time'] = df.duration.str.extract(r'([a-zA-Z]+)')\ndf['time_day'] = df.time.map({'year': 365, 'month': 30, 'week': 7, 'day': 1})\n```", "metadata": {"problem_id": 86, "library_problem_id": 86, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 85}}
{"id": 87, "code": "```python\ndf['number'] = df.duration.str.extract('(\\d+)').astype(int)\ndf['time'] = df.duration.str.extract('(year|month|week|day)')\ndf['time_days'] = df.time.map({'year': 365, 'month': 30, 'week': 7, 'day': 1})\n```", "metadata": {"problem_id": 87, "library_problem_id": 87, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 85}}
{"id": 88, "code": "```python\ndf['number'] = df.duration.str.extract(r'(\\d+)').astype(int)\ndf['time'] = df.duration.str.extract(r'(\\D+)')\ndf['time_day'] = df.time.map({'year': 365, 'month': 30, 'week': 7, 'day': 1}) * df['number']\n```", "metadata": {"problem_id": 88, "library_problem_id": 88, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 85}}
{"id": 89, "code": "```python\ncheck = np.any(np.array([df1[col] != df2[col] for col in columns_check_list]), axis=0)\n```", "metadata": {"problem_id": 89, "library_problem_id": 89, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 89}}
{"id": 90, "code": "```python\ncheck = np.all(np.array([df1[col] == df2[col] for col in columns_check_list]), axis=0)\n```", "metadata": {"problem_id": 90, "library_problem_id": 90, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 89}}
{"id": 91, "code": "```python\ndf.index = df.index.set_levels(pd.to_datetime(df.index.levels[1]), level=1)\n```", "metadata": {"problem_id": 91, "library_problem_id": 91, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 91}}
{"id": 92, "code": "```python\ndf.index = df.index.set_levels(pd.to_datetime(df.index.levels[1]), level=1)\n```", "metadata": {"problem_id": 92, "library_problem_id": 92, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 91}}
{"id": 93, "code": "```python\nimport pandas as pd\n\ndef f(df):\n    # Parse the date index\n    df.index = pd.to_datetime(df.index.get_level_values(1))\n    \n    # Select the parsed date, x, and y columns\n    result = df[['x', 'y']].values\n    \n    return result\n```", "metadata": {"problem_id": 93, "library_problem_id": 93, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 91}}
{"id": 94, "code": "```python\ndf.index = pd.MultiIndex.from_arrays([pd.to_datetime(df.index.get_level_values('date')), df.index.get_level_values('id')])\ndf.sort_index(inplace=True)\ndf.swaplevel(i=0, j=1).sort_index()\n```", "metadata": {"problem_id": 94, "library_problem_id": 94, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 91}}
{"id": 95, "code": "```python\ndf = pd.melt(df, id_vars=['Country', 'Variable'], value_vars=['2000', '2001', '2002', '2003', '2004', '2005'], var_name='year', value_name='value')\ndf[['var1', 'var2']] = pd.get_dummies(df['Variable']).mul(df['value'], axis=0)\ndf = df.drop(columns=['Variable', 'value'])\ndf = df.sort_values(by=['Country', 'year']).reset_index(drop=True)\n```", "metadata": {"problem_id": 95, "library_problem_id": 95, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 95}}
{"id": 96, "code": "```python\ndf_long = pd.melt(df, id_vars=['Country', 'Variable'], var_name='year', value_name='value').sort_values(by=['Country', 'year'], ascending=[True, False])\n```", "metadata": {"problem_id": 96, "library_problem_id": 96, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 95}}
{"id": 97, "code": "```python\ndf[(df.filter(like='Value').abs() < 1).all(axis=1)]\n```", "metadata": {"problem_id": 97, "library_problem_id": 97, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 97}}
{"id": 98, "code": "```python\ndf[(df.filter(like='Value').abs() > 1).any(axis=1)]\n```", "metadata": {"problem_id": 98, "library_problem_id": 98, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 97}}
{"id": 99, "code": "```python\ndf_filtered = df[(df.filter(like='Value').abs() > 1).any(axis=1)]\ndf_filtered.columns = df_filtered.columns.str.replace('Value_', '')\n```", "metadata": {"problem_id": 99, "library_problem_id": 99, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 97}}
{"id": 100, "code": "```python\ndf.replace('&AMP;', '&', regex=True)\n```", "metadata": {"problem_id": 100, "library_problem_id": 100, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 100}}
{"id": 101, "code": "```python\ndf.replace('&LT;', '<', regex=True)\n```", "metadata": {"problem_id": 101, "library_problem_id": 101, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 100}}
{"id": 102, "code": "```python\ndf.replace('&AMP;', '&', regex=True)\n```", "metadata": {"problem_id": 102, "library_problem_id": 102, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 100}}
{"id": 103, "code": "```python\ndf.replace('&AMP;', '&', regex=True)\n```", "metadata": {"problem_id": 103, "library_problem_id": 103, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 100}}
{"id": 104, "code": "```python\ndf.replace('&AMP;', '&', regex=True)\n```", "metadata": {"problem_id": 104, "library_problem_id": 104, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 100}}
{"id": 105, "code": "```python\ndf['first_name'] = df['name'].apply(lambda x: x.split()[0] if len(x.split()) == 2 else x)\ndf['last_name'] = df['name'].apply(lambda x: x.split()[1] if len(x.split()) == 2 else None)\n```", "metadata": {"problem_id": 105, "library_problem_id": 105, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 105}}
{"id": 106, "code": "```python\ndf['1_name'] = df['name'].apply(lambda x: x.split()[0] if len(x.split()) == 2 else x)\ndf['2_name'] = df['name'].apply(lambda x: x.split()[1] if len(x.split()) == 2 else None)\n```", "metadata": {"problem_id": 106, "library_problem_id": 106, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 105}}
{"id": 107, "code": "```python\ndf['first_name'] = df['name'].apply(lambda x: x.split()[0] if len(x.split()) > 1 else x)\ndf['middle_name'] = df['name'].apply(lambda x: x.split()[1] if len(x.split()) > 2 else None)\ndf['last_name'] = df['name'].apply(lambda x: x.split()[2] if len(x.split()) > 2 else None)\ndf.drop(columns=['name'], inplace=True)\n```", "metadata": {"problem_id": 107, "library_problem_id": 107, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 105}}
{"id": 108, "code": "```python\nresult = pd.merge_asof(df2.sort_values('Timestamp'), df1.sort_values('Timestamp'), on='Timestamp', direction='backward')\n```", "metadata": {"problem_id": 108, "library_problem_id": 108, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 108}}
{"id": 109, "code": "```python\nresult = pd.merge_asof(df1.sort_values('Timestamp'), df2.sort_values('Timestamp'), on='Timestamp')\n```", "metadata": {"problem_id": 109, "library_problem_id": 109, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 108}}
{"id": 110, "code": "```python\ndf['state'] = df.apply(lambda row: row['col1'] if row['col2'] <= 50 and row['col3'] <= 50 else max(row['col1'], row['col2'], row['col3']), axis=1)\n```", "metadata": {"problem_id": 110, "library_problem_id": 110, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 110}}
{"id": 111, "code": "```python\ndf['state'] = df.apply(lambda row: row['col1'] if row['col2'] > 50 and row['col3'] > 50 else row['col1'] + row['col2'] + row['col3'], axis=1)\n```", "metadata": {"problem_id": 111, "library_problem_id": 111, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 110}}
{"id": 112, "code": "```python\nerrors = []\nfor index, row in df.iterrows():\n    if not isinstance(row['Field1'], int):\n        errors.append(row['Field1'])\n```", "metadata": {"problem_id": 112, "library_problem_id": 112, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 112}}
{"id": 113, "code": "```python\ninteger_values = []\nfor index, row in df.iterrows():\n    try:\n        if isinstance(row['Field1'], int):\n            integer_values.append(row['Field1'])\n    except ValueError:\n        continue\n```", "metadata": {"problem_id": 113, "library_problem_id": 113, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 112}}
{"id": 114, "code": "```python\nerror_values = []\nfor index, row in example_df.iterrows():\n    if not isinstance(row['Field1'], int):\n        error_values.append(row['Field1'])\nresult = error_values\n```", "metadata": {"problem_id": 114, "library_problem_id": 114, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 112}}
{"id": 115, "code": "```python\ndf.set_index('cat', inplace=True)\ndf_percentage = df.div(df.sum(axis=1), axis=0)\ndf_percentage.reset_index(inplace=True)\n```", "metadata": {"problem_id": 115, "library_problem_id": 115, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 115}}
{"id": 116, "code": "```python\ndf[['val1', 'val2', 'val3', 'val4']] / df[['val1', 'val2', 'val3', 'val4']].sum()\n```", "metadata": {"problem_id": 116, "library_problem_id": 116, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 115}}
{"id": 117, "code": "```python\nresult = df.loc[test]\n```", "metadata": {"problem_id": 117, "library_problem_id": 117, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 117}}
{"id": 118, "code": "```python\nresult = df.loc[rows]\n```", "metadata": {"problem_id": 118, "library_problem_id": 118, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 117}}
{"id": 119, "code": "```python\nresult = df.drop(test)\n```", "metadata": {"problem_id": 119, "library_problem_id": 119, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 117}}
{"id": 120, "code": "```python\nresult = df.loc[test].drop_duplicates()\n```", "metadata": {"problem_id": 120, "library_problem_id": 120, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 117}}
{"id": 121, "code": "```python\nfrom scipy.spatial.distance import cdist\nimport numpy as np\n\n# Calculate pairwise distances\ndistances = cdist(df[['x', 'y']], df[['x', 'y']], 'euclidean')\n\n# Find nearest neighbor indices\nnearest_indices = np.argmin(distances + np.eye(len(df)), axis=1)\n\n# Create new dataframe with nearest neighbors and distances\ndf2 = pd.DataFrame({\n    'car': df['car'],\n    'nearest_neighbour': df['car'][nearest_indices],\n    'euclidean_distance': distances[np.arange(len(df)), nearest_indices]\n})\n\n# Merge original dataframe with new dataframe to keep all information\ndf2 = df2.merge(df, left_on='nearest_neighbour', right_on='car', suffixes=('', '_nn'))\ndf2.drop(columns=['car_nn'], inplace=True)\n\n# Group by time and calculate average distance\ndf2_grouped = df2.groupby('time').mean().reset_index()\n\n# Rename columns for clarity\ndf2_grouped.rename(columns={'euclidean_distance': 'average_distance'}, inplace=True)\n```", "metadata": {"problem_id": 121, "library_problem_id": 121, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 121}}
{"id": 122, "code": "```python\nfrom scipy.spatial.distance import cdist\nimport numpy as np\n\n# Calculate pairwise distances\ndistances = cdist(df[['x', 'y']], df[['x', 'y']], 'euclidean')\n\n# Find the farthest neighbor for each car\nfarthest_neighbors = np.argmax(distances, axis=1)\n\n# Map the indices back to car IDs\nfarthest_car_ids = df['car'].iloc[farthest_neighbors]\n\n# Create a new DataFrame with the results\ndf2 = pd.DataFrame({\n    'time': df['time'],\n    'car': df['car'],\n    'farmost_neighbour': farthest_car_ids,\n    'euclidean_distance': np.max(distances, axis=1)\n})\n\n# Sort by time and car ID for better readability\ndf2 = df2.sort_values(by=['time', 'car']).reset_index(drop=True)\n\ndf2\n```", "metadata": {"problem_id": 122, "library_problem_id": 122, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 121}}
{"id": 123, "code": "```python\ndf[\"keywords_all\"] = df.apply(lambda row: ','.join(row.dropna().astype(str)), axis=1)\n```", "metadata": {"problem_id": 123, "library_problem_id": 123, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 123}}
{"id": 124, "code": "```python\ndf[\"keywords_all\"] = df.apply(lambda row: '-'.join(row.dropna().astype(str)), axis=1)\n```", "metadata": {"problem_id": 124, "library_problem_id": 124, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 123}}
{"id": 125, "code": "```python\ndf[\"keywords_all\"] = df[['keywords_0', 'keywords_1', 'keywords_2', 'keywords_3']].apply(lambda row: '-'.join(row.dropna()), axis=1)\n```", "metadata": {"problem_id": 125, "library_problem_id": 125, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 123}}
{"id": 126, "code": "```python\ndf[\"keywords_all\"] = df.filter(like=\"keywords\").apply(lambda row: '-'.join(row.dropna().astype(str)), axis=1)\n```", "metadata": {"problem_id": 126, "library_problem_id": 126, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 123}}
{"id": 127, "code": "```python\nsampled_indices = df.sample(frac=0.2, random_state=0).index\ndf.loc[sampled_indices, 'Quantity'] = 0\n```", "metadata": {"problem_id": 127, "library_problem_id": 127, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 127}}
{"id": 128, "code": "```python\nsampled_rows = df.sample(frac=0.2, random_state=0)\nindices_to_change = sampled_rows.index\ndf.loc[indices_to_change, 'ProductId'] = 0\n```", "metadata": {"problem_id": 128, "library_problem_id": 128, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 127}}
{"id": 129, "code": "```python\nsampled_indices = {}\nfor user_id in df['UserId'].unique():\n    user_df = df[df['UserId'] == user_id]\n    sample_size = int(len(user_df) * 0.2)\n    sampled_rows = user_df.sample(n=sample_size, random_state=0)\n    sampled_indices[user_id] = sampled_rows.index\n    df.loc[sampled_rows.index, 'Quantity'] = 0\n\ndf\n```", "metadata": {"problem_id": 129, "library_problem_id": 129, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 127}}
{"id": 130, "code": "```python\nduplicate['index_original'] = df.loc[duplicate_bool].groupby(['col1', 'col2']).cumcount()\n```", "metadata": {"problem_id": 130, "library_problem_id": 130, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 130}}
{"id": 131, "code": "```python\nduplicate['index_original'] = df.loc[duplicate_bool].groupby(['col1', 'col2']).transform('idxmax')\n```", "metadata": {"problem_id": 131, "library_problem_id": 131, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 130}}
{"id": 132, "code": "```python\nduplicate['index_original'] = duplicate[['col1', 'col2']].apply(lambda x: df[(df['col1'] == x['col1']) & (df['col2'] == x['col2'])].index[0], axis=1)\n```", "metadata": {"problem_id": 132, "library_problem_id": 132, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 130}}
{"id": 133, "code": "```python\nduplicate['index_original'] = duplicate[['col1', 'col2', '3col']].apply(lambda x: df[(df[['col1', 'col2', '3col']] == x).all(axis=1)].index[0], axis=1)\n```", "metadata": {"problem_id": 133, "library_problem_id": 133, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 130}}
{"id": 134, "code": "```python\nduplicate['index_original'] = df.loc[duplicate_bool].groupby(['col1', 'col2']).transform('idxmax')\n```", "metadata": {"problem_id": 134, "library_problem_id": 134, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 130}}
{"id": 135, "code": "```python\ngrouped = df.groupby(['Sp', 'Mt'])['count'].transform(max)\nresult = df[grouped == df['count']]\n```", "metadata": {"problem_id": 135, "library_problem_id": 135, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 135}}
{"id": 136, "code": "```python\ngrouped = df.groupby(['Sp', 'Mt'])\nresult = grouped.apply(lambda x: x[x['count'] == x['count'].max()])\n```", "metadata": {"problem_id": 136, "library_problem_id": 136, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 135}}
{"id": 137, "code": "```python\ngrouped = df.groupby(['Sp', 'Mt'])\nresult = grouped.apply(lambda x: x[x['count'] == x['count'].min()])\n```", "metadata": {"problem_id": 137, "library_problem_id": 137, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 135}}
{"id": 138, "code": "```python\ngrouped = df.groupby(['Sp', 'Value'])\nresult = grouped.apply(lambda x: x[x['count'] == x['count'].max()])\n```", "metadata": {"problem_id": 138, "library_problem_id": 138, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 135}}
{"id": 139, "code": "```python\ndf.query(\"Category.isin(@filter_list)\")\n```", "metadata": {"problem_id": 139, "library_problem_id": 139, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 139}}
{"id": 140, "code": "```python\ndf.query(\"Category not in @filter_list\")\n```", "metadata": {"problem_id": 140, "library_problem_id": 140, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 139}}
{"id": 141, "code": "```python\nvalue_vars = [(x, y, z) for x in df.columns.get_level_values(0) for y in df.columns.get_level_values(1) for z in df.columns.get_level_values(2)]\nresult = pd.melt(df, value_vars=value_vars)\n```", "metadata": {"problem_id": 141, "library_problem_id": 141, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 141}}
{"id": 142, "code": "```python\nvalue_vars = [(i, j, k) for i in df.columns.get_level_values(0) for j in df.columns.get_level_values(1) for k in df.columns.get_level_values(2)]\nresult = pd.melt(df, value_vars=value_vars, var_name=['variable_0', 'variable_1', 'variable_2'], value_name='value')\n```", "metadata": {"problem_id": 142, "library_problem_id": 142, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 141}}
{"id": 143, "code": "```python\ndf['cumsum'] = df.groupby('id')['val'].cumsum()\n```", "metadata": {"problem_id": 143, "library_problem_id": 143, "library": "Pandas", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 143}}
{"id": 144, "code": "```python\ndf['cumsum'] = df.groupby('id')['val'].cumsum()\n```", "metadata": {"problem_id": 144, "library_problem_id": 144, "library": "Pandas", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 143}}
{"id": 145, "code": "```python\ndf['cumsum'] = df.groupby('id')['val'].cumsum()\n```", "metadata": {"problem_id": 145, "library_problem_id": 145, "library": "Pandas", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 143}}
{"id": 146, "code": "```python\ndf['cummax'] = df.groupby('id')['val'].cummax()\n```", "metadata": {"problem_id": 146, "library_problem_id": 146, "library": "Pandas", "test_case_cnt": 3, "perturbation_type": "Semantic", "perturbation_origin_id": 143}}
{"id": 147, "code": "```python\ndf['cumsum'] = df.groupby('id')['val'].cumsum().clip(lower=0)\n```", "metadata": {"problem_id": 147, "library_problem_id": 147, "library": "Pandas", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 143}}
{"id": 148, "code": "```python\nresult = df.groupby('l')['v'].agg(lambda x: x.sum(skipna=False))\n```", "metadata": {"problem_id": 148, "library_problem_id": 148, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 148}}
{"id": 149, "code": "```python\nresult = df.groupby('r')['v'].agg(lambda x: x.sum(skipna=False))\n```", "metadata": {"problem_id": 149, "library_problem_id": 149, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 148}}
{"id": 150, "code": "```python\nresult = df.groupby('l')['v'].agg(lambda x: np.sum(x, skipna=False))\n```", "metadata": {"problem_id": 150, "library_problem_id": 150, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 148}}
{"id": 151, "code": "```python\nfrom sklearn.preprocessing import MultiLabelBinarizer\n\nmlb = MultiLabelBinarizer()\nbinarized_df = mlb.fit_transform(df.values.tolist())\nrelationship_types = []\n\nfor i in range(len(df.columns)):\n    for j in range(i + 1, len(df.columns)):\n        col1_counts = binarized_df[:, i].sum()\n        col2_counts = binarized_df[:, j].sum()\n        col1_col2_counts = (binarized_df[:, i] * binarized_df[:, j]).sum()\n        \n        if col1_counts == col1_col2_counts:\n            relation = 'one-to-one'\n        elif col1_col2_counts == 0:\n            relation = 'many-to-many'\n        elif col1_counts == col2_counts:\n            relation = 'one-to-many'\n        else:\n            relation = 'many-to-one'\n        \n        relationship_types.append(f'{df.columns[i]} {df.columns[j]} {relation}')\n\nresult = relationship_types\n```", "metadata": {"problem_id": 151, "library_problem_id": 151, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 151}}
{"id": 152, "code": "```python\nfrom sklearn.preprocessing import MultiLabelBinarizer\n\nmlb = MultiLabelBinarizer()\nbinarized_df = mlb.fit_transform(df.values.tolist())\nresult = []\n\nfor i in range(len(df.columns)):\n    for j in range(i + 1, len(df.columns)):\n        relation = \"one-2-one\" if binarized_df[:, i].sum() == 1 and binarized_df[:, j].sum() == 1 else \"many-2-many\"\n        result.append(f\"{df.columns[i]} {df.columns[j]} {relation}\")\n\nresult\n```", "metadata": {"problem_id": 152, "library_problem_id": 152, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 151}}
{"id": 153, "code": "```python\nresult = pd.DataFrame(index=df.columns, columns=df.columns)\n\nfor col1 in df.columns:\n    for col2 in df.columns:\n        if col1 == col2:\n            result.at[col1, col2] = 'NaN'\n        else:\n            unique_col1 = df[col1].unique()\n            unique_col2 = df[col2].unique()\n            unique_combinations = set(zip(df[col1], df[col2]))\n            \n            if len(unique_col1) == len(unique_combinations):\n                if len(unique_col2) == len(unique_combinations):\n                    result.at[col1, col2] = 'one-to-one'\n                else:\n                    result.at[col1, col2] = 'many-to-one'\n            elif len(unique_col2) == len(unique_combinations):\n                result.at[col1, col2] = 'one-to-many'\n            else:\n                result.at[col1, col2] = 'many-to-many'\n```", "metadata": {"problem_id": 153, "library_problem_id": 153, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 151}}
{"id": 154, "code": "```python\nresult = pd.DataFrame(index=df.columns, columns=df.columns)\n\nfor col1 in df.columns:\n    for col2 in df.columns:\n        if col1 == col2:\n            result.at[col1, col2] = 'NaN'\n        else:\n            unique_col1 = df[col1].unique()\n            unique_col2 = df[col2].unique()\n            if len(unique_col1) == len(df[col1]) and len(unique_col2) == len(df[col2]):\n                result.at[col1, col2] = 'one-2-one'\n            elif len(unique_col1) == len(df[col1]):\n                result.at[col1, col2] = 'one-2-many'\n            elif len(unique_col2) == len(df[col2]):\n                result.at[col1, col2] = 'many-2-one'\n            else:\n                result.at[col1, col2] = 'many-2-many'\n```", "metadata": {"problem_id": 154, "library_problem_id": 154, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 151}}
{"id": 155, "code": "```python\ndfiban_uniq = df.sort_values(by='bank', ascending=False).drop_duplicates(subset=['firstname', 'lastname', 'email'], keep='first')\n```", "metadata": {"problem_id": 155, "library_problem_id": 155, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 155}}
{"id": 156, "code": "```python\ndf['Revenue'] = pd.to_numeric(df['Revenue'].astype(str).str.replace(',', ''), errors='coerce')\ndf['Other, Net'] = pd.to_numeric(df['Other, Net'].astype(str).str.replace(',', ''), errors='coerce')\n```", "metadata": {"problem_id": 156, "library_problem_id": 156, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 156}}
{"id": 157, "code": "```python\ndf['Family'] = ((df['SibSp'] > 0) | (df['Parch'] > 0)).astype(int)\nresult = df.groupby('Family')['Survived'].mean()\n```", "metadata": {"problem_id": 157, "library_problem_id": 157, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 157}}
{"id": 158, "code": "```python\ndf['Family'] = ((df['Survived'] > 0) | (df['Parch'] > 0)).astype(str)\nresult = df.groupby('Family')['SibSp'].mean()\n```", "metadata": {"problem_id": 158, "library_problem_id": 158, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 157}}
{"id": 159, "code": "```python\ndf['FamilyGroup'] = np.select([\n    (df['SibSp'] == 1) & (df['Parch'] == 1),\n    (df['SibSp'] == 0) & (df['Parch'] == 0),\n    (df['SibSp'] == 0) & (df['Parch'] == 1),\n    (df['SibSp'] == 1) & (df['Parch'] == 0)\n], ['Has Family', 'No Family', 'New Family', 'Old Family'])\n\nresult = df.groupby('FamilyGroup')['Survived'].mean()\n```", "metadata": {"problem_id": 159, "library_problem_id": 159, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 157}}
{"id": 160, "code": "```python\nresult = df.groupby('cokey')['A'].apply(lambda x: x.sort_values()).reset_index(name='A')\n```", "metadata": {"problem_id": 160, "library_problem_id": 160, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 160}}
{"id": 161, "code": "```python\nresult = df.groupby('cokey')['A'].apply(lambda x: x.sort_values(ascending=False)).reset_index(name='A')\n```", "metadata": {"problem_id": 161, "library_problem_id": 161, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 160}}
{"id": 162, "code": "```python\ndf.columns = pd.MultiIndex.from_tuples(df.columns)\n```", "metadata": {"problem_id": 162, "library_problem_id": 162, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 162}}
{"id": 163, "code": "```python\ndf.columns = pd.MultiIndex.from_tuples(df.columns, names=[\"Caps\", \"Middle\", \"Lower\"])\n```", "metadata": {"problem_id": 163, "library_problem_id": 163, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 162}}
{"id": 164, "code": "```python\ndf.columns = pd.MultiIndex.from_tuples(df.columns, names=[\"Caps\", \"Middle\", \"Lower\"])\n```", "metadata": {"problem_id": 164, "library_problem_id": 164, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 162}}
{"id": 165, "code": "```python\nresult = pd.DataFrame({'birdType': someTuple[0], 'birdCount': someTuple[1]})\n```", "metadata": {"problem_id": 165, "library_problem_id": 165, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 165}}
{"id": 166, "code": "```python\nresult = df.groupby('a')['b'].agg(['mean', 'std']).reset_index()\n```", "metadata": {"problem_id": 166, "library_problem_id": 166, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 166}}
{"id": 167, "code": "```python\nresult = df.groupby('b')['a'].agg(['mean', 'std']).reset_index()\n```", "metadata": {"problem_id": 167, "library_problem_id": 167, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 166}}
{"id": 168, "code": "```python\nimport numpy as np\n\ndef softmax(x):\n    e_x = np.exp(x - np.max(x))\n    return e_x / e_x.sum()\n\ndef min_max_normalize(x):\n    return (x - x.min()) / (x.max() - x.min())\n\ndf['softmax'] = df.groupby('a')['b'].transform(softmax)\ndf['min-max'] = df.groupby('a')['b'].transform(min_max_normalize)\n```", "metadata": {"problem_id": 168, "library_problem_id": 168, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 166}}
{"id": 169, "code": "```python\nresult = df.loc[:, (df != 0).any(axis=0)].loc[(df != 0).any(axis=1)]\n```", "metadata": {"problem_id": 169, "library_problem_id": 169, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 169}}
{"id": 170, "code": "```python\nresult = df.loc[:, (df.sum() != 0) & (df.sum(axis=1) != 0)]\n```", "metadata": {"problem_id": 170, "library_problem_id": 170, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 169}}
{"id": 171, "code": "```python\nresult = df[(df == 2).any(axis=1)]\n```", "metadata": {"problem_id": 171, "library_problem_id": 171, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 169}}
{"id": 172, "code": "```python\ndf[(df == 2)] = 0\n```", "metadata": {"problem_id": 172, "library_problem_id": 172, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 169}}
{"id": 173, "code": "```python\nresult = s.sort_values().sort_index()\n```", "metadata": {"problem_id": 173, "library_problem_id": 173, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 173}}
{"id": 174, "code": "```python\ndf = s.sort_values().sort_index(kind='mergesort').reset_index()\ndf.columns = ['index', 1]\n```", "metadata": {"problem_id": 174, "library_problem_id": 174, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 173}}
{"id": 175, "code": "```python\nresult = df[pd.to_numeric(df['A'], errors='coerce').notnull()]\n```", "metadata": {"problem_id": 175, "library_problem_id": 175, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 175}}
{"id": 176, "code": "```python\nresult = df[df['A'].apply(lambda x: isinstance(x, str))]\n```", "metadata": {"problem_id": 176, "library_problem_id": 176, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 175}}
{"id": 177, "code": "```python\ngrouped = df.groupby(['Sp', 'Mt'])\nmax_count = grouped['count'].transform(max)\nresult = df[max_count == df['count']]\n```", "metadata": {"problem_id": 177, "library_problem_id": 177, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 177}}
{"id": 178, "code": "```python\ngrouped = df.groupby(['Sp', 'Mt'])\nmax_count = grouped['count'].transform(max)\nresult = df[max_count == df['count']]\n```", "metadata": {"problem_id": 178, "library_problem_id": 178, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 177}}
{"id": 179, "code": "```python\ngrouped = df.groupby(['Sp', 'Mt'])\nmin_count = grouped['count'].transform('min')\nresult = df[min_count == df['count']]\n```", "metadata": {"problem_id": 179, "library_problem_id": 179, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 177}}
{"id": 180, "code": "```python\ngrouped = df.groupby(['Sp', 'Value'])['count'].transform(max)\nresult = df[grouped == df['count']]\n```", "metadata": {"problem_id": 180, "library_problem_id": 180, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 177}}
{"id": 181, "code": "```python\ndf['Date'] = df['Member'].map(dict).fillna(df['Date'])\n```", "metadata": {"problem_id": 181, "library_problem_id": 181, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 181}}
{"id": 182, "code": "```python\ndf['Date'] = df['Member'].map(dict).fillna('17/8/1926')\n```", "metadata": {"problem_id": 182, "library_problem_id": 182, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 181}}
{"id": 183, "code": "```python\ndf['Date'] = df['Member'].map(example_dict).fillna(df['Date'])\n```", "metadata": {"problem_id": 183, "library_problem_id": 183, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 181}}
{"id": 184, "code": "```python\ndf['Date'] = df['Member'].map(dict).fillna('17/8/1926').dt.strftime('%d-%b-%Y')\n```", "metadata": {"problem_id": 184, "library_problem_id": 184, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 181}}
{"id": 185, "code": "```python\ndf['Count_m'] = df.groupby([df['Date'].dt.year, df['Date'].dt.month])['Date'].transform('count')\ndf['Count_y'] = df.groupby(df['Date'].dt.year)['Date'].transform('count')\n```", "metadata": {"problem_id": 185, "library_problem_id": 185, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 185}}
{"id": 186, "code": "```python\ndf['Count_d'] = df.Date.map(df.groupby('Date').size())\ndf['Count_m'] = df.Date.dt.to_period('M').map(df.groupby(df.Date.dt.to_period('M')).size())\ndf['Count_y'] = df.Date.dt.year.map(df.groupby(df.Date.dt.year).size())\ndf['Count_Val'] = df.Val.map(df.groupby('Val').size())\n```", "metadata": {"problem_id": 186, "library_problem_id": 186, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 185}}
{"id": 187, "code": "```python\ndf['Date'] = pd.to_datetime(df['Date'], format='%d/%m/%y')\ndf['Year'] = df['Date'].dt.year\ndf['Month'] = df['Date'].dt.month\ndf['Weekday'] = df['Date'].dt.weekday\ndf['Count_d'] = df.groupby(['Date']).transform('size')\ndf['Count_m'] = df.groupby(['Year', 'Month']).transform('size')\ndf['Count_y'] = df.groupby(['Year']).transform('size')\ndf['Count_w'] = df.groupby(['Year', 'Month', 'Weekday']).transform('size')\ndf['Count_Val'] = df.groupby(['Year', 'Month', 'Val']).transform('size')\n```", "metadata": {"problem_id": 187, "library_problem_id": 187, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 185}}
{"id": 188, "code": "```python\nresult1 = df.eq(0).groupby('Date').sum()\nresult2 = df.ne(0).groupby('Date').sum()\n```", "metadata": {"problem_id": 188, "library_problem_id": 188, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 188}}
{"id": 189, "code": "```python\nresult1 = df.apply(lambda x: (x % 2 == 0).groupby(x.index).sum())\nresult2 = df.apply(lambda x: (x % 2 != 0).groupby(x.index).sum())\n```", "metadata": {"problem_id": 189, "library_problem_id": 189, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 188}}
{"id": 190, "code": "```python\nresult = pd.pivot_table(df, values=['D','E'], rows=['B'], aggfunc={'D': np.sum, 'E': np.mean})\n```", "metadata": {"problem_id": 190, "library_problem_id": 190, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 190}}
{"id": 191, "code": "```python\nresult = pd.pivot_table(df, values=['D','E'], rows=['B'], aggfunc={'D': np.sum, 'E': np.mean})\n```", "metadata": {"problem_id": 191, "library_problem_id": 191, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 190}}
{"id": 192, "code": "```python\nresult = pd.pivot_table(df, values=['D','E'], rows=['B'], aggfunc={'D': np.sum, 'E': np.mean})\n```", "metadata": {"problem_id": 192, "library_problem_id": 192, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 190}}
{"id": 193, "code": "```python\nresult = pd.pivot_table(df, values=['D','E'], rows=['B'], aggfunc={'D': np.max, 'E': np.min})\n```", "metadata": {"problem_id": 193, "library_problem_id": 193, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 190}}
{"id": 194, "code": "```python\nimport dask.dataframe as dd\n\ndf = dd.from_pandas(pd.DataFrame([[\"A\", \"Z,Y\"], [\"B\", \"X\"], [\"C\", \"W,U,V\"]], index=[1,2,3], columns=['var1', 'var2']), npartitions=1)\n\ndef explode_column(df, col):\n    return df[col].str.split(',', expand=True).stack().reset_index(level=1, drop=True).to_frame(name=col)\n\nresult = df.join(explode_column(df, 'var2'))\n```", "metadata": {"problem_id": 194, "library_problem_id": 194, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 194}}
{"id": 195, "code": "```python\nresult = df.explode('var2')\n```", "metadata": {"problem_id": 195, "library_problem_id": 195, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 194}}
{"id": 196, "code": "```python\nimport dask.dataframe as dd\n\ndf = dd.from_pandas(pd.DataFrame([[\"A\", \"Z-Y\"], [\"B\", \"X\"], [\"C\", \"W-U-V\"]], columns=['var1', 'var2']), npartitions=1)\n\ndef split_column(df):\n    return df.explode('var2')\n\nresult = split_column(df)\n```", "metadata": {"problem_id": 196, "library_problem_id": 196, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 194}}
{"id": 197, "code": "```python\ndf[\"new\"] = df[\"str\"].apply(lambda x: sum(1 for char in x if not char.isalnum()))\n```", "metadata": {"problem_id": 197, "library_problem_id": 197, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 197}}
{"id": 198, "code": "```python\ndf[\"new\"] = df[\"str\"].apply(lambda x: sum(1 for char in x if not char.isalpha()))\n```", "metadata": {"problem_id": 198, "library_problem_id": 198, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 197}}
{"id": 199, "code": "```python\ndf[['fips', 'row']] = df['row'].str.split(' ', 1, expand=True)\n```", "metadata": {"problem_id": 199, "library_problem_id": 199, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 199}}
{"id": 200, "code": "```python\ndf[['fips', 'row']] = df['row'].str.split(' ', 1, expand=True)\n```", "metadata": {"problem_id": 200, "library_problem_id": 200, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 199}}
{"id": 201, "code": "```python\ndf[['fips', 'medi', 'row']] = df['row'].str.split(' ', n=2, expand=True)\n```", "metadata": {"problem_id": 201, "library_problem_id": 201, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 199}}
{"id": 202, "code": "```python\ndf.iloc[:, 1:].apply(lambda x: x[x != 0].cumsum() / x[x != 0].cumcount(), axis=1)\n```", "metadata": {"problem_id": 202, "library_problem_id": 202, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 202}}
{"id": 203, "code": "```python\ndf.iloc[:, :-1].apply(lambda x: x[::-1].replace(0, np.nan).cumsum().fillna(method='ffill').astype(int)[::-1], axis=1)\n```", "metadata": {"problem_id": 203, "library_problem_id": 203, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 202}}
{"id": 204, "code": "```python\nresult = df.set_index('Name').apply(lambda x: x.replace(0, pd.NA).cumsum().divide(x.replace(0, pd.NA).cumcount()+1)).reset_index()\n```", "metadata": {"problem_id": 204, "library_problem_id": 204, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 202}}
{"id": 205, "code": "```python\ndf = df.set_index('Name').apply(lambda x: x[::-1].cumsum().shift(1).where(x != 0, other=np.nan).fillna(method='ffill')[::-1], axis=1)\n```", "metadata": {"problem_id": 205, "library_problem_id": 205, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 202}}
{"id": 206, "code": "```python\ndf['label'] = 1\ndf['label'][1:] = (df['Close'][1:] - df['Close'][:-1] > 0).astype(int)\n```", "metadata": {"problem_id": 206, "library_problem_id": 206, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 206}}
{"id": 207, "code": "```python\ndf['label'] = [1] + [(lambda x: 1 if x > 0 else (-1 if x < 0 else 0))(df['Close'].iloc[i] - df['Close'].iloc[i-1]) for i in range(1, len(df))]\n```", "metadata": {"problem_id": 207, "library_problem_id": 207, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 206}}
{"id": 208, "code": "```python\ndf['label'] = [1] + [(lambda x: 1 if x > 0 else (-1 if x < 0 else 0))(df['Close'].iloc[i] - df['Close'].iloc[i-1]) for i in range(1, len(df))]\ndf['DateTime'] = df['DateTime'].dt.strftime('%d-%b-%Y')\n```", "metadata": {"problem_id": 208, "library_problem_id": 208, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 206}}
{"id": 209, "code": "```python\ndf['Duration'] = df.departure_time.shift(-1) - df.arrival_time\n```", "metadata": {"problem_id": 209, "library_problem_id": 209, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 209}}
{"id": 210, "code": "```python\ndf['Duration'] = df.departure_time.shift(-1) - df.arrival_time\n```", "metadata": {"problem_id": 210, "library_problem_id": 210, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 209}}
{"id": 211, "code": "```python\ndf['arrival_time'] = pd.to_datetime(df['arrival_time'], errors='coerce')\ndf['departure_time'] = pd.to_datetime(df['departure_time'])\ndf['Duration'] = df['departure_time'].shift(-1) - df['arrival_time']\ndf['arrival_time'] = df['arrival_time'].dt.strftime('%d-%b-%Y %H:%M:%S')\ndf['departure_time'] = df['departure_time'].dt.strftime('%d-%b-%Y %H:%M:%S')\n```", "metadata": {"problem_id": 211, "library_problem_id": 211, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 209}}
{"id": 212, "code": "```python\ndf.groupby(['key1']).apply(lambda x: (x['key2'] == 'one').sum()).reset_index(name='count')\n```", "metadata": {"problem_id": 212, "library_problem_id": 212, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 212}}
{"id": 213, "code": "```python\ndf.groupby(['key1']).apply(lambda x: (x['key2'] == 'two').sum()).reset_index(name='count')\n```", "metadata": {"problem_id": 213, "library_problem_id": 213, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 212}}
{"id": 214, "code": "```python\ndf.groupby(['key1']).apply(lambda x: (x['key2'].str.endswith('e')).sum()).reset_index(name='count')\n```", "metadata": {"problem_id": 214, "library_problem_id": 214, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 212}}
{"id": 215, "code": "```python\nmin_result, max_result = df.index.min(), df.index.max()\n```", "metadata": {"problem_id": 215, "library_problem_id": 215, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 215}}
{"id": 216, "code": "```python\nmode_result = df.index[df.value == df.value.mode()[0]].tolist()\nmedian_result = df.index[df.value == df.value.median()].tolist()\n```", "metadata": {"problem_id": 216, "library_problem_id": 216, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 215}}
{"id": 217, "code": "```python\ndf = df[(df['closing_price'] >= 99) & (df['closing_price'] <= 101)]\n```", "metadata": {"problem_id": 217, "library_problem_id": 217, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 217}}
{"id": 218, "code": "```python\ndf = df[~((df['closing_price'] >= 99) & (df['closing_price'] <= 101))]\n```", "metadata": {"problem_id": 218, "library_problem_id": 218, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 217}}
{"id": 219, "code": "```python\ndf1 = df.loc[df.groupby(\"item\")[\"diff\"].idxmin()]\n```", "metadata": {"problem_id": 219, "library_problem_id": 219, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 219}}
{"id": 220, "code": "```python\nd6['SOURCE_NAME'] = d6['SOURCE_NAME'].apply(lambda x: '_'.join(x.split('_')[:-1]) if '_' in x else x)\n```", "metadata": {"problem_id": 220, "library_problem_id": 220, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 220}}
{"id": 221, "code": "```python\nd6['SOURCE_NAME'] = d6['SOURCE_NAME'].apply(lambda x: '_'.join(x.split('_')[-1:]) if '_' in x else x)\n```", "metadata": {"problem_id": 221, "library_problem_id": 221, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 220}}
{"id": 222, "code": "```python\nd6['SOURCE_NAME'] = d6['SOURCE_NAME'].apply(lambda x: '_'.join(x.split('_')[:-1]) if '_' in x else x)\n```", "metadata": {"problem_id": 222, "library_problem_id": 222, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 220}}
{"id": 223, "code": "```python\nnan_count = df['Column_x'].isna().sum()\nhalf_nan_count = nan_count // 2\n\ndf.loc[df['Column_x'].isna()][:half_nan_count] = 0\ndf.loc[df['Column_x'].isna()][half_nan_count:] = 1\n```", "metadata": {"problem_id": 223, "library_problem_id": 223, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 223}}
{"id": 224, "code": "```python\nnan_count = df['Column_x'].isna().sum()\nfirst_third = nan_count // 3\nsecond_third = 2 * nan_count // 3\n\nnan_indices = df[df['Column_x'].isna()].index.tolist()\n\nfor i, idx in enumerate(nan_indices):\n    if i < first_third:\n        df.at[idx, 'Column_x'] = 0\n    elif i < second_third:\n        df.at[idx, 'Column_x'] = 0.5\n    else:\n        df.at[idx, 'Column_x'] = 1\n```", "metadata": {"problem_id": 224, "library_problem_id": 224, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 223}}
{"id": 225, "code": "```python\nnan_count = df['Column_x'].isna().sum()\nzero_count = nan_count // 2\none_count = nan_count - zero_count\n\nzeros = [0] * zero_count\nones = [1] * one_count\n\nfill_values = zeros + ones\nnp.random.shuffle(fill_values)\n\ndf['Column_x'].fillna(pd.Series(fill_values), inplace=True)\n```", "metadata": {"problem_id": 225, "library_problem_id": 225, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 223}}
{"id": 226, "code": "```python\nresult = pd.concat([a.stack(), b.stack()], axis=1).apply(tuple, axis=1).unstack().reset_index(drop=True)\n```", "metadata": {"problem_id": 226, "library_problem_id": 226, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 226}}
{"id": 227, "code": "```python\nresult = pd.concat([a, b, c], axis=1).apply(lambda x: tuple(x), axis=1).to_frame(name='one').join(pd.concat([a, b, c], axis=1).apply(lambda x: tuple(x), axis=1).to_frame(name='two'))\n```", "metadata": {"problem_id": 227, "library_problem_id": 227, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 226}}
{"id": 228, "code": "```python\nresult = pd.concat([a, b], axis=1).apply(lambda x: list(zip(x[a.columns], x[b.columns])), axis=1)\n```", "metadata": {"problem_id": 228, "library_problem_id": 228, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 226}}
{"id": 229, "code": "```python\nresult = pd.crosstab(df['username'], pd.cut(df['views'], bins))\n```", "metadata": {"problem_id": 229, "library_problem_id": 229, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 229}}
{"id": 230, "code": "```python\nresult = groups.size().unstack(fill_value=0)\n```", "metadata": {"problem_id": 230, "library_problem_id": 230, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 229}}
{"id": 231, "code": "```python\nresult = pd.crosstab(df['username'], pd.cut(df['views'], bins))\n```", "metadata": {"problem_id": 231, "library_problem_id": 231, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 229}}
{"id": 232, "code": "```python\nresult = pd.DataFrame({'text': [', '.join(df['text'].tolist())]})\n```", "metadata": {"problem_id": 232, "library_problem_id": 232, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 232}}
{"id": 233, "code": "```python\nresult = pd.DataFrame({'text': ['-'.join(df['text'].tolist())]})\n```", "metadata": {"problem_id": 233, "library_problem_id": 233, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 232}}
{"id": 234, "code": "```python\nresult = pd.DataFrame({'text': [', '.join(df['text'].tolist()[::-1])]})\n```", "metadata": {"problem_id": 234, "library_problem_id": 234, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 232}}
{"id": 235, "code": "```python\nresult = pd.Series([\", \".join(df['text'].tolist())], name='text')\n```", "metadata": {"problem_id": 235, "library_problem_id": 235, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 232}}
{"id": 236, "code": "```python\nresult = '-'.join(df['text'][::-1].values)\n```", "metadata": {"problem_id": 236, "library_problem_id": 236, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 232}}
{"id": 237, "code": "```python\nresult = pd.merge(df2, df1[['id', 'city', 'district']], how='left', on='id').sort_values(by=['id', 'date']).reset_index(drop=True)\n```", "metadata": {"problem_id": 237, "library_problem_id": 237, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 237}}
{"id": 238, "code": "```python\nresult = pd.merge(df1, df2, on='id', how='outer').sort_values(by=['id', 'date']).fillna(method='ffill').rename(columns={'date_x': 'date'}).drop(columns=['date_y'])\nresult['date'] = pd.to_datetime(result['date']).dt.strftime('%d-%b-%Y')\n```", "metadata": {"problem_id": 238, "library_problem_id": 238, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 237}}
{"id": 239, "code": "```python\nresult = pd.merge(df1, df2, on='id', how='outer').sort_values(by=['id', 'date']).fillna(method='ffill')\n```", "metadata": {"problem_id": 239, "library_problem_id": 239, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 237}}
{"id": 240, "code": "```python\nresult = pd.concat([C.set_index('A'), D.set_index('A')]).reset_index().rename(columns={'index': 'A'})\n```", "metadata": {"problem_id": 240, "library_problem_id": 240, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 240}}
{"id": 241, "code": "```python\nresult = pd.concat([C, D]).drop_duplicates(subset='A', keep='first').reset_index(drop=True)\n```", "metadata": {"problem_id": 241, "library_problem_id": 241, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 240}}
{"id": 242, "code": "```python\nresult = pd.merge(C, D, how='outer', on='A', suffixes=('', '_y'))\nresult['B'] = result['B_y'].combine_first(result['B'])\nresult.drop(columns=['B_y'], inplace=True)\nresult['duplicated'] = result.duplicated(subset='A', keep=False)\nresult.fillna({'B': 0}, inplace=True)\nresult.reset_index(drop=True, inplace=True)\n```", "metadata": {"problem_id": 242, "library_problem_id": 242, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 240}}
{"id": 243, "code": "```python\nresult = df.groupby('user').apply(lambda x: sorted(x[['time', 'amount']].values.tolist())).reset_index(name='transactions')\n```", "metadata": {"problem_id": 243, "library_problem_id": 243, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 243}}
{"id": 244, "code": "```python\nresult = df.groupby('user').apply(lambda x: sorted(zip(x['time'], x['amount']))).reset_index(name='amount-time-tuple')\n```", "metadata": {"problem_id": 244, "library_problem_id": 244, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 243}}
{"id": 245, "code": "```python\nresult = df.groupby('user').apply(lambda x: sorted(zip(x['time'], x['amount']))).reset_index(name='amount-time-tuple')\n```", "metadata": {"problem_id": 245, "library_problem_id": 245, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 243}}
{"id": 246, "code": "```python\ndf_concatenated = pd.DataFrame(series.tolist(), index=series.index)\n```", "metadata": {"problem_id": 246, "library_problem_id": 246, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 246}}
{"id": 247, "code": "```python\ndf_concatenated = pd.DataFrame(series.tolist(), index=series.index).reset_index()\ndf_concatenated.columns = ['name', 0, 1, 2, 3]\n```", "metadata": {"problem_id": 247, "library_problem_id": 247, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 246}}
{"id": 248, "code": "```python\nresult = [col for col in df.columns if s in col and col != s]\n```", "metadata": {"problem_id": 248, "library_problem_id": 248, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 248}}
{"id": 249, "code": "```python\nresult = df[[col for col in df.columns if s in col and col != s]]\n```", "metadata": {"problem_id": 249, "library_problem_id": 249, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 248}}
{"id": 250, "code": "```python\nimport re\n\n# Find columns containing 'spike' but not exactly matching it\nmatching_columns = [col for col in df.columns if re.search(r'\\bspike\\b', col)]\n\n# Rename these columns\nfor i, col in enumerate(matching_columns):\n    new_col_name = f'spike{i+1}'\n    df.rename(columns={col: new_col_name}, inplace=True)\n\n# Select the renamed columns\nresult = df[['spike1', 'spike2']]\n```", "metadata": {"problem_id": 250, "library_problem_id": 250, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 248}}
{"id": 251, "code": "```python\nresult = pd.DataFrame(df['codes'].tolist(), index=df.index).add_prefix('code_')\n```", "metadata": {"problem_id": 251, "library_problem_id": 251, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 251}}
{"id": 252, "code": "```python\nresult = pd.DataFrame(df['codes'].tolist(), index=df.index)\n```", "metadata": {"problem_id": 252, "library_problem_id": 252, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 251}}
{"id": 253, "code": "```python\nresult = pd.DataFrame(df['codes'].tolist()).add_prefix('code_').astype(float).fillna(np.nan)\n```", "metadata": {"problem_id": 253, "library_problem_id": 253, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 251}}
{"id": 254, "code": "```python\nresult = sum((eval(x) for x in ids), [])\n```", "metadata": {"problem_id": 254, "library_problem_id": 254, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 254}}
{"id": 255, "code": "```python\nresult = ','.join(map(str, sum(df['User IDs'].tolist(), [])))\n```", "metadata": {"problem_id": 255, "library_problem_id": 255, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 254}}
{"id": 256, "code": "```python\nresult = ','.join(str(item) for sublist in df['User IDs'] for item in sublist)\n```", "metadata": {"problem_id": 256, "library_problem_id": 256, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 254}}
{"id": 257, "code": "```python\ndf.resample('2T').mean().dropna()\n```", "metadata": {"problem_id": 257, "library_problem_id": 257, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 257}}
{"id": 258, "code": "```python\ndf.resample('3T').sum().reset_index()\n```", "metadata": {"problem_id": 258, "library_problem_id": 258, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 257}}
{"id": 259, "code": "```python\ndf['RANK'] = df.groupby('ID')['TIME'].rank(ascending=True)\n```", "metadata": {"problem_id": 259, "library_problem_id": 259, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 259}}
{"id": 260, "code": "```python\ndf['RANK'] = df.groupby('ID')['TIME'].rank(ascending=True)\n```", "metadata": {"problem_id": 260, "library_problem_id": 260, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 259}}
{"id": 261, "code": "```python\ndf['RANK'] = df.groupby('ID')['TIME'].rank(ascending=False)\n\ndf['TIME'] = pd.to_datetime(df['TIME']).dt.strftime('%d-%b-%Y %a %H:%M:%S')\n```", "metadata": {"problem_id": 261, "library_problem_id": 261, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 259}}
{"id": 262, "code": "```python\nresult = df[df.index.get_level_values('a').map(filt)]\n```", "metadata": {"problem_id": 262, "library_problem_id": 262, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 262}}
{"id": 263, "code": "```python\nresult = df[df.index.get_level_values('a').map(filt)]\n```", "metadata": {"problem_id": 263, "library_problem_id": 263, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 262}}
{"id": 264, "code": "```python\nresult = df.columns[(df.iloc[0] != df.iloc[8]) | (df.iloc[0].isna() & df.iloc[8].isna())]\n```", "metadata": {"problem_id": 264, "library_problem_id": 264, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 264}}
{"id": 265, "code": "```python\nresult = (df.loc[0] == df.loc[8]).idxtrue()\n```", "metadata": {"problem_id": 265, "library_problem_id": 265, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 264}}
{"id": 266, "code": "```python\nresult = [col for col in df.columns if not equalp(df.at[0, col], df.at[8, col])]\n```", "metadata": {"problem_id": 266, "library_problem_id": 266, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 264}}
{"id": 267, "code": "```python\n[(np.nan, 18.0), (np.nan, 18.0), (17.0, 16.0), (16.0, np.nan), (0.0, np.nan)]\n```", "metadata": {"problem_id": 267, "library_problem_id": 267, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 264}}
{"id": 268, "code": "```python\nts = pd.Series(df['Value'].values, index=df['Date'])\n```", "metadata": {"problem_id": 268, "library_problem_id": 268, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 268}}
{"id": 269, "code": "```python\ndf = df.melt().set_index('variable').T\n```", "metadata": {"problem_id": 269, "library_problem_id": 269, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 269}}
{"id": 270, "code": "```python\ndf = df.melt().set_index('variable').T\n```", "metadata": {"problem_id": 270, "library_problem_id": 270, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 269}}
{"id": 271, "code": "```python\ndf['dogs'] = df['dogs'].apply(lambda x: round(x, 2) if pd.notna(x) else x)\n```", "metadata": {"problem_id": 271, "library_problem_id": 271, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 271}}
{"id": 272, "code": "```python\ndf['dogs'] = df['dogs'].apply(lambda x: round(x, 2) if pd.notna(x) else x)\ndf['cats'] = df['cats'].apply(lambda x: round(x, 2) if pd.notna(x) else x)\n```", "metadata": {"problem_id": 272, "library_problem_id": 272, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 271}}
{"id": 273, "code": "```python\ndf['Sum'] = df[list_of_my_columns].sum(axis=1)\n```", "metadata": {"problem_id": 273, "library_problem_id": 273, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 273}}
{"id": 274, "code": "```python\ndf['Avg'] = df[list_of_my_columns].mean(axis=1)\n```", "metadata": {"problem_id": 274, "library_problem_id": 274, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 273}}
{"id": 275, "code": "```python\ndf['Avg'] = df[list_of_my_columns].mean(axis=1)\ndf['Min'] = df[list_of_my_columns].min(axis=1)\ndf['Max'] = df[list_of_my_columns].max(axis=1)\ndf['Median'] = df[list_of_my_columns].median(axis=1)\n```", "metadata": {"problem_id": 275, "library_problem_id": 275, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 273}}
{"id": 276, "code": "```python\nresult = df.sort_index(level='time')\n```", "metadata": {"problem_id": 276, "library_problem_id": 276, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 276}}
{"id": 277, "code": "```python\nresult = df.sort_values(by='VIM', kind='mergesort').reset_index(drop=True)\n```", "metadata": {"problem_id": 277, "library_problem_id": 277, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 276}}
{"id": 278, "code": "```python\ndays_to_remove = ['2020-02-17', '2020-02-18']\nsp = sp[~sp.index.normalize().isin(pd.to_datetime(days_to_remove))]\n```", "metadata": {"problem_id": 278, "library_problem_id": 278, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 278}}
{"id": 279, "code": "```python\nresult = df[(df.index.date != datetime.date(2020, 2, 17)) & (df.index.date != datetime.date(2020, 2, 18))]\n```", "metadata": {"problem_id": 279, "library_problem_id": 279, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 278}}
{"id": 280, "code": "```python\nresult = corr.where(corr > 0.3).stack().dropna()\n```", "metadata": {"problem_id": 280, "library_problem_id": 280, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 280}}
{"id": 281, "code": "```python\nresult = corr.stack().filter(regex='^(\\d+)\\.\\1$').where(lambda x: x > 0.3).dropna()\n```", "metadata": {"problem_id": 281, "library_problem_id": 281, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 280}}
{"id": 282, "code": "```python\ndf.rename(columns={df.columns[-1]: 'Test'}, inplace=True)\n```", "metadata": {"problem_id": 282, "library_problem_id": 282, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 282}}
{"id": 283, "code": "```python\ndf.columns.values[0] = 'Test'\n```", "metadata": {"problem_id": 283, "library_problem_id": 283, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 282}}
{"id": 284, "code": "```python\ndf['frequent'] = df.apply(lambda row: row.idxmax(), axis=1)\ndf['freq_count'] = df.apply(lambda row: row.max(), axis=1)\n```", "metadata": {"problem_id": 284, "library_problem_id": 284, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 284}}
{"id": 285, "code": "```python\ndf['frequent'] = df.apply(lambda row: row.idxmax(), axis=1)\ndf['freq_count'] = df.apply(lambda row: row.max(), axis=1)\n```", "metadata": {"problem_id": 285, "library_problem_id": 285, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 284}}
{"id": 286, "code": "```python\ndf['frequent'] = df.apply(lambda row: sorted(row.value_counts().index.tolist()), axis=1)\ndf['freq_count'] = df.apply(lambda row: len(row.value_counts()), axis=1)\n```", "metadata": {"problem_id": 286, "library_problem_id": 286, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 284}}
{"id": 287, "code": "```python\nresult = df.groupby([\"id1\", \"id2\"]).agg({'foo': 'mean', 'bar': 'mean'}).reset_index()\n```", "metadata": {"problem_id": 287, "library_problem_id": 287, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 287}}
{"id": 288, "code": "```python\ndf['bar'] = df['bar'].replace('NULL', 0).astype(float)\nresult = df.groupby([\"id1\", \"id2\"])[[\"foo\", \"bar\"]].mean().reset_index()\n```", "metadata": {"problem_id": 288, "library_problem_id": 288, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 287}}
{"id": 289, "code": "```python\ndf_c = pd.merge(df_a, df_b[['EntityNum', 'a_col']], on='EntityNum')\n```", "metadata": {"problem_id": 289, "library_problem_id": 289, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 289}}
{"id": 290, "code": "```python\ndf_c = pd.merge(df_a, df_b[['EntityNum', 'b_col']], on='EntityNum')\n```", "metadata": {"problem_id": 290, "library_problem_id": 290, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 289}}
{"id": 291, "code": "```python\nresult = a.shape\n```", "metadata": {"problem_id": 291, "library_problem_id": 0, "library": "Numpy", "test_case_cnt": 4, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 292, "code": "```python\nx = x[~np.isnan(x)]\n```", "metadata": {"problem_id": 292, "library_problem_id": 1, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 1}}
{"id": 293, "code": "```python\nnp.where(np.isnan(x), np.inf, x)\n```", "metadata": {"problem_id": 293, "library_problem_id": 2, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 1}}
{"id": 294, "code": "```python\nresult = [list(filter(lambda y: not np.isnan(y), i)) for i in x]\n```", "metadata": {"problem_id": 294, "library_problem_id": 3, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 1}}
{"id": 295, "code": "```python\nb = np.eye(np.max(a) + 1)[a]\n```", "metadata": {"problem_id": 295, "library_problem_id": 4, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 4}}
{"id": 296, "code": "```python\nb = np.eye(np.max(a) + 1)[a]\n```", "metadata": {"problem_id": 296, "library_problem_id": 5, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 4}}
{"id": 297, "code": "```python\nb = np.eye(np.max(a) - np.min(a) + 1)[a - np.min(a)]\n```", "metadata": {"problem_id": 297, "library_problem_id": 6, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 4}}
{"id": 298, "code": "```python\nunique_a = np.unique(a)\nb = np.eye(len(unique_a))[np.searchsorted(unique_a, a)]\n```", "metadata": {"problem_id": 298, "library_problem_id": 7, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 4}}
{"id": 299, "code": "```python\nb = np.eye(np.max(a) + 1)[a.ravel()].reshape(a.shape + (-1,))\n```", "metadata": {"problem_id": 299, "library_problem_id": 8, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 4}}
{"id": 300, "code": "```python\nresult = np.percentile(a, p)\n```", "metadata": {"problem_id": 300, "library_problem_id": 9, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 9}}
{"id": 301, "code": "```python\nB = A.reshape(-1, ncol)\n```", "metadata": {"problem_id": 301, "library_problem_id": 10, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 10}}
{"id": 302, "code": "```python\nB = A.reshape(nrow, -1)\n```", "metadata": {"problem_id": 302, "library_problem_id": 11, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 10}}
{"id": 303, "code": "```python\nB = A.reshape(-1, ncol)[:len(A)//ncol, :]\n```", "metadata": {"problem_id": 303, "library_problem_id": 12, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 10}}
{"id": 304, "code": "```python\nB = A[::-1].reshape(-1, ncol)[:,:ncol]\n```", "metadata": {"problem_id": 304, "library_problem_id": 13, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 10}}
{"id": 305, "code": "```python\nresult = np.roll(a, shift)\n```", "metadata": {"problem_id": 305, "library_problem_id": 14, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 14}}
{"id": 306, "code": "```python\nresult = np.roll(a, shift, axis=1)\n```", "metadata": {"problem_id": 306, "library_problem_id": 15, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 14}}
{"id": 307, "code": "```python\nresult = np.roll(xs, shift, axis=1)\n```", "metadata": {"problem_id": 307, "library_problem_id": 16, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 14}}
{"id": 308, "code": "```python\nnp.random.seed(0)\nr_old = np.random.randint(3, size=(100, 2000)) - 1\nnp.random.seed(0)\nr_new = np.random.randint(3, size=(100, 2000)) - 1\n```", "metadata": {"problem_id": 308, "library_problem_id": 17, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 17}}
{"id": 309, "code": "```python\nresult = np.argmax(a)\n```", "metadata": {"problem_id": 309, "library_problem_id": 18, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 18}}
{"id": 310, "code": "```python\nresult = np.argmin(a)\n```", "metadata": {"problem_id": 310, "library_problem_id": 19, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 18}}
{"id": 311, "code": "```python\nnp.unravel_index(np.argmax(a), a.shape, order='F')\n```", "metadata": {"problem_id": 311, "library_problem_id": 20, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 18}}
{"id": 312, "code": "```python\nnp.unravel_index(np.argmax(a), a.shape)\n```", "metadata": {"problem_id": 312, "library_problem_id": 21, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 18}}
{"id": 313, "code": "```python\nnp.argmax(a)\n```", "metadata": {"problem_id": 313, "library_problem_id": 22, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 18}}
{"id": 314, "code": "```python\nnp.argsort(a)[-2]\n```", "metadata": {"problem_id": 314, "library_problem_id": 23, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 18}}
{"id": 315, "code": "```python\na[:, ~z]\n```", "metadata": {"problem_id": 315, "library_problem_id": 24, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 24}}
{"id": 316, "code": "```python\na = a[~np.isnan(a).any(axis=1)]\n```", "metadata": {"problem_id": 316, "library_problem_id": 25, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 24}}
{"id": 317, "code": "```python\nresult = np.array(a)\n```", "metadata": {"problem_id": 317, "library_problem_id": 26, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 26}}
{"id": 318, "code": "```python\na[:, permutation]\n```", "metadata": {"problem_id": 318, "library_problem_id": 27, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 27}}
{"id": 319, "code": "```python\nresult = a[permutation]\n```", "metadata": {"problem_id": 319, "library_problem_id": 28, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 27}}
{"id": 320, "code": "```python\nresult = np.unravel_index(np.argmin(a), a.shape)\n```", "metadata": {"problem_id": 320, "library_problem_id": 29, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 29}}
{"id": 321, "code": "```python\nresult = np.unravel_index(np.argmax(a), a.shape)\n```", "metadata": {"problem_id": 321, "library_problem_id": 30, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 29}}
{"id": 322, "code": "```python\nnp.argmin(a, axis=None)\n```", "metadata": {"problem_id": 322, "library_problem_id": 31, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 29}}
{"id": 323, "code": "```python\nresult = np.sin(np.radians(degree))\n```", "metadata": {"problem_id": 323, "library_problem_id": 32, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 32}}
{"id": 324, "code": "```python\nresult = np.cos(np.radians(degree))\n```", "metadata": {"problem_id": 324, "library_problem_id": 33, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 32}}
{"id": 325, "code": "```python\nsin_value_degree = np.sin(np.deg2rad(number))\nsin_value_radian = np.sin(number)\n\nif sin_value_degree > sin_value_radian:\n    result = 0\nelse:\n    result = 1\n```", "metadata": {"problem_id": 325, "library_problem_id": 34, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 32}}
{"id": 326, "code": "```python\nnp.degrees(np.arcsin(value))\n```", "metadata": {"problem_id": 326, "library_problem_id": 35, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 32}}
{"id": 327, "code": "```python\nresult = np.pad(A, (0, max(0, length - len(A))), 'constant', constant_values=(0,))\n```", "metadata": {"problem_id": 327, "library_problem_id": 36, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 36}}
{"id": 328, "code": "```python\nresult = np.pad(A, (0, max(0, length - len(A))), 'constant', constant_values=(0,))\n```", "metadata": {"problem_id": 328, "library_problem_id": 37, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 36}}
{"id": 329, "code": "```python\na ** power\n```", "metadata": {"problem_id": 329, "library_problem_id": 38, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 38}}
{"id": 330, "code": "```python\nresult = np.power(a, power)\n```", "metadata": {"problem_id": 330, "library_problem_id": 39, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 38}}
{"id": 331, "code": "```python\nfrom fractions import Fraction\nresult = Fraction(numerator, denominator).limit_denominator()\n```", "metadata": {"problem_id": 331, "library_problem_id": 40, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 40}}
{"id": 332, "code": "```python\nfrom fractions import Fraction\ndef f(numerator=98, denominator=42):\n    frac = Fraction(numerator, denominator)\n    return (frac.numerator, frac.denominator)\n```", "metadata": {"problem_id": 332, "library_problem_id": 41, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 40}}
{"id": 333, "code": "```python\nfrom fractions import Fraction\nresult = (Fraction(numerator, denominator).numerator, Fraction(numerator, denominator).denominator)\n```", "metadata": {"problem_id": 333, "library_problem_id": 42, "library": "Numpy", "test_case_cnt": 4, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 40}}
{"id": 334, "code": "```python\nresult = (a + b + c) / 3\n```", "metadata": {"problem_id": 334, "library_problem_id": 43, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 43}}
{"id": 335, "code": "```python\nresult = np.maximum.reduce([a, b, c])\n```", "metadata": {"problem_id": 335, "library_problem_id": 44, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 43}}
{"id": 336, "code": "```python\nresult = np.diag(np.fliplr(a))\n```", "metadata": {"problem_id": 336, "library_problem_id": 45, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 45}}
{"id": 337, "code": "```python\nresult = np.diag(np.fliplr(a))\n```", "metadata": {"problem_id": 337, "library_problem_id": 46, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 45}}
{"id": 338, "code": "```python\nresult = np.diag(np.fliplr(a))\n```", "metadata": {"problem_id": 338, "library_problem_id": 47, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 45}}
{"id": 339, "code": "```python\nresult = np.diag(np.fliplr(a))\n```", "metadata": {"problem_id": 339, "library_problem_id": 48, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 45}}
{"id": 340, "code": "```python\nresult = X.flatten().tolist()\n```", "metadata": {"problem_id": 340, "library_problem_id": 49, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 49}}
{"id": 341, "code": "```python\nresult = X.flatten('C').tolist()\n```", "metadata": {"problem_id": 341, "library_problem_id": 50, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 49}}
{"id": 342, "code": "```python\nresult = [element for row in X for element in row]\n```", "metadata": {"problem_id": 342, "library_problem_id": 51, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 49}}
{"id": 343, "code": "```python\nresult = X.flatten(order='F').tolist()\n```", "metadata": {"problem_id": 343, "library_problem_id": 52, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 49}}
{"id": 344, "code": "```python\nresult = np.array(list(mystr))\n```", "metadata": {"problem_id": 344, "library_problem_id": 53, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 53}}
{"id": 345, "code": "```python\nresult = np.cumsum(a[:, col] * multiply_number)\n```", "metadata": {"problem_id": 345, "library_problem_id": 54, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 54}}
{"id": 346, "code": "```python\nresult = np.cumsum(a[row] * multiply_number)\n```", "metadata": {"problem_id": 346, "library_problem_id": 55, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 54}}
{"id": 347, "code": "```python\nresult = np.prod(a[row] / divide_number)\n```", "metadata": {"problem_id": 347, "library_problem_id": 56, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 54}}
{"id": 348, "code": "```python\nfrom scipy.linalg import qr\n\nq, r = qr(a, mode='reduced')\nresult = q[:, np.abs(np.diag(r)) > 1e-10]\n```", "metadata": {"problem_id": 348, "library_problem_id": 57, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 57}}
{"id": 349, "code": "```python\nresult = a.shape[1]\n```", "metadata": {"problem_id": 349, "library_problem_id": 58, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 58}}
{"id": 350, "code": "```python\nfrom scipy.stats import ttest_ind_from_stats\n\nmean_a, std_a, nobs_a = np.mean(a), np.std(a), len(a)\nmean_b, std_b, nobs_b = np.mean(b), np.std(b), len(b)\n\nt_stat, p_value = ttest_ind_from_stats(mean1=mean_a, std1=std_a, nobs1=nobs_a,\n                                        mean2=mean_b, std2=std_b, nobs2=nobs_b,\n                                        equal_var=False)\n```", "metadata": {"problem_id": 350, "library_problem_id": 59, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 59}}
{"id": 351, "code": "```python\np_value = scipy.stats.ttest_ind(a, b, equal_var=False, nan_policy='omit')\n```", "metadata": {"problem_id": 351, "library_problem_id": 60, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 59}}
{"id": 352, "code": "```python\nfrom scipy.stats import ttest_ind_from_stats\n\namean = -0.0896\navar = 0.954\nanobs = 40\nbmean = 0.719\nbvar = 11.87\nbnobs = 50\n\np_value = ttest_ind_from_stats(mean1=amean, std1=np.sqrt(avar), nobs1=anobs,\n                               mean2=bmean, std2=np.sqrt(bvar), nobs2=bnobs,\n                               equal_var=False).pvalue\n```", "metadata": {"problem_id": 352, "library_problem_id": 61, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 59}}
{"id": 353, "code": "```python\noutput = A[~np.any(np.all(A[:, None] == B, axis=2), axis=1)]\n```", "metadata": {"problem_id": 353, "library_problem_id": 62, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 62}}
{"id": 354, "code": "```python\noutput = np.vstack((np.setdiff1d(A, B, assume_unique=False), np.setdiff1d(B, A, assume_unique=False)))\n```", "metadata": {"problem_id": 354, "library_problem_id": 63, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Semantic", "perturbation_origin_id": 62}}
{"id": 355, "code": "```python\nc = np.take_along_axis(b, sort_indices, axis=0)\n```", "metadata": {"problem_id": 355, "library_problem_id": 64, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 64}}
{"id": 356, "code": "```python\nc = np.take_along_axis(b, sort_indices, axis=0)\n```", "metadata": {"problem_id": 356, "library_problem_id": 65, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 64}}
{"id": 357, "code": "```python\nsort_indices = np.argsort(-a, axis=0)\nc = np.take_along_axis(b, sort_indices, axis=0)\n```", "metadata": {"problem_id": 357, "library_problem_id": 66, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 64}}
{"id": 358, "code": "```python\nresult = b[np.argsort(a.sum(axis=(1, 2)))]\n```", "metadata": {"problem_id": 358, "library_problem_id": 67, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 64}}
{"id": 359, "code": "```python\narr[:, :2]\n```", "metadata": {"problem_id": 359, "library_problem_id": 68, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 68}}
{"id": 360, "code": "```python\na = np.delete(arr, 2, axis=0)\n```", "metadata": {"problem_id": 360, "library_problem_id": 69, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 68}}
{"id": 361, "code": "```python\na[:, [1, 3]]\n```", "metadata": {"problem_id": 361, "library_problem_id": 70, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 68}}
{"id": 362, "code": "```python\nresult = np.delete(arr, del_col-1, axis=1)\n```", "metadata": {"problem_id": 362, "library_problem_id": 71, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 68}}
{"id": 363, "code": "```python\na = np.insert(a, pos, element)\n```", "metadata": {"problem_id": 363, "library_problem_id": 72, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 72}}
{"id": 364, "code": "```python\na = np.insert(a, pos, element, axis=0)\n```", "metadata": {"problem_id": 364, "library_problem_id": 73, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 72}}
{"id": 365, "code": "```python\nreturn np.insert(a, pos, element)\n```", "metadata": {"problem_id": 365, "library_problem_id": 74, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 72}}
{"id": 366, "code": "```python\na = np.insert(a, pos, element, axis=0)\n```", "metadata": {"problem_id": 366, "library_problem_id": 75, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 72}}
{"id": 367, "code": "```python\nresult = np.array([arr.copy() for arr in array_of_arrays])\n```", "metadata": {"problem_id": 367, "library_problem_id": 76, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 76}}
{"id": 368, "code": "```python\nnp.all(a == a[0])\n```", "metadata": {"problem_id": 368, "library_problem_id": 77, "library": "Numpy", "test_case_cnt": 5, "perturbation_type": "Origin", "perturbation_origin_id": 77}}
{"id": 369, "code": "```python\nnp.all(a[:, 1:] == a[:, :1])\n```", "metadata": {"problem_id": 369, "library_problem_id": 78, "library": "Numpy", "test_case_cnt": 5, "perturbation_type": "Semantic", "perturbation_origin_id": 77}}
{"id": 370, "code": "```python\nnp.all(a == a[0])\n```", "metadata": {"problem_id": 370, "library_problem_id": 79, "library": "Numpy", "test_case_cnt": 5, "perturbation_type": "Surface", "perturbation_origin_id": 77}}
{"id": 371, "code": "```python\nfrom scipy.integrate import simps\nimport numpy as np\n\nx = np.linspace(0, 1, 20)\ny = np.linspace(0, 1, 30)\nX, Y = np.meshgrid(x, y)\nZ = np.cos(X)**4 + np.sin(Y)**2\n\ndx = x[1] - x[0]\ndy = y[1] - y[0]\n\nintegral = simps(simps(Z, dx=dx), dx=dy)\nresult = integral\n```", "metadata": {"problem_id": 371, "library_problem_id": 80, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 80}}
{"id": 372, "code": "```python\nresult = np.sum(weights * ((np.cos(example_x)**4 + np.sin(example_y)**2)))\n```", "metadata": {"problem_id": 372, "library_problem_id": 81, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 80}}
{"id": 373, "code": "```python\nimport numpy as np\ndef ecdf(x):\n    # sort the input array\n    sorted_x = np.sort(x)\n    # calculate ECDF values\n    ecdf_values = np.arange(1, len(sorted_x) + 1) / len(sorted_x)\n    return sorted_x, ecdf_values\n\ngrades = np.array((93.5,93,60.8,94.5,82,87.5,91.5,99.5,86,93.5,92.5,78,76,69,94.5,\n          89.5,92.8,78,65.5,98,98.5,92.3,95.5,76,91,95,61))\n\nsorted_grades, ecdf_values = ecdf(grades)\nresult = ecdf_values[np.searchsorted(sorted_grades, grades)]\n```", "metadata": {"problem_id": 373, "library_problem_id": 82, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 82}}
{"id": 374, "code": "```python\nimport numpy as np\ndef ecdf(x):\n    # normalize X to sum to 1\n    x = x / np.sum(x)\n    return np.cumsum(x)\n\ngrades = np.array((93.5,93,60.8,94.5,82,87.5,91.5,99.5,86,93.5,92.5,78,76,69,94.5,\n          89.5,92.8,78,65.5,98,98.5,92.3,95.5,76,91,95,61))\neval = np.array([88, 87, 62])\n\necdf_func = ecdf(grades)\nresult = ecdf_func[np.searchsorted(grades, eval)]\n```", "metadata": {"problem_id": 374, "library_problem_id": 83, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 82}}
{"id": 375, "code": "```python\nimport numpy as np\n\ndef ecdf(x):\n    # normalize X to sum to 1\n    x = x / np.sum(x)\n    return np.cumsum(x)\n\ngrades = np.array((93.5,93,60.8,94.5,82,87.5,91.5,99.5,86,93.5,92.5,78,76,69,94.5,\n          89.5,92.8,78,65.5,98,98.5,92.3,95.5,76,91,95,61))\nthreshold = 0.5\n\necdf_values = ecdf(grades)\nindices = np.where(ecdf_values < threshold)[0]\n\nif indices.size > 0:\n    low = grades[indices[-1]]\n    high = grades[indices[-1] + 1] if indices[-1] + 1 < len(grades) else grades[-1]\nelse:\n    low = grades[0]\n    high = grades[0]\n\nprint(f\"Low: {low}, High: {high}\")\n```", "metadata": {"problem_id": 375, "library_problem_id": 84, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 82}}
{"id": 376, "code": "```python\nones_count = int(size * one_ratio)\nzeros_count = size - ones_count\nrandomLabel = np.concatenate((np.ones(ones_count), np.zeros(zeros_count)))\nnp.random.shuffle(randomLabel)\n```", "metadata": {"problem_id": 376, "library_problem_id": 85, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 85}}
{"id": 377, "code": "```python\na_np = a.numpy()\n```", "metadata": {"problem_id": 377, "library_problem_id": 86, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 86}}
{"id": 378, "code": "```python\na_pt = torch.from_numpy(a)\n```", "metadata": {"problem_id": 378, "library_problem_id": 87, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 86}}
{"id": 379, "code": "```python\na_np = a.numpy()\n```", "metadata": {"problem_id": 379, "library_problem_id": 88, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 88}}
{"id": 380, "code": "```python\na_tf = tf.convert_to_tensor(a)\n```", "metadata": {"problem_id": 380, "library_problem_id": 89, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 88}}
{"id": 381, "code": "```python\nresult = np.argsort(a)[::-1].tolist()\n```", "metadata": {"problem_id": 381, "library_problem_id": 90, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 90}}
{"id": 382, "code": "```python\nindices_sorted = np.argsort(a)\nresult = indices_sorted.tolist()\n```", "metadata": {"problem_id": 382, "library_problem_id": 91, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 90}}
{"id": 383, "code": "```python\nindices = np.argsort(a)[-N:][::-1]\nresult = indices.tolist()\n```", "metadata": {"problem_id": 383, "library_problem_id": 92, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 90}}
{"id": 384, "code": "```python\nnp.linalg.matrix_power(A, n)\n```", "metadata": {"problem_id": 384, "library_problem_id": 93, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 93}}
{"id": 385, "code": "```python\nresult = a.reshape(2, 2, 2, 2).swapaxes(1, 2)\n```", "metadata": {"problem_id": 385, "library_problem_id": 94, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 94}}
{"id": 386, "code": "```python\nresult = np.lib.stride_tricks.as_strided(a, shape=(a.shape[0]-1, a.shape[1]-1, 2, 2), strides=a.strides + a.strides)\n```", "metadata": {"problem_id": 386, "library_problem_id": 95, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 94}}
{"id": 387, "code": "```python\nresult = a.reshape(2, 2, 2, 2).swapaxes(1, 2)\n```", "metadata": {"problem_id": 387, "library_problem_id": 96, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 94}}
{"id": 388, "code": "```python\nresult = a.reshape(a.shape[0]//patch_size, patch_size, a.shape[1]//patch_size, patch_size).swapaxes(1,2).reshape(-1, patch_size, patch_size)\n```", "metadata": {"problem_id": 388, "library_problem_id": 97, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 94}}
{"id": 389, "code": "```python\nresult = a.reshape(h, w)\n```", "metadata": {"problem_id": 389, "library_problem_id": 98, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 94}}
{"id": 390, "code": "```python\nresult = a.reshape(a.shape[0]//patch_size, patch_size, a.shape[1]//patch_size, patch_size).swapaxes(1,2).reshape(-1, patch_size, patch_size)\n```", "metadata": {"problem_id": 390, "library_problem_id": 99, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 94}}
{"id": 391, "code": "```python\nresult = a[:, low:high]\n```", "metadata": {"problem_id": 391, "library_problem_id": 100, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 100}}
{"id": 392, "code": "```python\nresult = a[low:high+1]\n```", "metadata": {"problem_id": 392, "library_problem_id": 101, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 100}}
{"id": 393, "code": "```python\nresult = a[:, low:min(high, a.shape[1])]\n```", "metadata": {"problem_id": 393, "library_problem_id": 102, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 100}}
{"id": 394, "code": "```python\na = np.fromstring(string, dtype=float, sep=' ')\na = a.reshape(-1, 2)\n```", "metadata": {"problem_id": 394, "library_problem_id": 103, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 103}}
{"id": 395, "code": "```python\nnp.logspace(np.log(min)/np.log(base), np.log(max)/np.log(base), n, base=base)\n```", "metadata": {"problem_id": 395, "library_problem_id": 104, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 104}}
{"id": 396, "code": "```python\nresult = np.exp(np.random.uniform(np.log(min), np.log(max), n))\n```", "metadata": {"problem_id": 396, "library_problem_id": 105, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 104}}
{"id": 397, "code": "```python\nresult = np.power(max / min, np.random.uniform(0, 1, n)) * min\n```", "metadata": {"problem_id": 397, "library_problem_id": 106, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 104}}
{"id": 398, "code": "```python\nB = pd.Series(index=A.index)\nB[0] = a * A[0]\nfor t in range(1, len(A)):\n    B[t] = a * A[t] + b * B[t-1]\n```", "metadata": {"problem_id": 398, "library_problem_id": 107, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 107}}
{"id": 399, "code": "```python\nB = pd.Series(index=A.index)\nB[0] = a * A[0]\nB[1] = a * A[1] + b * B[0]\nfor t in range(2, len(A)):\n    B[t] = a * A[t] + b * B[t-1] + c * B[t-2]\n```", "metadata": {"problem_id": 399, "library_problem_id": 108, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 107}}
{"id": 400, "code": "```python\nresult = np.array([])\n```", "metadata": {"problem_id": 400, "library_problem_id": 109, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 109}}
{"id": 401, "code": "```python\nresult = np.empty((3,0))\n```", "metadata": {"problem_id": 401, "library_problem_id": 110, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 109}}
{"id": 402, "code": "```python\nresult = np.ravel_multi_index(index, dims)\n```", "metadata": {"problem_id": 402, "library_problem_id": 111, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 111}}
{"id": 403, "code": "```python\nresult = np.ravel_multi_index(index, dims)\n```", "metadata": {"problem_id": 403, "library_problem_id": 112, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 111}}
{"id": 404, "code": "```python\ndf = pd.DataFrame({\n    'a': np.zeros(2, dtype=int),\n    'b': np.zeros(2, dtype=float),\n    'c': np.zeros(2, dtype=float)\n}, index=index)\n```", "metadata": {"problem_id": 404, "library_problem_id": 113, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 113}}
{"id": 405, "code": "```python\nresult = np.bincount(accmap, weights=a)\n```", "metadata": {"problem_id": 405, "library_problem_id": 114, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 114}}
{"id": 406, "code": "```python\nresult = np.maximum.reduceat(a, np.unique(index, return_index=True)[1][:-1])\n```", "metadata": {"problem_id": 406, "library_problem_id": 115, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 114}}
{"id": 407, "code": "```python\nnp.bincount(accmap + len(accmap), weights=a)\n```", "metadata": {"problem_id": 407, "library_problem_id": 116, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 114}}
{"id": 408, "code": "```python\nresult = np.array([a[index == i].min() for i in range(max(index) + 1)])\n```", "metadata": {"problem_id": 408, "library_problem_id": 117, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 114}}
{"id": 409, "code": "```python\nz = np.array([[elementwise_function(x[i][j], y[i][j]) for j in range(len(x[i]))] for i in range(len(x))])\n```", "metadata": {"problem_id": 409, "library_problem_id": 118, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 118}}
{"id": 410, "code": "```python\nresult = np.random.choice(range(len(lista_elegir)), samples, p=probabilit)\nselected_tuples = [lista_elegir[i] for i in result]\n```", "metadata": {"problem_id": 410, "library_problem_id": 119, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 119}}
{"id": 411, "code": "```python\nresult = np.pad(a, ((0, max(0, -low_index)), (0, max(0, -high_index))), mode='constant', constant_values=0)\n```", "metadata": {"problem_id": 411, "library_problem_id": 120, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 120}}
{"id": 412, "code": "```python\nresult = x[x >= 0]\n```", "metadata": {"problem_id": 412, "library_problem_id": 121, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 121}}
{"id": 413, "code": "```python\nresult = x[np.iscomplex(x)]\n```", "metadata": {"problem_id": 413, "library_problem_id": 122, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 121}}
{"id": 414, "code": "```python\nbin_data_mean = np.mean(data.reshape(-1, bin_size), axis=1)\n```", "metadata": {"problem_id": 414, "library_problem_id": 123, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 123}}
{"id": 415, "code": "```python\nbin_data_max = np.max(data.reshape(-1, bin_size), axis=1)\n```", "metadata": {"problem_id": 415, "library_problem_id": 124, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 123}}
{"id": 416, "code": "```python\nbin_data_mean = np.mean(data.reshape(data.shape[0], -1, bin_size)[:, :, :bin_size].reshape(data.shape[0], -1), axis=1).reshape(-1, 1)\n```", "metadata": {"problem_id": 416, "library_problem_id": 125, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 123}}
{"id": 417, "code": "```python\nimport numpy as np\n\ndata = np.array([4, 2, 5, 6, 7, 5, 4, 3, 5, 7])\nbin_size = 3\n\n# Reverse the array to start binning from the end\nreversed_data = data[::-1]\n\n# Calculate the number of bins\nnum_bins = len(reversed_data) // bin_size\n\n# Bin the data\nbinned_data = reversed_data[:num_bins*bin_size].reshape(-1, bin_size)\n\n# Calculate the mean of each bin\nbin_data_mean = binned_data.mean(axis=1)\n\n# Reverse the means back to the original order\nbin_data_mean = bin_data_mean[::-1]\n```", "metadata": {"problem_id": 417, "library_problem_id": 126, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 123}}
{"id": 418, "code": "```python\nimport numpy as np\n\n# Reverse the array along the first axis\nreversed_data = np.flip(data, axis=1)\n\n# Calculate the number of bins\nnum_bins = reversed_data.shape[1] // bin_size\n\n# Reshape the array to create bins and calculate the mean\nbin_data_mean = np.mean(reversed_data[:, :num_bins*bin_size].reshape(-1, bin_size), axis=1).reshape(data.shape[0], -1)\n\n# Reverse the array back to its original order\nbin_data_mean = np.fliplr(bin_data_mean)\n```", "metadata": {"problem_id": 418, "library_problem_id": 127, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 123}}
{"id": 419, "code": "```python\nimport numpy as np\n\n# Assuming data and bin_size are already defined\nnum_rows, num_cols = data.shape\naligned_data = data[:, -num_cols % bin_size:]\nbin_data = aligned_data.reshape(num_rows, -1, bin_size).mean(axis=2)\nbin_data_mean = bin_data\n```", "metadata": {"problem_id": 419, "library_problem_id": 128, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 123}}
{"id": 420, "code": "```python\ndef smoothclamp(x, min_val, max_val):\n    if x <= min_val:\n        return min_val\n    elif x >= max_val:\n        return max_val\n    else:\n        t = (x - min_val) / (max_val - min_val)\n        return (3 * t**2 - 2 * t**3) * (max_val - min_val) + min_val\n```", "metadata": {"problem_id": 420, "library_problem_id": 129, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 129}}
{"id": 421, "code": "```python\ndef smoothclamp(x, min_val, max_val, N):\n    t = np.clip((x - min_val) / (max_val - min_val), 0, 1)\n    result = 0\n    for n in range(N + 1):\n        binomial_coefficient = np.math.comb(N + n, n) * np.math.comb(N + n, n)\n        term = (-t)**(n + 1) * (1 - t)**n * binomial_coefficient\n        result += term\n    return result * (max_val - min_val) + min_val\n```", "metadata": {"problem_id": 421, "library_problem_id": 130, "library": "Numpy", "test_case_cnt": 4, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 129}}
{"id": 422, "code": "```python\nfrom scipy.signal import correlate\n\n# Perform circular cross-correlation\nresult = correlate(a, np.concatenate((b[-1:], b[:-1])), mode='same')\n```", "metadata": {"problem_id": 422, "library_problem_id": 131, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 131}}
{"id": 423, "code": "```python\nresult = df.values.reshape((4, 15, 5))\n```", "metadata": {"problem_id": 423, "library_problem_id": 132, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 132}}
{"id": 424, "code": "```python\nresult = df.to_numpy().reshape((15, 4, 5))\n```", "metadata": {"problem_id": 424, "library_problem_id": 133, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 132}}
{"id": 425, "code": "```python\nresult = np.unpackbits(a[:, None] >> np.arange(m)[::-1]).astype(int)\n```", "metadata": {"problem_id": 425, "library_problem_id": 134, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 134}}
{"id": 426, "code": "```python\nresult = np.packbits((a[:, None] >> np.arange(m)[::-1]) & 1, axis=1).astype(int)\n```", "metadata": {"problem_id": 426, "library_problem_id": 135, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 134}}
{"id": 427, "code": "```python\nresult = np.bitwise_xor.reduce(np.unpackbits(a[:, None].astype(np.uint8), axis=1)[:,:m])\n```", "metadata": {"problem_id": 427, "library_problem_id": 136, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 134}}
{"id": 428, "code": "```python\nmean = np.mean(a)\nstd_dev = np.std(a)\nresult = (mean - 3 * std_dev, mean + 3 * std_dev)\n```", "metadata": {"problem_id": 428, "library_problem_id": 137, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 137}}
{"id": 429, "code": "```python\nmean = np.mean(a)\nstd_dev = np.std(a)\nresult = (mean - 2 * std_dev, mean + 2 * std_dev)\n```", "metadata": {"problem_id": 429, "library_problem_id": 138, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 137}}
{"id": 430, "code": "```python\nmu = np.mean(a)\nsigma = np.std(a)\nresult = (mu - 3*sigma, mu + 3*sigma)\nreturn result\n```", "metadata": {"problem_id": 430, "library_problem_id": 139, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 137}}
{"id": 431, "code": "```python\nmean = np.mean(a)\nstd_dev = np.std(a)\nlower_bound = mean - 2 * std_dev\nupper_bound = mean + 2 * std_dev\nresult = (a < lower_bound) | (a > upper_bound)\n```", "metadata": {"problem_id": 431, "library_problem_id": 140, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 137}}
{"id": 432, "code": "```python\nprob = np.ma.percentile(masked_data.compressed(), percentile)\n```", "metadata": {"problem_id": 432, "library_problem_id": 141, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 141}}
{"id": 433, "code": "```python\na[zero_rows] = 0\na[:, zero_cols] = 0\n```", "metadata": {"problem_id": 433, "library_problem_id": 142, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 142}}
{"id": 434, "code": "```python\na[zero_rows, :] = 0\na[:, zero_cols] = 0\n```", "metadata": {"problem_id": 434, "library_problem_id": 143, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 142}}
{"id": 435, "code": "```python\na[1,:] = 0\na[:,0] = 0\n```", "metadata": {"problem_id": 435, "library_problem_id": 144, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 142}}
{"id": 436, "code": "```python\nmask = (a == np.max(a, axis=1, keepdims=True))\n```", "metadata": {"problem_id": 436, "library_problem_id": 145, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 145}}
{"id": 437, "code": "```python\nmask = a == np.min(a, axis=1, keepdims=True)\n```", "metadata": {"problem_id": 437, "library_problem_id": 146, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 145}}
{"id": 438, "code": "```python\nresult = np.corrcoef(post, distance)[0, 1]\n```", "metadata": {"problem_id": 438, "library_problem_id": 147, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 147}}
{"id": 439, "code": "```python\nnp.einsum('ij,jk->ikj', X, X)\n```", "metadata": {"problem_id": 439, "library_problem_id": 148, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 148}}
{"id": 440, "code": "```python\nX = np.sqrt(Y.diagonal(axis=1, offset=0))\n```", "metadata": {"problem_id": 440, "library_problem_id": 149, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 148}}
{"id": 441, "code": "```python\nis_contained = number in a\n```", "metadata": {"problem_id": 441, "library_problem_id": 150, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 150}}
{"id": 442, "code": "```python\nC = np.setdiff1d(A, B)\n```", "metadata": {"problem_id": 442, "library_problem_id": 151, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 151}}
{"id": 443, "code": "```python\nC = A[np.isin(A, B)]\n```", "metadata": {"problem_id": 443, "library_problem_id": 152, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 151}}
{"id": 444, "code": "```python\nC = A[(A >= B.min()) & (A <= B.max())]\n```", "metadata": {"problem_id": 444, "library_problem_id": 153, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 151}}
{"id": 445, "code": "```python\nresult = rankdata(a, method='max').astype(int)[::-1]\n```", "metadata": {"problem_id": 445, "library_problem_id": 154, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 154}}
{"id": 446, "code": "```python\nresult = (-rankdata(a) + len(a)).astype(int)\n```", "metadata": {"problem_id": 446, "library_problem_id": 155, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 154}}
{"id": 447, "code": "```python\nreturn rankdata(a, method='max').astype(int)[::-1]\n```", "metadata": {"problem_id": 447, "library_problem_id": 156, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 154}}
{"id": 448, "code": "```python\nnp.dstack((x_dists, y_dists))\n```", "metadata": {"problem_id": 448, "library_problem_id": 157, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 157}}
{"id": 449, "code": "```python\nnp.dstack((x_dists, y_dists))\n```", "metadata": {"problem_id": 449, "library_problem_id": 158, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 157}}
{"id": 450, "code": "```python\nresult = A[:, second][:, :, third]\n```", "metadata": {"problem_id": 450, "library_problem_id": 159, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 159}}
{"id": 451, "code": "```python\narr = np.zeros((20, 10, 10, 2))\n```", "metadata": {"problem_id": 451, "library_problem_id": 160, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 160}}
{"id": 452, "code": "```python\nresult = X / x.reshape(-1, 1)\n```", "metadata": {"problem_id": 452, "library_problem_id": 161, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 161}}
{"id": 453, "code": "```python\nresult = X / x[:, np.newaxis]\n```", "metadata": {"problem_id": 453, "library_problem_id": 162, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 161}}
{"id": 454, "code": "```python\nresult = X / x[:, np.newaxis]\n```", "metadata": {"problem_id": 454, "library_problem_id": 163, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 161}}
{"id": 455, "code": "```python\nresult = df[df['a'].astype(str).str.contains(target)]\n```", "metadata": {"problem_id": 455, "library_problem_id": 164, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 164}}
{"id": 456, "code": "```python\nfrom scipy.spatial.distance import pdist, squareform\n\nresult = squareform(pdist(a))\n```", "metadata": {"problem_id": 456, "library_problem_id": 165, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 165}}
{"id": 457, "code": "```python\nfrom scipy.spatial.distance import pdist, squareform\n\nresult = squareform(pdist(a))\n```", "metadata": {"problem_id": 457, "library_problem_id": 166, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 165}}
{"id": 458, "code": "```python\nfrom scipy.spatial.distance import pdist, squareform\n\nresult = squareform(pdist(a))\n```", "metadata": {"problem_id": 458, "library_problem_id": 167, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 165}}
{"id": 459, "code": "```python\nAVG = np.mean(np.float64(NA))\n```", "metadata": {"problem_id": 459, "library_problem_id": 168, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 168}}
{"id": 460, "code": "```python\nAVG = np.nanmean(NA, axis=0)\n```", "metadata": {"problem_id": 460, "library_problem_id": 169, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 168}}
{"id": 461, "code": "```python\nNA = np.array(A, dtype=float)\nAVG = np.mean(NA, axis=0)\n```", "metadata": {"problem_id": 461, "library_problem_id": 170, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 168}}
{"id": 462, "code": "```python\nresult = np.diff(np.nonzero(a)[0])[np.diff(np.nonzero(a)[0]) != 0]\n```", "metadata": {"problem_id": 462, "library_problem_id": 171, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 171}}
{"id": 463, "code": "```python\nresult = a[~np.diff(a.flatten()) == 0 & (a.flatten() != 0)].reshape(-1, 1)\n```", "metadata": {"problem_id": 463, "library_problem_id": 172, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 171}}
{"id": 464, "code": "```python\ndf = pd.DataFrame({'lat': lat.flatten(), 'lon': lon.flatten(), 'val': val.flatten()})\n```", "metadata": {"problem_id": 464, "library_problem_id": 173, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 173}}
{"id": 465, "code": "```python\nnp.vstack((lat.flatten(), lon.flatten(), val.flatten())).T\n```", "metadata": {"problem_id": 465, "library_problem_id": 174, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 173}}
{"id": 466, "code": "```python\ndf = pd.DataFrame({'lat': lat.flatten(), 'lon': lon.flatten(), 'val': val.flatten()})\ndf['maximum'] = df.max(axis=1)\n```", "metadata": {"problem_id": 466, "library_problem_id": 175, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 173}}
{"id": 467, "code": "```python\nresult = []\nfor i in range(a.shape[0]):\n    for j in range(a.shape[1]):\n        top = max(i - size[0] // 2, 0)\n        bottom = min(i + size[0] // 2 + 1, a.shape[0])\n        left = max(j - size[1] // 2, 0)\n        right = min(j + size[1] // 2 + 1, a.shape[1])\n        result.append(a[top:bottom, left:right])\n```", "metadata": {"problem_id": 467, "library_problem_id": 176, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 176}}
{"id": 468, "code": "```python\nresult = []\nfor i in range(a.shape[0]):\n    for j in range(a.shape[1]):\n        top = max(i-1, 0)\n        bottom = min(i+2, a.shape[0])\n        left = max(j-1, 0)\n        right = min(j+2, a.shape[1])\n        result.append(a[top:bottom, left:right])\n```", "metadata": {"problem_id": 468, "library_problem_id": 177, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 176}}
{"id": 469, "code": "```python\nresult = np.nanmean(a)\n```", "metadata": {"problem_id": 469, "library_problem_id": 178, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 178}}
{"id": 470, "code": "```python\nnp.nanmean(a)\n```", "metadata": {"problem_id": 470, "library_problem_id": 179, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 178}}
{"id": 471, "code": "```python\nZ[..., -1:]\n```", "metadata": {"problem_id": 471, "library_problem_id": 180, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 180}}
{"id": 472, "code": "```python\na[:-1]\n```", "metadata": {"problem_id": 472, "library_problem_id": 181, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 180}}
{"id": 473, "code": "```python\nresult = any(np.array_equal(c, cnt) for cnt in CNTS)\n```", "metadata": {"problem_id": 473, "library_problem_id": 182, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 182}}
{"id": 474, "code": "```python\nresult = any(np.array_equal(c, cnt) for cnt in CNTS)\n```", "metadata": {"problem_id": 474, "library_problem_id": 183, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 182}}
{"id": 475, "code": "```python\nf = intp.interp2d(np.arange(4), np.arange(4), a, kind='linear')\nresult = f(x_new, y_new)\n```", "metadata": {"problem_id": 475, "library_problem_id": 184, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 184}}
{"id": 476, "code": "```python\ndf['Q_cum'] = df.groupby('D')['Q'].cumsum()\n```", "metadata": {"problem_id": 476, "library_problem_id": 185, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 185}}
{"id": 477, "code": "```python\ni = np.diag(i)\n```", "metadata": {"problem_id": 477, "library_problem_id": 186, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 186}}
{"id": 478, "code": "```python\nnp.fill_diagonal(a, np.diag(a))\n```", "metadata": {"problem_id": 478, "library_problem_id": 187, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 187}}
{"id": 479, "code": "```python\nresult = pd.date_range(start=start, end=end, periods=n)\n```", "metadata": {"problem_id": 479, "library_problem_id": 188, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 188}}
{"id": 480, "code": "```python\nresult = np.where((x == a) & (y == b))[0][0] if np.any((x == a) & (y == b)) else -1\n```", "metadata": {"problem_id": 480, "library_problem_id": 189, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 189}}
{"id": 481, "code": "```python\nindices = np.where((x == a) & (y == b))[0]\n```", "metadata": {"problem_id": 481, "library_problem_id": 190, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Semantic", "perturbation_origin_id": 189}}
{"id": 482, "code": "```python\ncoefficients = np.polyfit(x, y, 2)\nresult = coefficients[::-1]\n```", "metadata": {"problem_id": 482, "library_problem_id": 191, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 191}}
{"id": 483, "code": "```python\ncoefficients = np.polyfit(x, y, degree)\nresult = coefficients[::-1]\n```", "metadata": {"problem_id": 483, "library_problem_id": 192, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 191}}
{"id": 484, "code": "```python\ndf.apply(lambda x: x - temp_arr[x.name], axis=1)\n```", "metadata": {"problem_id": 484, "library_problem_id": 193, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 193}}
{"id": 485, "code": "```python\nnp.einsum('ij,kjl->kil', B, A)\n```", "metadata": {"problem_id": 485, "library_problem_id": 194, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 194}}
{"id": 486, "code": "```python\nresult = MinMaxScaler().fit_transform(a.reshape(-1, 1)).reshape(a.shape)\n```", "metadata": {"problem_id": 486, "library_problem_id": 195, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 195}}
{"id": 487, "code": "```python\nresult = MinMaxScaler().fit_transform(arr)\n```", "metadata": {"problem_id": 487, "library_problem_id": 196, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 195}}
{"id": 488, "code": "```python\nscaler = MinMaxScaler()\nresult = scaler.fit_transform(a.reshape(-1, a.shape[-1])).reshape(a.shape)\n```", "metadata": {"problem_id": 488, "library_problem_id": 197, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 195}}
{"id": 489, "code": "```python\narr[(arr < -10)] = 0\narr[(arr >= 15)] = 30\narr[(arr > -10) & (arr < 15)] += 5\n```", "metadata": {"problem_id": 489, "library_problem_id": 198, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 198}}
{"id": 490, "code": "```python\nfor i in range(arr.shape[0]):\n    mask = (arr[i] < n1[i]) & (arr[i] >= n2[i])\n    arr[i][mask] = 30\n    mask = arr[i] < n1[i]\n    arr[i][mask] = 0\n    mask = ~mask & ~mask3[i]\n    arr[i][mask] += 5\n```", "metadata": {"problem_id": 490, "library_problem_id": 199, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 198}}
{"id": 491, "code": "```python\nresult = np.isclose(s1, s2).sum() - np.isclose(s1, s2, atol=1e-10).sum()\n```", "metadata": {"problem_id": 491, "library_problem_id": 200, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 200}}
{"id": 492, "code": "```python\nresult = np.sum(np.abs(s1 - s2) > 1e-10)\n```", "metadata": {"problem_id": 492, "library_problem_id": 201, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 200}}
{"id": 493, "code": "```python\nall(np.array_equal(a[0], arr) for arr in a[1:])\n```", "metadata": {"problem_id": 493, "library_problem_id": 202, "library": "Numpy", "test_case_cnt": 5, "perturbation_type": "Origin", "perturbation_origin_id": 202}}
{"id": 494, "code": "```python\nall_nan = all(np.isnan(arr).all() for arr in a)\n```", "metadata": {"problem_id": 494, "library_problem_id": 203, "library": "Numpy", "test_case_cnt": 5, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 202}}
{"id": 495, "code": "```python\nresult = np.pad(a, ((0, shape[0] - a.shape[0]), (0, shape[1] - a.shape[1])), mode='constant', constant_values=0)\n```", "metadata": {"problem_id": 495, "library_problem_id": 204, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 204}}
{"id": 496, "code": "```python\nresult = np.pad(a, ((0, shape[0]-a.shape[0]), (0, shape[1]-a.shape[1])), mode='constant', constant_values=0)\n```", "metadata": {"problem_id": 496, "library_problem_id": 205, "library": "Numpy", "test_case_cnt": 4, "perturbation_type": "Surface", "perturbation_origin_id": 204}}
{"id": 497, "code": "```python\nresult = np.pad(a, ((0, shape[0]-a.shape[0]), (0, shape[1]-a.shape[1])), 'constant', constant_values=(element,))\n```", "metadata": {"problem_id": 497, "library_problem_id": 206, "library": "Numpy", "test_case_cnt": 4, "perturbation_type": "Semantic", "perturbation_origin_id": 204}}
{"id": 498, "code": "```python\nresult = np.pad(arr, ((0, 52), (0, 0)), 'constant', constant_values=0)\n```", "metadata": {"problem_id": 498, "library_problem_id": 207, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 204}}
{"id": 499, "code": "```python\nresult = np.pad(a, ((26, 26), (0, 1)), mode='constant', constant_values=0)\n```", "metadata": {"problem_id": 499, "library_problem_id": 208, "library": "Numpy", "test_case_cnt": 4, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 204}}
{"id": 500, "code": "```python\na.reshape(int(a.shape[0]/3), 3)\n```", "metadata": {"problem_id": 500, "library_problem_id": 209, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 209}}
{"id": 501, "code": "```python\nresult = a[np.arange(a.shape[0])[:, None], np.arange(a.shape[1]), b]\n```", "metadata": {"problem_id": 501, "library_problem_id": 210, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 210}}
{"id": 502, "code": "```python\nresult = a[np.arange(a.shape[0])[:, None], np.arange(a.shape[1]), b]\n```", "metadata": {"problem_id": 502, "library_problem_id": 211, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 210}}
{"id": 503, "code": "```python\nresult = np.take_along_axis(a, b[:, :, None], axis=2).squeeze()\n```", "metadata": {"problem_id": 503, "library_problem_id": 212, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 210}}
{"id": 504, "code": "```python\nresult = np.sum(a[np.arange(a.shape[0])[:, None], np.arange(a.shape[1]), b])\n```", "metadata": {"problem_id": 504, "library_problem_id": 213, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 210}}
{"id": 505, "code": "```python\nresult = a[np.arange(a.shape[0])[:, None], np.arange(a.shape[1]), b].sum()\n```", "metadata": {"problem_id": 505, "library_problem_id": 214, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 210}}
{"id": 506, "code": "```python\nresult = np.where((df['a'] > 1) & (df['a'] <= 4), df['b'], np.nan)\n```", "metadata": {"problem_id": 506, "library_problem_id": 215, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 215}}
{"id": 507, "code": "```python\nresult = im[1:-1, 1:-1]\n```", "metadata": {"problem_id": 507, "library_problem_id": 216, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 216}}
{"id": 508, "code": "```python\nrows = np.any(A != 0, axis=1)\ncols = np.any(A != 0, axis=0)\n\nresult = A[rows][:, cols]\n```", "metadata": {"problem_id": 508, "library_problem_id": 217, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 216}}
{"id": 509, "code": "```python\nresult = im[(im != 0).cumsum(axis=1) > 0].T[(im != 0).cumsum(axis=0) > 0].T\n```", "metadata": {"problem_id": 509, "library_problem_id": 218, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 216}}
{"id": 510, "code": "```python\nresult = im[(im != 0).any(axis=1)[:, None] & (im != 0).any(axis=0)]\n```", "metadata": {"problem_id": 510, "library_problem_id": 219, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 216}}
{"id": 511, "code": "```python\nplt.plot(x, y, label=\"x-y\")\nplt.legend()\nplt.show()\n```", "metadata": {"problem_id": 511, "library_problem_id": 0, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 512, "code": "```python\nplt.minorticks_on()\nplt.tick_params(axis='y', which='minor', bottom=False)\nplt.show()\n```", "metadata": {"problem_id": 512, "library_problem_id": 1, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 1}}
{"id": 513, "code": "```python\nplt.minorticks_on()\n```", "metadata": {"problem_id": 513, "library_problem_id": 2, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 1}}
{"id": 514, "code": "```python\nplt.minorticks_on()\nplt.tick_params(axis='x', which='minor', bottom=True)\n```", "metadata": {"problem_id": 514, "library_problem_id": 3, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 1}}
{"id": 515, "code": "```python\nplt.plot(x, np.random.rand(10), linestyle='solid')\nplt.plot(x, np.random.rand(10), linestyle='--')\nplt.plot(x, np.random.rand(10), linestyle='-.')\nplt.plot(x, np.random.rand(10)**2, linestyle=':')\n```", "metadata": {"problem_id": 515, "library_problem_id": 4, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 4}}
{"id": 516, "code": "```python\nplt.plot(x, np.random.rand(10), linestyle='solid')\nplt.plot(x, np.random.rand(10), linestyle='--')\nplt.plot(x, np.random.rand(10), linestyle='-.')\nplt.plot(x, np.random.rand(10), linestyle=':')\nplt.show()\n```", "metadata": {"problem_id": 516, "library_problem_id": 5, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 4}}
{"id": 517, "code": "```python\nplt.plot(x, y, 'd-', linewidth=0.5)\nplt.show()\n```", "metadata": {"problem_id": 517, "library_problem_id": 6, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 4}}
{"id": 518, "code": "```python\nplt.plot(x, y, 'd-', lw=4)\nplt.show()\n```", "metadata": {"problem_id": 518, "library_problem_id": 7, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 4}}
{"id": 519, "code": "```python\nax.set_ylim(0, 40)\nplt.show(ax)\n```", "metadata": {"problem_id": 519, "library_problem_id": 8, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 8}}
{"id": 520, "code": "```python\nplt.axvspan(2, 4, color='red', alpha=0.5)\nplt.show()\n```", "metadata": {"problem_id": 520, "library_problem_id": 9, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 9}}
{"id": 521, "code": "```python\nplt.plot([0, 1], [0, 2])\n```", "metadata": {"problem_id": 521, "library_problem_id": 10, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 10}}
{"id": 522, "code": "```python\nplt.plot([0, 1], [0, 2])\n```", "metadata": {"problem_id": 522, "library_problem_id": 11, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 10}}
{"id": 523, "code": "```python\nsns.relplot(x=\"Height (cm)\", y=\"Weight (kg)\", hue=\"Gender\", data=df)\nplt.show()\n```", "metadata": {"problem_id": 523, "library_problem_id": 12, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 12}}
{"id": 524, "code": "```python\nsns.lineplot(x=x, y=y)\nplt.show()\n```", "metadata": {"problem_id": 524, "library_problem_id": 13, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 13}}
{"id": 525, "code": "```python\nsns.lineplot(x=x, y=y)\nplt.show()\n```", "metadata": {"problem_id": 525, "library_problem_id": 14, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 13}}
{"id": 526, "code": "```python\nplt.plot(x, y, 'o-', linewidth=7)\n```", "metadata": {"problem_id": 526, "library_problem_id": 15, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 15}}
{"id": 527, "code": "```python\nplt.legend(fontsize=20)\nplt.show()\n```", "metadata": {"problem_id": 527, "library_problem_id": 16, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 16}}
{"id": 528, "code": "```python\nplt.legend(title='xyz', title_fontsize=20)\n```", "metadata": {"problem_id": 528, "library_problem_id": 17, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 16}}
{"id": 529, "code": "```python\nl.set_markerfacecolor('rgba(0, 0, 0, 0.2)')\n```", "metadata": {"problem_id": 529, "library_problem_id": 18, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 18}}
{"id": 530, "code": "```python\nl.set_markeredgecolor('black')\n```", "metadata": {"problem_id": 530, "library_problem_id": 19, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 18}}
{"id": 531, "code": "```python\nl.set_color('red')\nl.set_markerfacecolor('red')\n```", "metadata": {"problem_id": 531, "library_problem_id": 20, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 18}}
{"id": 532, "code": "```python\nrotation=45\n```", "metadata": {"problem_id": 532, "library_problem_id": 21, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 21}}
{"id": 533, "code": "```python\nrotation=45\n```", "metadata": {"problem_id": 533, "library_problem_id": 22, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 21}}
{"id": 534, "code": "```python\nax.set_xticks(np.arange(0, len(x), 2))\n```", "metadata": {"problem_id": 534, "library_problem_id": 23, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 21}}
{"id": 535, "code": "plt.legend()", "metadata": {"problem_id": 535, "library_problem_id": 24, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 24}}
{"id": 536, "code": "```python\nplt.imshow(H, cmap='viridis')\nplt.colorbar()\nplt.show()\n```", "metadata": {"problem_id": 536, "library_problem_id": 25, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 25}}
{"id": 537, "code": "```python\nplt.imshow(H, cmap='gray')\nplt.colorbar()\nplt.show()\n```", "metadata": {"problem_id": 537, "library_problem_id": 26, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 25}}
{"id": 538, "code": "```python\nplt.xlabel('X', loc='right')\n```", "metadata": {"problem_id": 538, "library_problem_id": 27, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 27}}
{"id": 539, "code": "```python\nplt.xticks(rotation=90)\n```", "metadata": {"problem_id": 539, "library_problem_id": 28, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 28}}
{"id": 540, "code": "```python\nplt.title(myTitle, fontsize=10, wrap=True)\n```", "metadata": {"problem_id": 540, "library_problem_id": 29, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 29}}
{"id": 541, "code": "```python\nplt.gca().invert_yaxis()\n```", "metadata": {"problem_id": 541, "library_problem_id": 30, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 30}}
{"id": 542, "code": "```python\nplt.xticks([0, 1.5])\nplt.show()\n```", "metadata": {"problem_id": 542, "library_problem_id": 31, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 31}}
{"id": 543, "code": "```python\nplt.yticks([-1, 1])\nplt.show()\n```", "metadata": {"problem_id": 543, "library_problem_id": 32, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 31}}
{"id": 544, "code": "```python\nplt.stackplot(range(len(x)), x, y, z, colors=['r', 'g', 'b'])\nplt.show()\n```", "metadata": {"problem_id": 544, "library_problem_id": 33, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 33}}
{"id": 545, "code": "```python\nplt.scatter(x, y, edgecolor='black', facecolor='blue')\nplt.show()\n```", "metadata": {"problem_id": 545, "library_problem_id": 34, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 34}}
{"id": 546, "code": "```python\nplt.xticks(range(10))\nplt.yticks(range(11))\nplt.show()\n```", "metadata": {"problem_id": 546, "library_problem_id": 35, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 35}}
{"id": 547, "code": "```python\nplt.ticklabel_format(style='plain', axis='y')\n```", "metadata": {"problem_id": 547, "library_problem_id": 36, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 36}}
{"id": 548, "code": "```python\nax = sns.lineplot(x=x, y=y, linestyle='--')\n```", "metadata": {"problem_id": 548, "library_problem_id": 37, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 37}}
{"id": 549, "code": "```python\nplt.subplot(1, 2, 1)\nsns.lineplot(x=x, y=y1)\nplt.subplot(1, 2, 2)\nsns.lineplot(x=x, y=y2)\nplt.tight_layout()\nplt.show()\n```", "metadata": {"problem_id": 549, "library_problem_id": 38, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 38}}
{"id": 550, "code": "```python\nplt.subplot(1, 2, 1)\nsns.lineplot(x=x, y=y1)\nplt.subplot(1, 2, 2)\nsns.lineplot(x=x, y=y2)\nplt.axis('off')\nplt.tight_layout()\nplt.show()\n```", "metadata": {"problem_id": 550, "library_problem_id": 39, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 38}}
{"id": 551, "code": "```python\nplt.xlabel(\"\")\n```", "metadata": {"problem_id": 551, "library_problem_id": 40, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 40}}
{"id": 552, "code": "```python\nplt.xticks([])\n```", "metadata": {"problem_id": 552, "library_problem_id": 41, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 40}}
{"id": 553, "code": "```python\nplt.xticks([3, 4])\nplt.grid(True, which='both', axis='x')\nplt.show()\n```", "metadata": {"problem_id": 553, "library_problem_id": 42, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 42}}
{"id": 554, "code": "```python\nplt.yticks([3, 4])\nplt.grid(axis='y', linestyle='--')\nplt.show()\n```", "metadata": {"problem_id": 554, "library_problem_id": 43, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 42}}
{"id": 555, "code": "```python\nplt.yticks([3, 4])\nplt.grid(axis='y', linestyle='-', which='major', color='gray')\nplt.xticks([1, 2])\nplt.grid(axis='x', linestyle='-', which='major', color='gray')\nplt.show()\n```", "metadata": {"problem_id": 555, "library_problem_id": 44, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 42}}
{"id": 556, "code": "```python\nplt.grid(True)\nplt.show()\n```", "metadata": {"problem_id": 556, "library_problem_id": 45, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 42}}
{"id": 557, "code": "```python\nplt.legend(loc=\"lower right\")\n```", "metadata": {"problem_id": 557, "library_problem_id": 46, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 46}}
{"id": 558, "code": "```python\nfig, axes = plt.subplots(ncols=2, nrows=2, figsize=(8, 6), gridspec_kw={'wspace': 0.4, 'hspace': 0.4})\naxes = axes.flatten()\n\nfor ax in axes:\n    ax.set_ylabel(r\"$\\ln\\left(\\frac{x_a-x_b}{x_a-x_c}\\right)$\")\n    ax.set_xlabel(r\"$\\ln\\left(\\frac{x_a-x_d}{x_a-x_e}\\right)$\")\n\nplt.tight_layout()\nplt.show()\nplt.clf()\n```", "metadata": {"problem_id": 558, "library_problem_id": 47, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 47}}
{"id": 559, "code": "```python\nplt.legend(['Y', 'Z'])\nplt.show()\n```", "metadata": {"problem_id": 559, "library_problem_id": 48, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 48}}
{"id": 560, "code": "```python\nax.xaxis.tick_top()\n```", "metadata": {"problem_id": 560, "library_problem_id": 49, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 49}}
{"id": 561, "code": "```python\nplt.xlabel('X', labelpad=20)\nplt.show()\n```", "metadata": {"problem_id": 561, "library_problem_id": 50, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 50}}
{"id": 562, "code": "```python\nplt.plot(y, 'b-', linewidth=2)\nplt.xticks([])\nplt.show()\n```", "metadata": {"problem_id": 562, "library_problem_id": 51, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 51}}
{"id": 563, "code": "```python\nplt.gca().yaxis.tick_right()\nplt.show()\n```", "metadata": {"problem_id": 563, "library_problem_id": 52, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 52}}
{"id": 564, "code": "```python\nplt.ylabel('Y', labelpad=20)\nax.yaxis.set_label_position(\"right\")\nplt.show()\n```", "metadata": {"problem_id": 564, "library_problem_id": 53, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 52}}
{"id": 565, "code": "```python\nsns.jointplot(x=\"total_bill\", y=\"tip\", data=tips, kind='reg', line_kws={'color':'green'}, scatter_kws={'color':'green'}, joint_kws={'color':'blue'})\nplt.show()\n```", "metadata": {"problem_id": 565, "library_problem_id": 54, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 54}}
{"id": 566, "code": "```python\nsns.jointplot(x=\"total_bill\", y=\"tip\", data=tips, kind='reg', line_kws={'color': 'green'}, joint_kws={'color': 'blue'})\nplt.show()\n```", "metadata": {"problem_id": 566, "library_problem_id": 55, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 54}}
{"id": 567, "code": "```python\nsns.jointplot(x=\"total_bill\", y=\"tip\", data=tips, kind='reg')\nplt.show()\n```", "metadata": {"problem_id": 567, "library_problem_id": 56, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 54}}
{"id": 568, "code": "```python\nax.bar(df['celltype'], df['s1'], label='s1')\nax.bar(df['celltype'], df['s2'], label='s2')\nax.set_xlabel('celltype')\nax.legend()\nplt.xticks(rotation=0)\nplt.show()\n```", "metadata": {"problem_id": 568, "library_problem_id": 57, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 57}}
{"id": 569, "code": "```python\nax.bar(df['celltype'], df['s1'])\nax.bar(df['celltype'], df['s2'])\nax.set_xlabel('celltype')\nax.set_xticklabels(df['celltype'], rotation=45)\nplt.show()\n```", "metadata": {"problem_id": 569, "library_problem_id": 58, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 57}}
{"id": 570, "code": "```python\nax.set_xlabel('X', color='red')\nax.set_ylabel('Y', color='red')\n```", "metadata": {"problem_id": 570, "library_problem_id": 59, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 59}}
{"id": 571, "code": "```python\nax.set_xlabel('X')\nax.xaxis.label.set_color('red')\n```", "metadata": {"problem_id": 571, "library_problem_id": 60, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 59}}
{"id": 572, "code": "```python\nplt.xticks(fontsize=10, rotation='vertical')\n```", "metadata": {"problem_id": 572, "library_problem_id": 61, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 61}}
{"id": 573, "code": "```python\nax.axvline(x=0.22058956, color='r')\nax.axvline(x=0.33088437, color='r')\nax.axvline(x=2.20589566, color='r')\n```", "metadata": {"problem_id": 573, "library_problem_id": 62, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 62}}
{"id": 574, "code": "```python\nax.set_xticks(range(len(xlabels)))\nax.set_xticklabels(xlabels[::-1])\nax.set_yticks(range(len(ylabels)))\nax.set_yticklabels(ylabels[::-1])\nplt.xticks(top=True)\nsns.heatmap(rand_mat, annot=True, fmt=\".2f\", cmap='YlGnBu', xticklabels=xlabels, yticklabels=ylabels)\nplt.show()\n```", "metadata": {"problem_id": 574, "library_problem_id": 63, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 63}}
{"id": 575, "code": "```python\nax.legend(loc=0)\nax2.legend(loc=0)\n```", "metadata": {"problem_id": 575, "library_problem_id": 64, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 64}}
{"id": 576, "code": "```python\nfig, axes = plt.subplots(nrows=1, ncols=2)\naxes[0].plot(x, y)\naxes[0].set_title(\"Y\")\naxes[1].plot(x, y)\naxes[1].set_title(\"Y\")\nplt.show()\n```", "metadata": {"problem_id": 576, "library_problem_id": 65, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 65}}
{"id": 577, "code": "```python\nsns.scatterplot(data=df, x=\"bill_length_mm\", y=\"bill_depth_mm\", s=30)\nplt.show()\n```", "metadata": {"problem_id": 577, "library_problem_id": 66, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 66}}
{"id": 578, "code": "```python\nplt.scatter(a, b)\nfor i, txt in enumerate(c):\n    plt.annotate(txt, (a[i], b[i]))\nplt.show()\n```", "metadata": {"problem_id": 578, "library_problem_id": 67, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 67}}
{"id": 579, "code": "```python\nplt.plot(x, y, label=\"y over x\")\nplt.legend(title=\"Legend Title\")\nplt.show()\n```", "metadata": {"problem_id": 579, "library_problem_id": 68, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 68}}
{"id": 580, "code": "```python\nax.plot(x, y, '-o', c='red', lw=2, label='y over x')\nax.legend(title='Legend', title_fontsize='bold')\nplt.show()\n```", "metadata": {"problem_id": 580, "library_problem_id": 69, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 68}}
{"id": 581, "code": "```python\nax.hist(x, edgecolor='black', linewidth=1.2)\nplt.show()\n```", "metadata": {"problem_id": 581, "library_problem_id": 70, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 70}}
{"id": 582, "code": "```python\nfig, axs = plt.subplots(1, 2, gridspec_kw={'width_ratios': [3, 1]})\naxs[0].plot(x, y, '-o', c='red', lw=2, label='bla')\naxs[0].set_xlabel('X-Axis')\naxs[0].set_ylabel('Y-Axis')\naxs[0].legend(loc='upper center')\naxs[0].grid(True, which='both')\n\nplt.show()\n```", "metadata": {"problem_id": 582, "library_problem_id": 71, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 71}}
{"id": 583, "code": "```python\nplt.hist(x, bins=bins, alpha=0.5, label='x')\nplt.hist(y, bins=bins, alpha=0.5, label='y')\nplt.xlabel('Value')\nplt.ylabel('Frequency')\nplt.title('Histograms of x and y')\nplt.legend(loc='upper right')\nplt.show()\n```", "metadata": {"problem_id": 583, "library_problem_id": 72, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 72}}
{"id": 584, "code": "```python\nplt.hist([x, y], bins=10, alpha=0.5, label=['x', 'y'])\nplt.legend(loc='upper right')\nplt.show()\n```", "metadata": {"problem_id": 584, "library_problem_id": 73, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 72}}
{"id": 585, "code": "```python\nplt.plot(a, b, c, d, marker='o', linestyle='-')\nplt.xlim(0, 5)\nplt.ylim(0, 5)\nplt.show()\n```", "metadata": {"problem_id": 585, "library_problem_id": 74, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 74}}
{"id": 586, "code": "```python\nfig, axes = plt.subplots(1, 2, figsize=(10, 5))\ncmap_x = plt.cm.viridis\ncmap_y = plt.cm.plasma\nim1 = axes[0].imshow(x, cmap=cmap_x)\nim2 = axes[1].imshow(y, cmap=cmap_y)\nfig.colorbar(im1, ax=axes.ravel().tolist())\nplt.show()\n```", "metadata": {"problem_id": 586, "library_problem_id": 75, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 75}}
{"id": 587, "code": "```python\nplt.plot(x[:, 0], label=\"a\")\nplt.plot(x[:, 1], label=\"b\")\nplt.legend()\nplt.show()\n```", "metadata": {"problem_id": 587, "library_problem_id": 76, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 76}}
{"id": 588, "code": "```python\nfig, axs = plt.subplots(2, 1, figsize=(10, 5))\naxs[0].plot(x, y)\naxs[1].plot(z, a)\nfig.suptitle('Y and Z')\nplt.show()\n```", "metadata": {"problem_id": 588, "library_problem_id": 77, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 77}}
{"id": 589, "code": "```python\nplt.plot(points, marker='o')\nplt.yscale('log')\nplt.show()\n```", "metadata": {"problem_id": 589, "library_problem_id": 78, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 78}}
{"id": 590, "code": "```python\nplt.plot(y, label='Line')\nplt.xlabel('X-axis', fontsize=18)\nplt.ylabel('Y-axis', fontsize=16)\nplt.title('Plot of Y over X', fontsize=20)\nplt.legend()\nplt.show()\n```", "metadata": {"problem_id": 590, "library_problem_id": 79, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 79}}
{"id": 591, "code": "```python\nax.set_xticks(np.arange(1, 11))\nax.set_yticks(np.arange(1, 11))\nax.set_xticklabels(np.arange(1, 11))\nax.set_yticklabels(np.arange(1, 11))\nplt.show()\n```", "metadata": {"problem_id": 591, "library_problem_id": 80, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 80}}
{"id": 592, "code": "```python\nfor i, ((x1, y1), (x2, y2)) in enumerate(lines):\n    ax.plot([x1, x2], [y1, y2], color=c[i])\nplt.show()\n```", "metadata": {"problem_id": 592, "library_problem_id": 81, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 81}}
{"id": 593, "code": "```python\nplt.loglog(x, y, basex=10, basey=10)\nplt.xticks([1, 10, 100])\nplt.yticks([1, 10, 100])\nplt.show()\n```", "metadata": {"problem_id": 593, "library_problem_id": 82, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 82}}
{"id": 594, "code": "```python\nax.plot(df.index, df['A'], marker='o', linestyle='-', color='b')\nax.plot(df.index, df['B'], marker='o', linestyle='--', color='r')\nax.plot(df.index, df['C'], marker='o', linestyle='-.', color='g')\nax.plot(df.index, df['D'], marker='o', linestyle=':', color='m')\nplt.show()\n```", "metadata": {"problem_id": 594, "library_problem_id": 83, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 83}}
{"id": 595, "code": "```python\nax.hist(data, bins=len(data), density=True)\nax.yaxis.set_major_formatter(plt.FuncFormatter(lambda y, _: f'{int(y*100)}%'))\n```", "metadata": {"problem_id": 595, "library_problem_id": 84, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 84}}
{"id": 596, "code": "```python\nplt.plot(x, y, marker='o', markerfacecolor='none', markeredgecolor='black', alpha=0.5, linestyle='-')\nplt.show()\n```", "metadata": {"problem_id": 596, "library_problem_id": 85, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 85}}
{"id": 597, "code": "```python\nfig, axs = plt.subplots(1, 2, figsize=(10, 5))\n\naxs[0].plot(x, y, label='y')\naxs[1].plot(a, z, label='a')\n\nfig.legend(loc='upper center', bbox_to_anchor=(0.5, -0.05), fancybox=True, shadow=True, ncol=2)\n\nplt.show()\n```", "metadata": {"problem_id": 597, "library_problem_id": 86, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 86}}
{"id": 598, "code": "```python\nfig, axes = plt.subplots(1, 2, figsize=(12, 6))\n\nsns.regplot(x=\"bill_length_mm\", y=\"bill_depth_mm\", data=df, ax=axes[0])\nsns.regplot(x=\"bill_length_mm\", y=\"flipper_length_mm\", data=df, ax=axes[1])\n\nplt.tight_layout()\nplt.show()\n```", "metadata": {"problem_id": 598, "library_problem_id": 87, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 87}}
{"id": 599, "code": "```python\nax.set_xticks(range(1, 10))\nax.set_xticklabels(['first'] + list(range(2, 10)))\n```", "metadata": {"problem_id": 599, "library_problem_id": 88, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 88}}
{"id": 600, "code": "```python\nax.plot(x, y, '-o', c='red', lw=2, label=r'$\\lambda$')\nax.legend(loc='upper center')\n```", "metadata": {"problem_id": 600, "library_problem_id": 89, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 89}}
{"id": 601, "code": "```python\nax.set_xticks([2.1, 3, 7.6])\n```", "metadata": {"problem_id": 601, "library_problem_id": 90, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 90}}
{"id": 602, "code": "```python\nplt.xticks(rotation=-60, ha='left')\n```", "metadata": {"problem_id": 602, "library_problem_id": 91, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 91}}
{"id": 603, "code": "```python\nax.yaxis.set_tick_params(labelrotation=-60)\nax.set_xlabel('Year')\nax.set_ylabel('Value')\nax.set_xlim(2010, 2019)\nax.set_ylim(-1, 9)\nax.set_title('Sample Plot')\nax.set(xlabel='Time')\nax.legend(loc='upper center')\nax.grid(True, which='both')\n```", "metadata": {"problem_id": 603, "library_problem_id": 92, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 91}}
{"id": 604, "code": "```python\nplt.xticks(alpha=0.5)\nplt.show()\n```", "metadata": {"problem_id": 604, "library_problem_id": 93, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 91}}
{"id": 605, "code": "```python\nplt.margins(x=0, y=0.1)\n```", "metadata": {"problem_id": 605, "library_problem_id": 94, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 94}}
{"id": 606, "code": "```python\nplt.margins(y=-0.1)\n```", "metadata": {"problem_id": 606, "library_problem_id": 95, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 94}}
{"id": 607, "code": "```python\nfig, axs = plt.subplots(1, 2)\nfor ax in axs:\n    ax.plot(x, y)\nplt.suptitle(\"Figure\")\nplt.show()\n```", "metadata": {"problem_id": 607, "library_problem_id": 96, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 96}}
{"id": 608, "code": "```python\nplt.plot(df['Type A'], df['Type B'], linewidth=4.0)\nplt.xlabel('X')\nplt.ylabel('Y')\nplt.show()\n```", "metadata": {"problem_id": 608, "library_problem_id": 97, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 97}}
{"id": 609, "code": "```python\nplt.scatter(x, y, marker='|', hatch='///')\n```", "metadata": {"problem_id": 609, "library_problem_id": 98, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 98}}
{"id": 610, "code": "```python\nplt.scatter(x, y, edgecolor='none', hatch='|')\nplt.show()\n```", "metadata": {"problem_id": 610, "library_problem_id": 99, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 98}}
{"id": 611, "code": "```python\nplt.scatter(x, y, marker='*')\n```", "metadata": {"problem_id": 611, "library_problem_id": 100, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 98}}
{"id": 612, "code": "```python\nax.scatter(x, y, s=100, hatch='*|')\n```", "metadata": {"problem_id": 612, "library_problem_id": 101, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 98}}
{"id": 613, "code": "```python\nfig, ax = plt.subplots()\nim = ax.imshow(data, extent=[1, 5, 1, 4], interpolation='nearest')\nplt.colorbar(im)\nplt.xlim(0, 10)\nplt.ylim(0, 10)\nplt.show()\n```", "metadata": {"problem_id": 613, "library_problem_id": 102, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 102}}
{"id": 614, "code": "```python\nax.stem(y, orientation='horizontal')\nplt.show()\n```", "metadata": {"problem_id": 614, "library_problem_id": 103, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 103}}
{"id": 615, "code": "```python\nfig, ax = plt.subplots()\nbars = ax.bar(d.keys(), d.values(), color=[c[key] for key in d])\nplt.show()\n```", "metadata": {"problem_id": 615, "library_problem_id": 104, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 104}}
{"id": 616, "code": "```python\nplt.axvline(x=3, label=\"cutoff\")\nplt.legend()\nplt.show()\n```", "metadata": {"problem_id": 616, "library_problem_id": 105, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 105}}
{"id": 617, "code": "```python\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\nbars = ax.bar(labels, height)\nplt.show()\n```", "metadata": {"problem_id": 617, "library_problem_id": 106, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 106}}
{"id": 618, "code": "```python\nplt.pie(data, labels=l, wedgeprops=dict(width=0.4))\nplt.show()\n```", "metadata": {"problem_id": 618, "library_problem_id": 107, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 107}}
{"id": 619, "code": "```python\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\n```", "metadata": {"problem_id": 619, "library_problem_id": 108, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 108}}
{"id": 620, "code": "```python\nplt.minorticks_on()\nplt.grid(which='minor', linestyle=':', linewidth='0.5', color='gray')\nplt.grid(which='major', linestyle='', linewidth='0')\nplt.show()\n```", "metadata": {"problem_id": 620, "library_problem_id": 109, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 109}}
{"id": 621, "code": "```python\nplt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)\nplt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nplt.title(\"Daily Activities\")\nplt.show()\n```", "metadata": {"problem_id": 621, "library_problem_id": 110, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 110}}
{"id": 622, "code": "```python\nplt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)\nplt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nplt.title(\"Daily Activities\")\nplt.show()\n```", "metadata": {"problem_id": 622, "library_problem_id": 111, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 111}}
{"id": 623, "code": "```python\nplt.plot(x, y, 'o-', lw=4.0, markersize=10, markerfacecolor='none', markeredgecolor='black')\n```", "metadata": {"problem_id": 623, "library_problem_id": 112, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 112}}
{"id": 624, "code": "```python\nplt.axvline(x=55, color=\"green\")\nplt.show()\n```", "metadata": {"problem_id": 624, "library_problem_id": 113, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 113}}
{"id": 625, "code": "```python\nbar_width = 0.35\nindex = np.arange(len(blue_bar))\n\nplt.bar(index, blue_bar, bar_width, label='Blue')\nplt.bar(index + bar_width, orange_bar, bar_width, label='Orange')\n\nplt.xlabel('Categories')\nplt.ylabel('Values')\nplt.title('Side-by-Side Bar Plot')\nplt.xticks(index + bar_width / 2, ('Category 1', 'Category 2', 'Category 3'))\nplt.legend()\nplt.show()\n```", "metadata": {"problem_id": 625, "library_problem_id": 114, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 114}}
{"id": 626, "code": "```python\nplt.subplot(1, 2, 1)\nplt.plot(x, y, label='Line 1')\nplt.plot(a, z, label='Line 2')\nplt.legend()\n\nplt.subplot(1, 2, 2)\nplt.plot(a, z, label='Line 2')\n\nplt.tight_layout()\nplt.show()\n```", "metadata": {"problem_id": 626, "library_problem_id": 115, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 115}}
{"id": 627, "code": "```python\nplt.scatter(x, y, c=y, cmap='Spectral')\nplt.colorbar()\nplt.show()\n```", "metadata": {"problem_id": 627, "library_problem_id": 116, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 116}}
{"id": 628, "code": "```python\nplt.xticks(np.arange(min(x), max(x)+1, 1.0))\nplt.show()\n```", "metadata": {"problem_id": 628, "library_problem_id": 117, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 117}}
{"id": 629, "code": "```python\nsns.catplot(x=\"sex\", y=\"bill_length_mm\", col=\"species\", kind=\"bar\", data=df, sharey=False)\nplt.show()\n```", "metadata": {"problem_id": 629, "library_problem_id": 118, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 118}}
{"id": 630, "code": "```python\ncircle = plt.Circle((0.5, 0.5), 0.2, color='b')\nplt.gca().add_artist(circle)\nplt.xlim(0, 1)\nplt.ylim(0, 1)\nplt.show()\n```", "metadata": {"problem_id": 630, "library_problem_id": 119, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 119}}
{"id": 631, "code": "```python\nplt.title(r'$\\bf{\\phi}$', fontsize=14, fontweight='bold')\nplt.show()\n```", "metadata": {"problem_id": 631, "library_problem_id": 120, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 120}}
{"id": 632, "code": "```python\nplt.plot(x, y, label=\"Line\")\nplt.legend(handlelength=0.1)\nplt.show()\n```", "metadata": {"problem_id": 632, "library_problem_id": 121, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 121}}
{"id": 633, "code": "```python\nplt.plot(x, y, label=\"Line\")\nplt.legend(handlelength=0.3)\nplt.show()\n```", "metadata": {"problem_id": 633, "library_problem_id": 122, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 121}}
{"id": 634, "code": "```python\nplt.legend(ncol=2)\n```", "metadata": {"problem_id": 634, "library_problem_id": 123, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 121}}
{"id": 635, "code": "```python\nplt.legend(loc='best')\nplt.show()\n```", "metadata": {"problem_id": 635, "library_problem_id": 124, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 121}}
{"id": 636, "code": "```python\nplt.imshow(data, origin='lower')\nplt.colorbar()\nplt.show()\n```", "metadata": {"problem_id": 636, "library_problem_id": 125, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 125}}
{"id": 637, "code": "```python\nplt.plot(x, y)\nplt.title(r'\\bf{Figure} 1')\nplt.show()\n```", "metadata": {"problem_id": 637, "library_problem_id": 126, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 126}}
{"id": 638, "code": "```python\nsns.pairplot(df, x_vars=[\"x\"], y_vars=[\"y\"], hue=\"id\", legend=False)\nplt.show()\n```", "metadata": {"problem_id": 638, "library_problem_id": 127, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 127}}
{"id": 639, "code": "```python\nplt.gca().invert_xaxis()\nplt.show()\n```", "metadata": {"problem_id": 639, "library_problem_id": 128, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 128}}
{"id": 640, "code": "```python\nax.margins(x=0, y=0)\n```", "metadata": {"problem_id": 640, "library_problem_id": 129, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 129}}
{"id": 641, "code": "```python\nax.scatter(x, y, facecolors='red', edgecolors='black')\nplt.show()\n```", "metadata": {"problem_id": 641, "library_problem_id": 130, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 130}}
{"id": 642, "code": "```python\nfig, axes = plt.subplots(2, 2, figsize=(15, 15))\nfor ax in axes.flat:\n    ax.plot(x, y, color='lightblue', linewidth=3)\n    ax.scatter([2, 4, 6], [5, 15, 25], color='darkgreen', marker='^')\nplt.show()\n```", "metadata": {"problem_id": 642, "library_problem_id": 131, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 131}}
{"id": 643, "code": "```python\nplt.hist(x, bins=np.arange(0, 11, 2), edgecolor='black')\nplt.show()\n```", "metadata": {"problem_id": 643, "library_problem_id": 132, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 132}}
{"id": 644, "code": "```python\nax.fill_between(x, y - error, y + error, color='gray', alpha=0.5)\nplt.show()\n```", "metadata": {"problem_id": 644, "library_problem_id": 133, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 133}}
{"id": 645, "code": "```python\nax.axhline(0, color='white')\nax.axvline(0, color='white')\n```", "metadata": {"problem_id": 645, "library_problem_id": 134, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 134}}
{"id": 646, "code": "```python\nax.errorbar(box_position, box_height, yerr=box_errors, fmt='o', ecolor=c, capsize=5)\n```", "metadata": {"problem_id": 646, "library_problem_id": 135, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 135}}
{"id": 647, "code": "```python\nplt.subplot(1, 2, 1)\nplt.plot(x, y)\nplt.title('Y')\n\nplt.subplot(1, 2, 2)\nplt.plot(a, z)\nplt.title('Z', pad=20)\n\nplt.tight_layout()\nplt.show()\n```", "metadata": {"problem_id": 647, "library_problem_id": 136, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 136}}
{"id": 648, "code": "```python\nfig, axes = plt.subplots(nrows=2, ncols=2, figsize=(5, 5))\naxes[0, 0].plot(x, y)\naxes[0, 1].plot(x, y)\naxes[1, 0].plot(x, y)\naxes[1, 1].plot(x, y)\nplt.tight_layout()\nplt.show()\n```", "metadata": {"problem_id": 648, "library_problem_id": 137, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 137}}
{"id": 649, "code": "```python\nplt.figure(figsize=(8, 8))\nplt.matshow(d, fignum=1)\nplt.show()\n```", "metadata": {"problem_id": 649, "library_problem_id": 138, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 138}}
{"id": 650, "code": "```python\nfig, ax = plt.subplots()\ntable = ax.table(cellText=df.values, colLabels=df.columns, bbox=[0, 0, 1, 1])\nplt.axis('off')\nplt.show()\n```", "metadata": {"problem_id": 650, "library_problem_id": 139, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 139}}
{"id": 651, "code": "```python\nplt.xticks(ticks=x, labels=y)\nplt.gca().xaxis.set_ticks_position('both')\nplt.show()\n```", "metadata": {"problem_id": 651, "library_problem_id": 140, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 140}}
{"id": 652, "code": "```python\nplt.xticks(ticks=np.arange(10))\nplt.gca().xaxis.set_tick_params(labeltop=True)\nplt.show()\n```", "metadata": {"problem_id": 652, "library_problem_id": 141, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 140}}
{"id": 653, "code": "```python\nplt.xticks([])\nplt.show()\n```", "metadata": {"problem_id": 653, "library_problem_id": 142, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 140}}
{"id": 654, "code": "```python\nsns.catplot(x=\"time\", y=\"pulse\", kind=\"scatter\", hue=\"diet\", col=\"diet\", data=df)\nplt.suptitle(\"Group: Fat\")\nplt.subplots_adjust(top=0.9)\nplt.show()\n\nsns.catplot(x=\"time\", y=\"pulse\", kind=\"scatter\", hue=\"diet\", col=\"diet\", data=df)\nplt.suptitle(\"Group: No Fat\")\nplt.subplots_adjust(top=0.9)\nplt.show()\n```", "metadata": {"problem_id": 654, "library_problem_id": 143, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 143}}
{"id": 655, "code": "```python\nsns.catplot(x=\"time\", y=\"pulse\", kind=\"scatter\", hue=\"diet\", col=\"kind\", data=df)\nplt.xlabel(\"Exercise Time\")\nplt.ylabel(\"Pulse\")\nplt.show()\n```", "metadata": {"problem_id": 655, "library_problem_id": 144, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 143}}
{"id": 656, "code": "```python\nsns.catplot(x=\"time\", y=\"pulse\", kind=\"scatter\", hue=\"diet\", col=\"kind\", data=df, sharey=False)\nplt.show()\n```", "metadata": {"problem_id": 656, "library_problem_id": 145, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 143}}
{"id": 657, "code": "```python\nplt.plot(x, y, label=\"y\")\nplt.legend(fontsize=8)\nplt.show()\n```", "metadata": {"problem_id": 657, "library_problem_id": 146, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 146}}
{"id": 658, "code": "```python\nplt.figure(figsize=(5, 5), dpi=300)\nplt.plot(y, x)\nplt.show()\n```", "metadata": {"problem_id": 658, "library_problem_id": 147, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 147}}
{"id": 659, "code": "```python\nplt.legend(frameon=False)\nplt.show()\n```", "metadata": {"problem_id": 659, "library_problem_id": 148, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 148}}
{"id": 660, "code": "```python\nplt.plot(t, a, label='sin(t)')\nplt.plot(t, b, label='cos(t)')\nplt.plot(t, c, label='sin(t) + cos(t)')\nplt.legend()\nplt.show()\n```", "metadata": {"problem_id": 660, "library_problem_id": 149, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 149}}
{"id": 661, "code": "```python\nsns.stripplot(x=\"sex\", y=\"bill_length_mm\", hue=\"species\", data=df)\nplt.legend([],[], frameon=False)\nplt.show()\n```", "metadata": {"problem_id": 661, "library_problem_id": 150, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 150}}
{"id": 662, "code": "```python\ng = sns.FacetGrid(df, row=\"b\")\ng.map(sns.pointplot, \"a\", \"c\")\nfor ax in g.axes.flatten():\n    ax.set_xticks(np.arange(1, 31, 2))\nplt.show()\n```", "metadata": {"problem_id": 662, "library_problem_id": 151, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 151}}
{"id": 663, "code": "```python\nax.view_init(azim=100, elev=50)\nplt.scatter(x, y, z)\nplt.show()\n```", "metadata": {"problem_id": 663, "library_problem_id": 152, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 152}}
{"id": 664, "code": "```python\nplt.xlabel('x')\nplt.ylabel('y')\nplt.xticks([])\nplt.yticks([])\nplt.show()\n```", "metadata": {"problem_id": 664, "library_problem_id": 153, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 153}}
{"id": 665, "code": "```python\ngs = gridspec.GridSpec(nrow, ncol)\n\nfor i in range(nrow):\n    for j in range(ncol):\n        ax = fig.add_subplot(gs[i, j])\n        ax.imshow(x, cmap='viridis')\n        ax.axis('off')\n```", "metadata": {"problem_id": 665, "library_problem_id": 154, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 154}}
{"id": 666, "code": "```python\nx.assign(1).numpy()\n```", "metadata": {"problem_id": 666, "library_problem_id": 0, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 667, "code": "```python\nx.assign(114514).numpy()\n```", "metadata": {"problem_id": 667, "library_problem_id": 1, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 0}}
{"id": 668, "code": "```python\nresult = tf.one_hot(labels, depth=10, dtype=tf.int32)\n```", "metadata": {"problem_id": 668, "library_problem_id": 2, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 2}}
{"id": 669, "code": "```python\nresult = tf.one_hot(labels, depth=10, dtype=tf.int32)\n```", "metadata": {"problem_id": 669, "library_problem_id": 3, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 2}}
{"id": 670, "code": "```python\nresult = tf.one_hot(labels, depth=10, dtype=tf.int32)\n```", "metadata": {"problem_id": 670, "library_problem_id": 4, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 2}}
{"id": 671, "code": "```python\nresult = tf.one_hot(tf.constant(labels), depth=10, dtype=tf.int32)\n```", "metadata": {"problem_id": 671, "library_problem_id": 5, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 2}}
{"id": 672, "code": "```python\nresult = tf.one_hot(labels, depth=10, dtype=tf.int32)\n```", "metadata": {"problem_id": 672, "library_problem_id": 6, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 2}}
{"id": 673, "code": "```python\nds = ds.flat_map(lambda x: tf.data.Dataset.from_tensor_slices(my_map_func(x)))\n```", "metadata": {"problem_id": 673, "library_problem_id": 7, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 7}}
{"id": 674, "code": "```python\ndef my_map_func(i):\n  return tf.data.Dataset.from_tensor_slices([i, i+1, i+2])\nds = ds.flat_map(my_map_func)\n```", "metadata": {"problem_id": 674, "library_problem_id": 8, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 7}}
{"id": 675, "code": "```python\nmask = tf.sequence_mask(lengths, maxlen=8, dtype=tf.int32)\nresult = tf.reverse(mask, axis=[1])\n```", "metadata": {"problem_id": 675, "library_problem_id": 9, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 9}}
{"id": 676, "code": "```python\nmax_length = 8\nmask = tf.sequence_mask(lengths, maxlen=max_length)\nresult = tf.reverse(mask, axis=[-1])\n```", "metadata": {"problem_id": 676, "library_problem_id": 10, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 9}}
{"id": 677, "code": "```python\nmask = tf.sequence_mask(lengths, maxlen=8, dtype=tf.float32)\n```", "metadata": {"problem_id": 677, "library_problem_id": 11, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 9}}
{"id": 678, "code": "```python\nresult = tf.sequence_mask(lengths, maxlen=8, dtype=tf.int32)\n```", "metadata": {"problem_id": 678, "library_problem_id": 12, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 9}}
{"id": 679, "code": "```python\nmask = tf.sequence_mask(lengths, maxlen=8, dtype=tf.float32)\nresult = tf.reverse(mask, axis=[-1])\n```", "metadata": {"problem_id": 679, "library_problem_id": 13, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 9}}
{"id": 680, "code": "```python\nresult = tf.tensordot(a[:, None], b[None, :], axes=0)\n```", "metadata": {"problem_id": 680, "library_problem_id": 14, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 14}}
{"id": 681, "code": "```python\nresult = tf.tensordot(tf.reshape(a, [-1, 1]), b, axes=0)\n```", "metadata": {"problem_id": 681, "library_problem_id": 15, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 14}}
{"id": 682, "code": "```python\nresult = tf.squeeze(a, axis=2)\n```", "metadata": {"problem_id": 682, "library_problem_id": 16, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 16}}
{"id": 683, "code": "```python\nresult = tf.reshape(a, (50, 100, 1, 512))\n```", "metadata": {"problem_id": 683, "library_problem_id": 17, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 16}}
{"id": 684, "code": "```python\nresult = tf.reshape(a, (1, 50, 100, 1, 512))\n```", "metadata": {"problem_id": 684, "library_problem_id": 18, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 16}}
{"id": 685, "code": "```python\nresult = tf.reduce_sum(A, axis=1)\n```", "metadata": {"problem_id": 685, "library_problem_id": 19, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 19}}
{"id": 686, "code": "```python\ntf.reduce_prod(A, axis=1)\n```", "metadata": {"problem_id": 686, "library_problem_id": 20, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 19}}
{"id": 687, "code": "```python\nresult = tf.math.reciprocal(A)\n```", "metadata": {"problem_id": 687, "library_problem_id": 21, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 19}}
{"id": 688, "code": "tf.reduce_sum(tf.square(tf.subtract(a, b)), axis=1)", "metadata": {"problem_id": 688, "library_problem_id": 22, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 22}}
{"id": 689, "code": "tf.reduce_sum(tf.square(tf.subtract(a, b)), axis=0)", "metadata": {"problem_id": 689, "library_problem_id": 23, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 22}}
{"id": 690, "code": "```python\ntf.reduce_sum(tf.square(tf.subtract(A, B)), axis=1)\n```", "metadata": {"problem_id": 690, "library_problem_id": 24, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 22}}
{"id": 691, "code": "```python\nresult = tf.gather_nd(x, tf.stack((y, z), axis=1))\n```", "metadata": {"problem_id": 691, "library_problem_id": 25, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 25}}
{"id": 692, "code": "```python\nresult = tf.gather_nd(x, tf.stack((row, col), axis=1))\n```", "metadata": {"problem_id": 692, "library_problem_id": 26, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 25}}
{"id": 693, "code": "```python\nresult = tf.gather_nd(x, tf.stack((y, z), axis=1))\n```", "metadata": {"problem_id": 693, "library_problem_id": 27, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 25}}
{"id": 694, "code": "```python\ntf.matmul(A, B, transpose_b=True)\n```", "metadata": {"problem_id": 694, "library_problem_id": 28, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 28}}
{"id": 695, "code": "```python\ntf.matmul(A, B, transpose_b=True)\n```", "metadata": {"problem_id": 695, "library_problem_id": 29, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 28}}
{"id": 696, "code": "```python\nresult = [tf.strings.unicode_decode(tf.constant(item), input_encoding='UTF-8') for item in x]\n```", "metadata": {"problem_id": 696, "library_problem_id": 30, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 30}}
{"id": 697, "code": "```python\nresult = [tf.strings.unicode_decode(tf.constant(item), input_encoding='UTF-8') for item in x]\n```", "metadata": {"problem_id": 697, "library_problem_id": 31, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 30}}
{"id": 698, "code": "```python\nmask = tf.cast(tf.not_equal(x, 0), tf.float32)\nsum_x = tf.reduce_sum(x * mask, axis=-1)\ncount_non_zero = tf.reduce_sum(mask, axis=-1)\nresult = sum_x / count_non_zero\n```", "metadata": {"problem_id": 698, "library_problem_id": 32, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 32}}
{"id": 699, "code": "```python\nmask = tf.cast(tf.not_equal(x, 0), tf.float32)\nsums = tf.reduce_sum(x * mask, axis=-1)\ncounts = tf.reduce_sum(mask, axis=-1)\nvariances = sums / counts - tf.square(sums / counts) / counts\nresult = variances[..., tf.newaxis]\n```", "metadata": {"problem_id": 699, "library_problem_id": 33, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 32}}
{"id": 700, "code": "```python\nresult = tf.reduce_sum(tf.where(x != 0, x, 0), axis=-1) / tf.cast(tf.reduce_sum(tf.where(x != 0, 1, 0), axis=-1), tf.float32)\n### END SOLUTION\nreturn result\n```", "metadata": {"problem_id": 700, "library_problem_id": 34, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 32}}
{"id": 701, "code": "```python\nimport tensorflow as tf\n\ntf.random.set_seed(10)\nA = tf.random.normal([100,100])\nB = tf.random.normal([100,100])\n\nresult = tf.reduce_sum(tf.matmul(A,B))\n```", "metadata": {"problem_id": 701, "library_problem_id": 35, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 35}}
{"id": 702, "code": "```python\nresult = tf.argmax(a, axis=1)\n```", "metadata": {"problem_id": 702, "library_problem_id": 36, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 36}}
{"id": 703, "code": "```python\nresult = tf.argmax(a, axis=1)\n```", "metadata": {"problem_id": 703, "library_problem_id": 37, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 36}}
{"id": 704, "code": "```python\ntf.argmax(scores, axis=1)\n```", "metadata": {"problem_id": 704, "library_problem_id": 38, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 36}}
{"id": 705, "code": "```python\nresult = tf.argmin(a, axis=1)\n```", "metadata": {"problem_id": 705, "library_problem_id": 39, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 36}}
{"id": 706, "code": "```python\ntf.saved_model.save(model, \"my_model\")\n```", "metadata": {"problem_id": 706, "library_problem_id": 40, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 40}}
{"id": 707, "code": "```python\ntf.random.set_seed(seed_x)\nresult = tf.random.uniform(shape=[10], minval=1, maxval=5, dtype=tf.int32)\n```", "metadata": {"problem_id": 707, "library_problem_id": 41, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 41}}
{"id": 708, "code": "```python\ntf.random.set_seed(seed_x)\nresult = tf.constant(tf.random.uniform(shape=[114], minval=2, maxval=6, dtype=tf.int32))\n```", "metadata": {"problem_id": 708, "library_problem_id": 42, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 41}}
{"id": 709, "code": "```python\ntf.random.set_seed(seed_x)\nresult = tf.random.uniform(shape=[10], minval=1, maxval=5, dtype=tf.int32)\nreturn result\n```", "metadata": {"problem_id": 709, "library_problem_id": 43, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 41}}
{"id": 710, "code": "```python\nresult = tf.__version__\n```", "metadata": {"problem_id": 710, "library_problem_id": 44, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 44}}
{"id": 711, "code": "```python\nresult = np.polyfit(np.log(x), y, 1)\n```", "metadata": {"problem_id": 711, "library_problem_id": 0, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 712, "code": "```python\nresult = np.polyfit(np.log(x), y, 1)\n```", "metadata": {"problem_id": 712, "library_problem_id": 1, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 0}}
{"id": 713, "code": "```python\nfrom scipy.optimize import curve_fit\n\ndef exp_func(x, A, B, C):\n    return A * np.exp(B * x) + C\n\nresult, _ = curve_fit(exp_func, x, y, p0=p0)\n```", "metadata": {"problem_id": 713, "library_problem_id": 2, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 0}}
{"id": 714, "code": "```python\nstatistic, p_value = stats.ks_2samp(x, y)\n```", "metadata": {"problem_id": 714, "library_problem_id": 3, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 3}}
{"id": 715, "code": "```python\nresult = stats.ks_2samp(x, y)[1] < alpha\n```", "metadata": {"problem_id": 715, "library_problem_id": 4, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 3}}
{"id": 716, "code": "```python\nresult = optimize.minimize(lambda x: ((x[0]+x[1]-x[2])-2)**2 + ((3*x[0]-x[1]-x[2])**2 + sin(x[1]) + cos(x[1]) + 4), initial_guess)\n```", "metadata": {"problem_id": 716, "library_problem_id": 5, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 5}}
{"id": 717, "code": "```python\np_values = scipy.stats.norm.cdf(z_scores)\n```", "metadata": {"problem_id": 717, "library_problem_id": 6, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 6}}
{"id": 718, "code": "```python\np_values = scipy.stats.norm.cdf(z_scores)\n```", "metadata": {"problem_id": 718, "library_problem_id": 7, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 6}}
{"id": 719, "code": "```python\nz_scores = -scipy.stats.norm.ppf(p_values)\n```", "metadata": {"problem_id": 719, "library_problem_id": 8, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 6}}
{"id": 720, "code": "```python\nresult = dist.cdf(x)\n```", "metadata": {"problem_id": 720, "library_problem_id": 9, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 9}}
{"id": 721, "code": "```python\nexpected_value = dist.mean()\nmedian = dist.median()\n```", "metadata": {"problem_id": 721, "library_problem_id": 10, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 9}}
{"id": 722, "code": "```python\nresult = sa.multiply(sb)\n```", "metadata": {"problem_id": 722, "library_problem_id": 11, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 11}}
{"id": 723, "code": "```python\nresult = sA.multiply(sB)\n```", "metadata": {"problem_id": 723, "library_problem_id": 12, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 11}}
{"id": 724, "code": "```python\ninterpolator = scipy.interpolate.LinearNDInterpolator(points, V)\nresult = interpolator(request)\n```", "metadata": {"problem_id": 724, "library_problem_id": 13, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 13}}
{"id": 725, "code": "```python\ninterpolator = scipy.interpolate.LinearNDInterpolator(points, V)\nresult = interpolator(request)\n```", "metadata": {"problem_id": 725, "library_problem_id": 14, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 13}}
{"id": 726, "code": "```python\nfrom scipy import misc\nfrom scipy.ndimage import rotate\nimport numpy as np\n\ndata_orig = misc.face()\nx0, y0 = 580, 300  # left eye; (xrot,yrot) should point there\nangle = np.random.randint(1, 360)\n\n# Calculate the center of the image\ncenter = np.array(data_orig.shape[:2]) / 2.0 - 0.5\n\n# Translate the point to the origin\ntranslated_point = np.array([x0, y0]) - center\n\n# Rotate the translated point\nrotated_point = rotate(translated_point, angle, reshape=False)\n\n# Translate the point back to the original position\nxrot, yrot = rotated_point + center\n\ndata_rot = rotate(data_orig, angle)\n```", "metadata": {"problem_id": 726, "library_problem_id": 15, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 15}}
{"id": 727, "code": "```python\nresult = M.diagonal()\n```", "metadata": {"problem_id": 727, "library_problem_id": 16, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 16}}
{"id": 728, "code": "```python\nresult = stats.kstest(times, lambda x: x/T)\n```", "metadata": {"problem_id": 728, "library_problem_id": 17, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 17}}
{"id": 729, "code": "```python\nresult = kstest(times, lambda x: x/T)\nreturn result\n```", "metadata": {"problem_id": 729, "library_problem_id": 18, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 17}}
{"id": 730, "code": "```python\nresult = kstest(times, lambda x: x/T).pvalue > 0.05\n```", "metadata": {"problem_id": 730, "library_problem_id": 19, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 17}}
{"id": 731, "code": "```python\nFeature = hstack([c1, c2]).tocsr()\n```", "metadata": {"problem_id": 731, "library_problem_id": 20, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 20}}
{"id": 732, "code": "```python\nFeature = hstack([c1, c2]).tocsr()\n```", "metadata": {"problem_id": 732, "library_problem_id": 21, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 20}}
{"id": 733, "code": "```python\nFeature = sparse.vstack((c1, c2))\n```", "metadata": {"problem_id": 733, "library_problem_id": 22, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 20}}
{"id": 734, "code": "```python\nresult = scipy.optimize.linear_sum_assignment(scipy.spatial.distance.cdist(points1, points2))\n```", "metadata": {"problem_id": 734, "library_problem_id": 23, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 23}}
{"id": 735, "code": "```python\nresult = scipy.optimize.linear_sum_assignment(scipy.spatial.distance_matrix(points1, points2))\n```", "metadata": {"problem_id": 735, "library_problem_id": 24, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 23}}
{"id": 736, "code": "```python\nb.eliminate_zeros()\n```", "metadata": {"problem_id": 736, "library_problem_id": 25, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 25}}
{"id": 737, "code": "```python\nbinary_img = img > threshold\nlabeled_array, num_features = ndimage.label(binary_img)\nresult = num_features\n```", "metadata": {"problem_id": 737, "library_problem_id": 26, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 26}}
{"id": 738, "code": "```python\nresult = len(ndimage.label(img < threshold)[0])\n```", "metadata": {"problem_id": 738, "library_problem_id": 27, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 26}}
{"id": 739, "code": "```python\nthreshold = 0.75\nbinary_img = img > threshold\nlabeled_array, num_features = ndimage.label(binary_img)\nresult = num_features\n```", "metadata": {"problem_id": 739, "library_problem_id": 28, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 26}}
{"id": 740, "code": "```python\nlabeled_array, num_features = ndimage.label(img > threshold)\ncenter_of_mass = ndimage.center_of_mass(img, labeled_array, range(1, num_features + 1))\ndistances = [(com[0], com[1]) for com in center_of_mass]\nresult = distances\n```", "metadata": {"problem_id": 740, "library_problem_id": 29, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 26}}
{"id": 741, "code": "```python\nsA += sA.T - sA.multiply(sA.T)\n```", "metadata": {"problem_id": 741, "library_problem_id": 30, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 30}}
{"id": 742, "code": "```python\nsA += sA.T - sA.multiply(sA.T)\n```", "metadata": {"problem_id": 742, "library_problem_id": 31, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 30}}
{"id": 743, "code": "```python\nfrom scipy import ndimage\n\n# Label connected components\nlabeled_array, num_features = ndimage.label(square)\n\n# Remove single pixel features\nsizes = ndimage.sum(square, labeled_array, range(num_features + 1))\nmask_sizes = sizes == 1\nremove_pixel_mask = mask_sizes[labeled_array]\ncleaned_array = square.copy()\ncleaned_array[remove_pixel_mask] = 0\n```", "metadata": {"problem_id": 743, "library_problem_id": 32, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 32}}
{"id": 744, "code": "```python\nsquare = scipy.ndimage.binary_erosion(square).astype(square.dtype)\n```", "metadata": {"problem_id": 744, "library_problem_id": 33, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 32}}
{"id": 745, "code": "```python\nmean = col.mean()\nstandard_deviation = col.std()\n```", "metadata": {"problem_id": 745, "library_problem_id": 34, "library": "Scipy", "test_case_cnt": 4, "perturbation_type": "Origin", "perturbation_origin_id": 34}}
{"id": 746, "code": "```python\ncol.max(), col.min()\n```", "metadata": {"problem_id": 746, "library_problem_id": 35, "library": "Scipy", "test_case_cnt": 4, "perturbation_type": "Semantic", "perturbation_origin_id": 34}}
{"id": 747, "code": "```python\nfrom scipy.stats import mode\n\nmedian = np.median(col.data[col.indices])\nmode_val, _ = mode(col.data[col.indices])\n```", "metadata": {"problem_id": 747, "library_problem_id": 36, "library": "Scipy", "test_case_cnt": 4, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 34}}
{"id": 748, "code": "```python\npopt, pcov = curve_fit(lambda x, *params: sum(params[i] * np.cos((i + 1) * np.pi / tau * x) for i in range(len(params))), z, Ua, p0=[0]*degree)\n```", "metadata": {"problem_id": 748, "library_problem_id": 37, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 37}}
{"id": 749, "code": "```python\nunique_ids = np.unique(example_array[example_array != 0])\nid_pairs = np.array([(i, j) for i in unique_ids for j in unique_ids if i < j])\ndistances = []\nfor id_pair in id_pairs:\n    id1, id2 = id_pair\n    coords1 = np.argwhere(example_array == id1)\n    coords2 = np.argwhere(example_array == id2)\n    min_distance = np.min(np.sqrt(np.sum((coords1[:, None] - coords2)**2, axis=2)))\n    distances.append([id1, id2, min_distance])\n\nresult = np.array(distances)\n```", "metadata": {"problem_id": 749, "library_problem_id": 38, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 38}}
{"id": 750, "code": "```python\nresult = scipy.spatial.distance.pdist(example_array.reshape(-1, 1), 'cityblock').reshape(-1, 2)\n```", "metadata": {"problem_id": 750, "library_problem_id": 39, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 38}}
{"id": 751, "code": "```python\nunique_ids = np.unique(example_array[example_array != 0])\nid_pairs = np.array([(i, j) for i in unique_ids for j in unique_ids if i < j])\ndistances = []\nfor id_pair in id_pairs:\n    id1, id2 = id_pair\n    coords1 = np.argwhere(example_array == id1)\n    coords2 = np.argwhere(example_array == id2)\n    min_distance = np.min(np.sqrt(np.sum((coords1[:, None] - coords2)**2, axis=2)))\n    distances.append([id1, id2, min_distance])\n\nresult = np.array(distances)\nprint(result)\n```", "metadata": {"problem_id": 751, "library_problem_id": 40, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 38}}
{"id": 752, "code": "```python\nresult = np.array([interpolate.splev(x_val, tck, der=0) for tck in tcks])\n```", "metadata": {"problem_id": 752, "library_problem_id": 41, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 41}}
{"id": 753, "code": "```python\nstatistic, critical_values, significance_level = ss.anderson_ksamp([x1, x2, x3, x4])\n```", "metadata": {"problem_id": 753, "library_problem_id": 42, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 42}}
{"id": 754, "code": "```python\nresult = ss.anderson_ksamp([x1, x2])[2] < 5\n```", "metadata": {"problem_id": 754, "library_problem_id": 43, "library": "Scipy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 42}}
{"id": 755, "code": "```python\ndef tau1(x, y):\n    tau, p_value = stats.kendalltau(x, y)\n    return tau\n\nfor col1 in A.columns:\n    for col2 in A.columns:\n        if col1 != col2:\n            A[f'{col1}{col2}'] = A[[col1, col2]].rolling(window=3).apply(lambda x: tau1(x[col1], x[col2]), raw=False)\n```", "metadata": {"problem_id": 755, "library_problem_id": 44, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 44}}
{"id": 756, "code": "```python\nresult = my_csr_matrix.nnz == 0\n```", "metadata": {"problem_id": 756, "library_problem_id": 45, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 45}}
{"id": 757, "code": "```python\nresult = my_lil_matrix.nnz == 0\n```", "metadata": {"problem_id": 757, "library_problem_id": 46, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 45}}
{"id": 758, "code": "```python\nresult = block_diag(*a)\n```", "metadata": {"problem_id": 758, "library_problem_id": 47, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 47}}
{"id": 759, "code": "```python\np_value = stats.ranksums(pre_course_scores, during_course_scores).pvalue\n```", "metadata": {"problem_id": 759, "library_problem_id": 48, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 48}}
{"id": 760, "code": "```python\np_value = f(pre_course_scores, during_course_scores).pvalue\n```", "metadata": {"problem_id": 760, "library_problem_id": 49, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 48}}
{"id": 761, "code": "```python\nkurtosis_result = np.mean(((a - np.mean(a)) / np.std(a))**4)\n```", "metadata": {"problem_id": 761, "library_problem_id": 50, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 50}}
{"id": 762, "code": "```python\nscipy.stats.kurtosis(a, fisher=True, bias=False)\n```", "metadata": {"problem_id": 762, "library_problem_id": 51, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 50}}
{"id": 763, "code": "```python\ninterpolated_function = scipy.interpolate.interp2d(x, y, z, kind='cubic')\nresult = interpolated_function(s, t).flatten()\n```", "metadata": {"problem_id": 763, "library_problem_id": 52, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 52}}
{"id": 764, "code": "```python\nresult = f(s, t).flatten()\n```", "metadata": {"problem_id": 764, "library_problem_id": 53, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 52}}
{"id": 765, "code": "```python\nresult = [vor.point_region[vor.find_simplex(point)] for point in extraPoints]\n```", "metadata": {"problem_id": 765, "library_problem_id": 54, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 54}}
{"id": 766, "code": "```python\nresult = [vor.point_region[vor.find_simplex(point)] for point in extraPoints]\n```", "metadata": {"problem_id": 766, "library_problem_id": 55, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 54}}
{"id": 767, "code": "```python\nsparse_matrix = sparse.csr_matrix(vectors)\n```", "metadata": {"problem_id": 767, "library_problem_id": 56, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 56}}
{"id": 768, "code": "```python\nb = scipy.ndimage.median_filter(a, size=3, origin=(-1, -1))\n```", "metadata": {"problem_id": 768, "library_problem_id": 57, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 57}}
{"id": 769, "code": "```python\nresult = M[row, column]\n```", "metadata": {"problem_id": 769, "library_problem_id": 58, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 58}}
{"id": 770, "code": "```python\nresult = M[row, column].toarray().flatten()\n```", "metadata": {"problem_id": 770, "library_problem_id": 59, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 58}}
{"id": 771, "code": "```python\nnew_array = scipy.interpolate.interpn((x, x, x), array, (x_new, x_new, x_new), method='linear')\n```", "metadata": {"problem_id": 771, "library_problem_id": 60, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 60}}
{"id": 772, "code": "```python\nprob = scipy.integrate.quad(NDfx, -dev, dev)[0]\n```", "metadata": {"problem_id": 772, "library_problem_id": 61, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 61}}
{"id": 773, "code": "```python\nP_inner = scipy.integrate.quad(NDfx, -dev, dev)[0]\n```", "metadata": {"problem_id": 773, "library_problem_id": 62, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 61}}
{"id": 774, "code": "```python\nresult = sf.dct(sf.eye(N), type=2, norm='ortho')\n```", "metadata": {"problem_id": 774, "library_problem_id": 63, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 63}}
{"id": 775, "code": "```python\nresult = sparse.diags(matrix, offsets=[-1, 0, 1]).toarray()\n```", "metadata": {"problem_id": 775, "library_problem_id": 64, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 64}}
{"id": 776, "code": "```python\nM = scipy.stats.binom.pmf(np.arange(N + 1), N, p).reshape(N + 1, 1) @ scipy.stats.binom.pmf(np.arange(N + 1), N, p)\n```", "metadata": {"problem_id": 776, "library_problem_id": 65, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 65}}
{"id": 777, "code": "```python\nresult = df.apply(stats.zscore, axis=1)\n```", "metadata": {"problem_id": 777, "library_problem_id": 66, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 66}}
{"id": 778, "code": "```python\nresult = df.apply(stats.zscore)\n```", "metadata": {"problem_id": 778, "library_problem_id": 67, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 66}}
{"id": 779, "code": "```python\nz_scores = df.apply(stats.zscore)\nresult = pd.concat([df, z_scores.add_prefix('zscore_')], axis=1)\n```", "metadata": {"problem_id": 779, "library_problem_id": 68, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 66}}
{"id": 780, "code": "```python\nz_scores = df.apply(stats.zscore, nan_policy='omit').round(3)\nresult = pd.concat([df.round(3), z_scores.add_prefix('zscore_')], axis=1)\n```", "metadata": {"problem_id": 780, "library_problem_id": 69, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 66}}
{"id": 781, "code": "```python\nresult = scipy.optimize.line_search(test_func, test_grad, starting_point, direction)[0]\n```", "metadata": {"problem_id": 781, "library_problem_id": 70, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 70}}
{"id": 782, "code": "```python\nmid = np.array([[shape[0]/2 - 0.5, shape[1]/2 - 0.5]])\nresult = distance.cdist(np.stack((np.arange(shape[0]), np.arange(shape[1]))).T, mid, 'euclidean').reshape(shape)\n```", "metadata": {"problem_id": 782, "library_problem_id": 71, "library": "Scipy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 71}}
{"id": 783, "code": "```python\nmid = np.array([[shape[0]//2, shape[1]//2]])\nresult = distance.cdist(np.indices(shape).reshape(-1, 2), mid, 'cityblock').reshape(shape)\n```", "metadata": {"problem_id": 783, "library_problem_id": 72, "library": "Scipy", "test_case_cnt": 3, "perturbation_type": "Semantic", "perturbation_origin_id": 71}}
{"id": 784, "code": "```python\nimport numpy as np\nfrom scipy.spatial import distance\n\ndef get_distance_2(y, x):\n    mid = np.array([[y.shape[0]/2, x.shape[1]/2]])\n    return distance.cdist(np.stack((y, x)).T, mid, 'euclidean').reshape(y.shape)\n\n# Example usage:\nshape = (6, 6)\nresult = get_distance_2(*np.indices(shape))\nprint(result)\n```", "metadata": {"problem_id": 784, "library_problem_id": 73, "library": "Scipy", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 71}}
{"id": 785, "code": "```python\nresult = scipy.ndimage.zoom(x, (shape[0]/x.shape[0], shape[1]/x.shape[1]), order=1)\n```", "metadata": {"problem_id": 785, "library_problem_id": 74, "library": "Scipy", "test_case_cnt": 4, "perturbation_type": "Origin", "perturbation_origin_id": 74}}
{"id": 786, "code": "```python\nout = scipy.optimize.least_squares(lambda x: a.dot(x**2) - y, x0)\n```", "metadata": {"problem_id": 786, "library_problem_id": 75, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 75}}
{"id": 787, "code": "```python\nresult = scipy.optimize.minimize(func, x0, args=(a,), method='L-BFGS-B', bounds=scipy.optimize.Bounds(lb=x_lower_bounds, ub=None))\nprint(result.x)\n```", "metadata": {"problem_id": 787, "library_problem_id": 76, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 75}}
{"id": 788, "code": "```python\ndef dN1_dt_time_varying(t, N1):\n    return -100 * N1 + np.sin(t)\n\nsol = solve_ivp(fun=dN1_dt_time_varying, t_span=time_span, y0=[N0,])\n\nresult = sol.y\n```", "metadata": {"problem_id": 788, "library_problem_id": 77, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 77}}
{"id": 789, "code": "```python\ndef dN1_dt_time_varying(t, N1):\n    return -100 * N1 + (t - np.sin(t)) if 0 < t < 2 * np.pi else 2 * np.pi\n\nsol = solve_ivp(fun=dN1_dt_time_varying, t_span=[0, 100e-3], y0=[N0,])\n\nresult = sol.y\n```", "metadata": {"problem_id": 789, "library_problem_id": 78, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 77}}
{"id": 790, "code": "```python\ndef dN1_dt_time_varying(t, N1):\n    return -100 * N1 - np.cos(t)\n\nsol = solve_ivp(fun=dN1_dt_time_varying, t_span=time_span, y0=[N0,])\n\nresult = sol.y\n```", "metadata": {"problem_id": 790, "library_problem_id": 79, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 77}}
{"id": 791, "code": "```python\nfor t in range(4):\n    def const(x):    \n        y = x[t] - x[t-1] - I[t]\n        return y\n    cons.append({'type':'ineq', 'fun': const})\n```", "metadata": {"problem_id": 791, "library_problem_id": 80, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 80}}
{"id": 792, "code": "```python\nresult = sparse.vstack((a,b))\n```", "metadata": {"problem_id": 792, "library_problem_id": 81, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 81}}
{"id": 793, "code": "```python\nresult = sparse.hstack((a, b))\n```", "metadata": {"problem_id": 793, "library_problem_id": 82, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 81}}
{"id": 794, "code": "```python\nresult = integrate.quad(lambda x: 2*x*c[n], low, high)[0]\n```", "metadata": {"problem_id": 794, "library_problem_id": 83, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 83}}
{"id": 795, "code": "```python\nimport scipy.integrate as integrate\n\ndef solve_integral(c):\n    eqn = lambda x: 2 * x * c\n    result, error = integrate.quad(eqn, 0, 1)\n    return result\n\nI = []\nfor n in range(len(c)):\n    result = solve_integral(c[n])\n    I.append(result)\n\nI = np.array(I)\n```", "metadata": {"problem_id": 795, "library_problem_id": 84, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 83}}
{"id": 796, "code": "```python\nV += x\n```", "metadata": {"problem_id": 796, "library_problem_id": 85, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 85}}
{"id": 797, "code": "```python\nV.data += x\n```", "metadata": {"problem_id": 797, "library_problem_id": 86, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 85}}
{"id": 798, "code": "```python\nV.data += x\nB = V + y\n```", "metadata": {"problem_id": 798, "library_problem_id": 87, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 85}}
{"id": 799, "code": "```python\nself.__WeightMatrix__.data[self.__WeightMatrix__.indices] *= 1 / Len\n```", "metadata": {"problem_id": 799, "library_problem_id": 88, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 88}}
{"id": 800, "code": "```python\nself.__WeightMatrix__.data[self.__WeightMatrix__.indices == Col] /= Len\n```", "metadata": {"problem_id": 800, "library_problem_id": 89, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 88}}
{"id": 801, "code": "```python\na = (a > 0).astype(int)\n```", "metadata": {"problem_id": 801, "library_problem_id": 90, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 90}}
{"id": 802, "code": "```python\na = (a > 0).astype(int)\n```", "metadata": {"problem_id": 802, "library_problem_id": 91, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 90}}
{"id": 803, "code": "```python\nfrom scipy.spatial.distance import cdist\nclosest_indices = np.argmin(cdist(data, centroids, 'euclidean'), axis=0)\n```", "metadata": {"problem_id": 803, "library_problem_id": 92, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 92}}
{"id": 804, "code": "```python\nfrom scipy.spatial import distance_matrix\n\n# Calculate the distance matrix between data points and centroids\ndist_matrix = distance_matrix(data, centroids)\n\n# Find the indices of the minimum distances\nclosest_indices = np.argmin(dist_matrix, axis=0)\n\n# Extract the closest points to each centroid\nresult = data[closest_indices]\n```", "metadata": {"problem_id": 804, "library_problem_id": 93, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 92}}
{"id": 805, "code": "```python\ndistances = scipy.spatial.distance.cdist(data, centroids, 'euclidean')\nsorted_indices = np.argsort(distances, axis=0)\nresult = sorted_indices[k-1]\n```", "metadata": {"problem_id": 805, "library_problem_id": 94, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 92}}
{"id": 806, "code": "```python\nresult = fsolve(lambda a: eqn(xdata[:, None], a, bdata), x0=np.zeros_like(xdata))\n```", "metadata": {"problem_id": 806, "library_problem_id": 95, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 95}}
{"id": 807, "code": "```python\nresult = []\nfor x, a in zip(xdata, adata):\n    sol = fsolve(eqn, x0=0.5, args=(a,))\n    sorted_sol = np.sort(sol)\n    result.append(sorted_sol[:2].tolist())\n```", "metadata": {"problem_id": 807, "library_problem_id": 96, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 95}}
{"id": 808, "code": "```python\nfrom scipy.stats import kstest, norm\nfrom scipy.integrate import quad\n\ndef bekkers_cdf(x, a, m, d):\n    cdf = lambda t: quad(lambda x: bekkers(x, a, m, d), range_start, t)[0]\n    return cdf(x)\n\nresult = kstest(sample_data, bekkers_cdf, args=(estimated_a, estimated_m, estimated_d))\n```", "metadata": {"problem_id": 808, "library_problem_id": 97, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 97}}
{"id": 809, "code": "```python\nfrom scipy.stats import kstest, norm\nfrom scipy.integrate import quad\n\ndef bekkers_cdf(x, a, m, d):\n    cdf = lambda t: quad(lambda x: bekkers(x, a, m, d), range_start, t)[0]\n    return cdf(x)\n\nresult = kstest(sample_data, bekkers_cdf, args=(estimated_a, estimated_m, estimated_d))[1] < 0.05\n```", "metadata": {"problem_id": 809, "library_problem_id": 98, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 97}}
{"id": 810, "code": "```python\nintegral_df = df['A'].rolling(window='25S').apply(lambda x: integrate.trapz(x, dx=x.index.to_series().diff().dt.total_seconds()), raw=False)\n```", "metadata": {"problem_id": 810, "library_problem_id": 99, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 99}}
{"id": 811, "code": "```python\nresult = scipy.interpolate.griddata(x, y, eval, method='linear')\n```", "metadata": {"problem_id": 811, "library_problem_id": 100, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 100}}
{"id": 812, "code": "```python\nfrom scipy.stats import multinomial\nfrom scipy.optimize import minimize\n\n# Define the negative log-likelihood function for multinomial distribution\ndef neg_log_likelihood(params, counts):\n    return -multinomial.logpmf(counts, n=sum(counts), p=params)\n\n# Extract the counts from the DataFrame\ncounts = a['A1'].value_counts().sort_index().values\n\n# Initial guess for the parameters\ninitial_params = np.ones(len(counts)) / len(counts)\n\n# Perform the optimization\nresult = minimize(neg_log_likelihood, initial_params, args=(counts))\n\n# Extract the optimized parameters\nweights = result.x\n\nprint(weights)\n```", "metadata": {"problem_id": 812, "library_problem_id": 101, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 101}}
{"id": 813, "code": "```python\npopt, _ = sciopt.minimize(e, pmin, method='bounded', bounds=[(0.5, 1.5), (0.5, 1.5)], args=(x, y))\n```", "metadata": {"problem_id": 813, "library_problem_id": 102, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 102}}
{"id": 814, "code": "```python\nresult = signal.argrelmin(arr, order=n)[0]\n```", "metadata": {"problem_id": 814, "library_problem_id": 103, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 103}}
{"id": 815, "code": "```python\nresult = []\nfor i in range(arr.shape[0]):\n    for j in range(arr.shape[1]):\n        if i == 0:\n            left = float('-inf')\n        else:\n            left = arr[i-1, max(0, j-n):min(arr.shape[1], j+n+1)].min()\n        if i == arr.shape[0]-1:\n            right = float('inf')\n        else:\n            right = arr[i+1, max(0, j-n):min(arr.shape[1], j+n+1)].min()\n        if j == 0:\n            up = float('-inf')\n        else:\n            up = arr[max(0, i-n):min(arr.shape[0], i+n+1), j-1].min()\n        if j == arr.shape[1]-1:\n            down = float('inf')\n        else:\n            down = arr[max(0, i-n):min(arr.shape[0], i+n+1), j+1].min()\n        if arr[i, j] <= min(left, right, up, down):\n            result.append([i, j])\n```", "metadata": {"problem_id": 815, "library_problem_id": 104, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 103}}
{"id": 816, "code": "```python\ndf = df[(np.abs(stats.zscore(df.select_dtypes(include=[np.number]))) < 3).all(axis=1)]\n```", "metadata": {"problem_id": 816, "library_problem_id": 105, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 105}}
{"id": 817, "code": "```python\ndata1 = pd.DataFrame(data.data, columns=data.feature_names)\n```", "metadata": {"problem_id": 817, "library_problem_id": 0, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 818, "code": "```python\ndata1 = pd.DataFrame(data.data, columns=data.feature_names)\n```", "metadata": {"problem_id": 818, "library_problem_id": 1, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 0}}
{"id": 819, "code": "```python\ndata1 = pd.DataFrame(data.data, columns=data.feature_names)\n```", "metadata": {"problem_id": 819, "library_problem_id": 2, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 0}}
{"id": 820, "code": "```python\ndata1 = pd.DataFrame(data.data, columns=data.feature_names)\n```", "metadata": {"problem_id": 820, "library_problem_id": 3, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 0}}
{"id": 821, "code": "```python\nfrom sklearn.preprocessing import MultiLabelBinarizer\n\nmlb = MultiLabelBinarizer()\none_hot_encoded = mlb.fit_transform(df['Col3'])\n\ndf_out = pd.concat([df.drop('Col3', axis=1), pd.DataFrame(one_hot_encoded, columns=mlb.classes_)], axis=1)\n```", "metadata": {"problem_id": 821, "library_problem_id": 4, "library": "Sklearn", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 4}}
{"id": 822, "code": "```python\ndf_out = pd.get_dummies(df, columns=['Col3']).groupby(level=0).sum()\n```", "metadata": {"problem_id": 822, "library_problem_id": 5, "library": "Sklearn", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 4}}
{"id": 823, "code": "```python\nfrom sklearn.preprocessing import MultiLabelBinarizer\n\nmlb = MultiLabelBinarizer()\none_hot_encoded = mlb.fit_transform(df.iloc[:, -1])\ndf_out = pd.concat([df.iloc[:, :-1], pd.DataFrame(one_hot_encoded, columns=mlb.classes_)], axis=1)\n```", "metadata": {"problem_id": 823, "library_problem_id": 6, "library": "Sklearn", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 4}}
{"id": 824, "code": "```python\ndf_out = pd.get_dummies(df.iloc[:, -1]).astype(int)\ndf = pd.concat([df.iloc[:, :-1], df_out], axis=1)\n```", "metadata": {"problem_id": 824, "library_problem_id": 7, "library": "Sklearn", "test_case_cnt": 4, "perturbation_type": "Semantic", "perturbation_origin_id": 4}}
{"id": 825, "code": "```python\ndf_out = pd.get_dummies(df.iloc[:, -1]).astype(int)\ndf = pd.concat([df.iloc[:, :-1], df_out], axis=1)\n```", "metadata": {"problem_id": 825, "library_problem_id": 8, "library": "Sklearn", "test_case_cnt": 4, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 4}}
{"id": 826, "code": "```python\nfrom sklearn.calibration import CalibratedClassifierCV\n\ncalibrated_model = CalibratedClassifierCV(svmmodel, cv=5)\ncalibrated_model.fit(X, y)\nproba = calibrated_model.predict_proba(x_test)[:, 1]\n```", "metadata": {"problem_id": 826, "library_problem_id": 9, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 9}}
{"id": 827, "code": "```python\ncalibrated_model = svm.calibration.CalibratedClassifierCV(model, cv=5)\ncalibrated_model.fit(X, y)\nproba = calibrated_model.predict_proba(x_predict)\n```", "metadata": {"problem_id": 827, "library_problem_id": 10, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 9}}
{"id": 828, "code": "```python\ndf_transformed = pd.DataFrame(transform_output.toarray())\ndf = pd.concat([df_origin, df_transformed], axis=1)\n```", "metadata": {"problem_id": 828, "library_problem_id": 11, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 11}}
{"id": 829, "code": "```python\ndf_transformed = pd.DataFrame(transform_output.toarray())\ndf = pd.concat([df_origin, df_transformed], axis=1)\n```", "metadata": {"problem_id": 829, "library_problem_id": 12, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 11}}
{"id": 830, "code": "```python\ntransform_output_df = pd.DataFrame(transform_output.toarray())\nresult = pd.concat([df_origin.reset_index(drop=True), transform_output_df], axis=1)\nreturn result\n```", "metadata": {"problem_id": 830, "library_problem_id": 13, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 11}}
{"id": 831, "code": "```python\nsteps = clf.named_steps.copy()\ndel steps['poly']\nclf.steps = steps.items()\n```", "metadata": {"problem_id": 831, "library_problem_id": 14, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 14}}
{"id": 832, "code": "```python\nsteps = clf.named_steps\ndel steps['dim_svm']\nclf.steps = list(steps.items())\n```", "metadata": {"problem_id": 832, "library_problem_id": 15, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 14}}
{"id": 833, "code": "```python\nsteps = clf.named_steps\ndel steps['pOly']\nclf.steps = list(steps.items())\n```", "metadata": {"problem_id": 833, "library_problem_id": 16, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 14}}
{"id": 834, "code": "```python\nsteps = clf.named_steps\ndel steps['poly']\nsteps['new_step'] = ('new_step', SVC())\n```", "metadata": {"problem_id": 834, "library_problem_id": 17, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 17}}
{"id": 835, "code": "```python\nsteps = clf.named_steps\ndel steps['dim_svm']\nsteps['new_step'] = SVC()\n```", "metadata": {"problem_id": 835, "library_problem_id": 18, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 17}}
{"id": 836, "code": "```python\nsteps = clf.named_steps\nsteps['new_step'] = ('t1919810', PCA())\nclf.steps = list(steps.items())\n```", "metadata": {"problem_id": 836, "library_problem_id": 19, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 17}}
{"id": 837, "code": "```python\nb = gridsearch.best_score_\nc = gridsearch.predict(testX)\n```", "metadata": {"problem_id": 837, "library_problem_id": 20, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 20}}
{"id": 838, "code": "```python\nbest_model = gridsearch.fit(trainX, trainY, **fit_params)\nb = best_model.best_score_\nc = best_model.predict(testX)\n```", "metadata": {"problem_id": 838, "library_problem_id": 21, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 20}}
{"id": 839, "code": "```python\nproba = []\nfor train_index, test_index in cv:\n    X_train, X_test = X[train_index], X[test_index]\n    y_train = y[train_index]\n    logreg.fit(X_train, y_train)\n    proba.extend(logreg.predict_proba(X_test))\n```", "metadata": {"problem_id": 839, "library_problem_id": 22, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 22}}
{"id": 840, "code": "```python\nproba = []\nfor train_index, test_index in cv:\n    X_train, X_test = X[train_index], X[test_index]\n    y_train, y_test = y[train_index], y[test_index]\n    logreg.fit(X_train, y_train)\n    proba.extend(logreg.predict_proba(X_test)[:, 1])\n```", "metadata": {"problem_id": 840, "library_problem_id": 23, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 22}}
{"id": 841, "code": "```python\ninversed = scaler.inverse_transform(predicted_t_prime)\n```", "metadata": {"problem_id": 841, "library_problem_id": 24, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 24}}
{"id": 842, "code": "```python\ninverse_scaled = scaler.inverse_transform(scaled)\n```", "metadata": {"problem_id": 842, "library_problem_id": 25, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 24}}
{"id": 843, "code": "```python\nmodel_name = type(model).__name__\n```", "metadata": {"problem_id": 843, "library_problem_id": 26, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 26}}
{"id": 844, "code": "```python\nmodel_name = type(model).__name__\n```", "metadata": {"problem_id": 844, "library_problem_id": 27, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 26}}
{"id": 845, "code": "```python\nmodel_name = model.__class__.__name__\n```", "metadata": {"problem_id": 845, "library_problem_id": 28, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 26}}
{"id": 846, "code": "```python\ntf_idf_out = pipe.named_steps[\"tf_idf\"].transform(data.test)\n```", "metadata": {"problem_id": 846, "library_problem_id": 29, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 29}}
{"id": 847, "code": "```python\ntf_idf_out = pipe.named_steps[\"tf_idf\"].transform(data.test)\n```", "metadata": {"problem_id": 847, "library_problem_id": 30, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 29}}
{"id": 848, "code": "```python\nselect_out = pipe.named_steps['select'].transform(data)\n```", "metadata": {"problem_id": 848, "library_problem_id": 31, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 29}}
{"id": 849, "code": "```python\nclf = GridSearchCV(bc, param_grid, cv=5)\nclf.fit(X_train, y_train)\nproba = clf.predict_proba(X_test)\n```", "metadata": {"problem_id": 849, "library_problem_id": 32, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 32}}
{"id": 850, "code": "```python\ny = y.reshape(-1, 1)\n```", "metadata": {"problem_id": 850, "library_problem_id": 33, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 33}}
{"id": 851, "code": "```python\ny = y.reshape(-1, 1)\n```", "metadata": {"problem_id": 851, "library_problem_id": 34, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 33}}
{"id": 852, "code": "```python\ntfidf = TfidfVectorizer(preprocessor=preprocess)\n```", "metadata": {"problem_id": 852, "library_problem_id": 35, "library": "Sklearn", "test_case_cnt": 0, "perturbation_type": "Origin", "perturbation_origin_id": 35}}
{"id": 853, "code": "```python\ndef prePro(text):\n    return text.lower()\n\ntfidf = TfidfVectorizer(preprocessor=prePro)\n```", "metadata": {"problem_id": 853, "library_problem_id": 36, "library": "Sklearn", "test_case_cnt": 0, "perturbation_type": "Semantic", "perturbation_origin_id": 35}}
{"id": 854, "code": "```python\ndf_out = pd.DataFrame(preprocessing.scale(data), index=data.index, columns=data.columns)\n```", "metadata": {"problem_id": 854, "library_problem_id": 37, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 37}}
{"id": 855, "code": "```python\nscaler = preprocessing.StandardScaler().fit(data)\ndf_out = pd.DataFrame(scaler.transform(data), index=data.index, columns=data.columns)\n```", "metadata": {"problem_id": 855, "library_problem_id": 38, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 37}}
{"id": 856, "code": "```python\nbest_model = grid.best_estimator_\ncoef = best_model.named_steps['model'].coef_\n```", "metadata": {"problem_id": 856, "library_problem_id": 39, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 39}}
{"id": 857, "code": "```python\nbest_pipe = grid.best_estimator_\ncoef = best_pipe.named_steps['model'].coef_\n```", "metadata": {"problem_id": 857, "library_problem_id": 40, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 39}}
{"id": 858, "code": "```python\nselected_features = X.columns[model.get_support()]\n```", "metadata": {"problem_id": 858, "library_problem_id": 41, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 41}}
{"id": 859, "code": "```python\nselected_features = X.columns[(model.get_support())]\n```", "metadata": {"problem_id": 859, "library_problem_id": 42, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 41}}
{"id": 860, "code": "```python\nselected_features = X.columns[model.get_support()]\n```", "metadata": {"problem_id": 860, "library_problem_id": 43, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 41}}
{"id": 861, "code": "```python\nselected_features = X.columns[model.get_support()]\n```", "metadata": {"problem_id": 861, "library_problem_id": 44, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 41}}
{"id": 862, "code": "```python\nclosest_50_samples = km.cluster_centers_[p]\n```", "metadata": {"problem_id": 862, "library_problem_id": 45, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 45}}
{"id": 863, "code": "```python\nclosest_50_samples = km.cluster_centers_[p]\n```", "metadata": {"problem_id": 863, "library_problem_id": 46, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 45}}
{"id": 864, "code": "```python\nclosest_100_samples = km.cluster_centers_[p] + np.sort(np.linalg.norm(X - km.cluster_centers_[p], axis=1))[:100]\n```", "metadata": {"problem_id": 864, "library_problem_id": 47, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 45}}
{"id": 865, "code": "```python\n    distances, indices = km.transform(X).argsort()[:, ::-1]\n    return X[indices[p, :50]]\n```", "metadata": {"problem_id": 865, "library_problem_id": 48, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 45}}
{"id": 866, "code": "```python\nX_train = pd.get_dummies(X_train)\n```", "metadata": {"problem_id": 866, "library_problem_id": 49, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 49}}
{"id": 867, "code": "```python\nX_train = pd.get_dummies(X_train)\n```", "metadata": {"problem_id": 867, "library_problem_id": 50, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 49}}
{"id": 868, "code": "```python\nfrom sklearn.svm import SVR\nsvr = SVR(kernel='rbf')\nsvr.fit(X, y)\npredict = svr.predict(X)\n```", "metadata": {"problem_id": 868, "library_problem_id": 51, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 51}}
{"id": 869, "code": "```python\nfrom sklearn.svm import SVR\nsvr = SVR(kernel='rbf')\nsvr.fit(X, y)\npredict = svr.predict(X)\n```", "metadata": {"problem_id": 869, "library_problem_id": 52, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 51}}
{"id": 870, "code": "```python\nfrom sklearn.svm import SVR\nsvr = SVR(kernel='poly', degree=2)\nsvr.fit(X, y)\npredict = svr.predict(X)\n```", "metadata": {"problem_id": 870, "library_problem_id": 53, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 51}}
{"id": 871, "code": "```python\nfrom sklearn.svm import SVR\nsvr = SVR(kernel='poly', degree=2)\nsvr.fit(X, y)\npredict = svr.predict(X)\n```", "metadata": {"problem_id": 871, "library_problem_id": 54, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 53}}
{"id": 872, "code": "```python\nquery_tfidf = tfidf.transform(queries)\ncosine_similarities_of_queries = query_tfidf * tfidf.T\n```", "metadata": {"problem_id": 872, "library_problem_id": 55, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 55}}
{"id": 873, "code": "```python\nquery_tfidf = tfidf.transform(queries)\ncosine_similarities_of_queries = query_tfidf * tfidf.T\n```", "metadata": {"problem_id": 873, "library_problem_id": 56, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 55}}
{"id": 874, "code": "```python\nquery_tfidf = tfidf.transform(queries)\ncosine_similarities_of_queries = query_tfidf * tfidf.T\nreturn cosine_similarities_of_queries.toarray()\n### END SOLUTION\n```", "metadata": {"problem_id": 874, "library_problem_id": 57, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 55}}
{"id": 875, "code": "```python\nfrom sklearn.preprocessing import MultiLabelBinarizer\n\nmlb = MultiLabelBinarizer()\nnew_features = mlb.fit_transform(features)\n```", "metadata": {"problem_id": 875, "library_problem_id": 58, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 58}}
{"id": 876, "code": "```python\nfrom sklearn.preprocessing import MultiLabelBinarizer\n\nmlb = MultiLabelBinarizer()\nnew_f = mlb.fit_transform(f)\n```", "metadata": {"problem_id": 876, "library_problem_id": 59, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 58}}
{"id": 877, "code": "```python\nfrom sklearn.preprocessing import MultiLabelBinarizer\n\nmlb = MultiLabelBinarizer()\nnew_features = mlb.fit_transform(features)\n```", "metadata": {"problem_id": 877, "library_problem_id": 60, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 58}}
{"id": 878, "code": "```python\nfrom sklearn.preprocessing import MultiLabelBinarizer\n\nmlb = MultiLabelBinarizer()\nnew_features = mlb.fit_transform(features)\n```", "metadata": {"problem_id": 878, "library_problem_id": 61, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 58}}
{"id": 879, "code": "```python\nfrom sklearn.preprocessing import MultiLabelBinarizer\n\nmlb = MultiLabelBinarizer()\nnew_features = mlb.fit_transform(f)\n```", "metadata": {"problem_id": 879, "library_problem_id": 62, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 58}}
{"id": 880, "code": "```python\nfrom sklearn.cluster import AgglomerativeClustering\nimport numpy as np\n\n# Assuming data_matrix is already defined\ndata_matrix = np.array([[0, 0.8, 0.9], [0.8, 0, 0.2], [0.9, 0.2, 0]])\n\n# Perform hierarchical clustering\nclustering_model = AgglomerativeClustering(n_clusters=2, affinity='precomputed', linkage='complete')\ncluster_labels = clustering_model.fit_predict(data_matrix)\n\nprint(cluster_labels.tolist())\n```", "metadata": {"problem_id": 880, "library_problem_id": 63, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 63}}
{"id": 881, "code": "```python\nfrom sklearn.cluster import AgglomerativeClustering\ncluster_labels = AgglomerativeClustering(n_clusters=2, affinity='precomputed', linkage='complete').fit_predict(data_matrix)\n```", "metadata": {"problem_id": 881, "library_problem_id": 64, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 63}}
{"id": 882, "code": "```python\nfrom sklearn.cluster import AgglomerativeClustering\nimport numpy as np\n\n# Assuming simM is already defined as per the problem statement\nsimM = np.array([[0, 0.6, 0.8], [0.6, 0, 0.111], [0.8, 0.111, 0]])\n\n# Convert similarity matrix to distance matrix\ndistM = 1 - simM\n\n# Perform hierarchical clustering\nclustering = AgglomerativeClustering(n_clusters=2, affinity='precomputed', linkage='complete')\ncluster_labels = clustering.fit_predict(distM)\n\nprint(cluster_labels)\n```", "metadata": {"problem_id": 882, "library_problem_id": 65, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 63}}
{"id": 883, "code": "```python\nfrom scipy.cluster.hierarchy import linkage, fcluster\nfrom scipy.spatial.distance import squareform\n\n# Convert the distance matrix to a condensed format required by linkage\ncondensed_matrix = squareform(data_matrix)\n\n# Perform hierarchical clustering\nZ = linkage(condensed_matrix, 'ward')\n\n# Assign cluster labels\ncluster_labels = fcluster(Z, t=2, criterion='maxclust')\n```", "metadata": {"problem_id": 883, "library_problem_id": 66, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 66}}
{"id": 884, "code": "```python\nfrom scipy.cluster.hierarchy import linkage, fcluster\nlinkage_matrix = linkage(data_matrix, 'single')\ncluster_labels = fcluster(linkage_matrix, t=2, criterion='maxclust')\n```", "metadata": {"problem_id": 884, "library_problem_id": 67, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 66}}
{"id": 885, "code": "```python\nfrom scipy.cluster.hierarchy import linkage, fcluster\nlinkage_matrix = linkage(simM, 'single')\ncluster_labels = fcluster(linkage_matrix, t=2, criterion='maxclust')\n```", "metadata": {"problem_id": 885, "library_problem_id": 68, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 66}}
{"id": 886, "code": "```python\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\ncentered_scaled_data = scaler.fit_transform(data)\n```", "metadata": {"problem_id": 886, "library_problem_id": 69, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 69}}
{"id": 887, "code": "```python\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\ncentered_scaled_data = scaler.fit_transform(data)\n```", "metadata": {"problem_id": 887, "library_problem_id": 70, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 69}}
{"id": 888, "code": "```python\nfrom sklearn.preprocessing import PowerTransformer\n\npt = PowerTransformer(method='box-cox', standardize=True)\nbox_cox_data = pt.fit_transform(data)\n```", "metadata": {"problem_id": 888, "library_problem_id": 71, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 71}}
{"id": 889, "code": "```python\nfrom sklearn.preprocessing import PowerTransformer\n\npt = PowerTransformer(method='box-cox', standardize=False)\nbox_cox_data = pt.fit_transform(data)\n```", "metadata": {"problem_id": 889, "library_problem_id": 72, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 71}}
{"id": 890, "code": "```python\nfrom sklearn.preprocessing import PowerTransformer\n\npt = PowerTransformer(method='yeo-johnson', standardize=False)\nyeo_johnson_data = pt.fit_transform(data)\n```", "metadata": {"problem_id": 890, "library_problem_id": 73, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 73}}
{"id": 891, "code": "```python\nfrom sklearn.preprocessing import PowerTransformer\n\npt = PowerTransformer(method='yeo-johnson', standardize=False)\nyeo_johnson_data = pt.fit_transform(data)\n```", "metadata": {"problem_id": 891, "library_problem_id": 74, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 73}}
{"id": 892, "code": "```python\nvectorizer = CountVectorizer(token_pattern=r\"(?u)\\b\\w+\\b\")\ntransformed_text = vectorizer.fit_transform(text)\n```", "metadata": {"problem_id": 892, "library_problem_id": 75, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 75}}
{"id": 893, "code": "```python\nfrom sklearn.model_selection import train_test_split\n\nx = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values\n\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)\n```", "metadata": {"problem_id": 893, "library_problem_id": 76, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 76}}
{"id": 894, "code": "```python\nfrom sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(data.iloc[:, :-1], data.iloc[:, -1], test_size=0.2, random_state=42)\n```", "metadata": {"problem_id": 894, "library_problem_id": 77, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 76}}
{"id": 895, "code": "```python\nfrom sklearn.model_selection import train_test_split\n\n# Splitting the dataset into training and testing sets (3:2 ratio)\nx_train, x_test, y_train, y_test = train_test_split(dataset.iloc[:, :-1], dataset.iloc[:, -1], test_size=0.4, random_state=42)\n\n# Further splitting the training and testing sets into validation and test sets (50/50)\nx_val, x_test, y_val, y_test = train_test_split(x_test, y_test, test_size=0.5, random_state=42)\n```", "metadata": {"problem_id": 895, "library_problem_id": 78, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 76}}
{"id": 896, "code": "```python\nfrom sklearn.model_selection import train_test_split\n\nx = dataset.iloc[:, :-1]\ny = dataset.iloc[:, -1]\n\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)\n```", "metadata": {"problem_id": 896, "library_problem_id": 79, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 76}}
{"id": 897, "code": "```python\nlabels = kmeans.labels_\n```", "metadata": {"problem_id": 897, "library_problem_id": 80, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 80}}
{"id": 898, "code": "```python\nlabels = kmeans.labels_\n```", "metadata": {"problem_id": 898, "library_problem_id": 81, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 80}}
{"id": 899, "code": "```python\nselected_feature_names = np.asarray(vectorizer.get_feature_names())[LinearSVC(penalty='l1').fit(X, y).coef_.flatten().nonzero()[0]]\n```", "metadata": {"problem_id": 899, "library_problem_id": 82, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 82}}
{"id": 900, "code": "```python\nmodel = LinearSVC(penalty='l1', dual=False)\nmodel.fit(X, y)\nselected_features = np.where(model.coef_[0] != 0)[0]\nselected_feature_names = np.asarray(vectorizer.get_feature_names())[selected_features]\n```", "metadata": {"problem_id": 900, "library_problem_id": 83, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 82}}
{"id": 901, "code": "```python\nmodel = LinearSVC(penalty='l1', dual=False)\nmodel.fit(X, y)\nselected_indices = np.where(model.coef_[0] != 0)[0]\nselected_feature_names = np.asarray(vectorizer.get_feature_names())[selected_indices]\nreturn selected_feature_names\n```", "metadata": {"problem_id": 901, "library_problem_id": 84, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 82}}
{"id": 902, "code": "```python\nfeature_names = sorted(vectorizer.vocabulary_, key=lambda word: vectorizer.vocabulary_[word])\nX = vectorizer.fit_transform(corpus)\n```", "metadata": {"problem_id": 902, "library_problem_id": 85, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 85}}
{"id": 903, "code": "```python\nfeature_names = sorted(vectorizer.vocabulary_, key=lambda word: vectorizer.vocabulary_[word])\nX = vectorizer.fit_transform(corpus)\n```", "metadata": {"problem_id": 903, "library_problem_id": 86, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 85}}
{"id": 904, "code": "```python\nfeature_names = list(vectorizer.vocabulary_.keys())\nX = vectorizer.fit_transform(corpus)\n```", "metadata": {"problem_id": 904, "library_problem_id": 87, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 85}}
{"id": 905, "code": "```python\nfeature_names = list(vectorizer.vocabulary_.keys())\nX = vectorizer.fit_transform(corpus)\n```", "metadata": {"problem_id": 905, "library_problem_id": 88, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 85}}
{"id": 906, "code": "```python\nslopes = []\nfor col in df1.columns:\n    if col != 'Time':\n        df2 = df1[~np.isnan(df1[col])]\n        if len(df2) > 1:\n            df3 = df2[['Time', col]]\n            npMatrix = np.matrix(df3)\n            X, Y = npMatrix[:, 0], npMatrix[:, 1]\n            slope = LinearRegression().fit(X, Y)\n            m = slope.coef_[0]\n            slopes.append(m)\n```", "metadata": {"problem_id": 906, "library_problem_id": 89, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 89}}
{"id": 907, "code": "```python\nslopes = []\nfor col in df1.columns:\n    if col != 'Time':\n        df2 = df1[~np.isnan(df1[col])]\n        df3 = df2[['Time', col]]\n        npMatrix = np.matrix(df3)\n        X, Y = npMatrix[:, 0], npMatrix[:, 1]\n        slope = LinearRegression().fit(X, Y)\n        m = slope.coef_[0]\n        slopes.append(m)\nslopes = np.array(slopes)\n```", "metadata": {"problem_id": 907, "library_problem_id": 90, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 89}}
{"id": 908, "code": "```python\nenc = LabelEncoder()\ndf['Sex'] = enc.fit_transform(df['Sex'])\n```", "metadata": {"problem_id": 908, "library_problem_id": 91, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 91}}
{"id": 909, "code": "```python\nenc = LabelEncoder()\ndf['Sex'] = enc.fit_transform(df['Sex'])\n```", "metadata": {"problem_id": 909, "library_problem_id": 92, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 91}}
{"id": 910, "code": "```python\nenc = LabelEncoder()\ndf['Sex'] = enc.fit_transform(df['Sex'])\n```", "metadata": {"problem_id": 910, "library_problem_id": 93, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 91}}
{"id": 911, "code": "```python\ntraining_set_score = ElasticNet.score(X_train, y_train)\ntest_set_score = ElasticNet.score(X_test, y_test)\n```", "metadata": {"problem_id": 911, "library_problem_id": 94, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 94}}
{"id": 912, "code": "```python\ntransformed = MinMaxScaler().fit_transform(np_array.reshape(-1, 1)).reshape(2, 2)\n```", "metadata": {"problem_id": 912, "library_problem_id": 95, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 95}}
{"id": 913, "code": "```python\ntransformed = MinMaxScaler().fit_transform(np_array.reshape(-1, 1)).reshape(3, 3)\n```", "metadata": {"problem_id": 913, "library_problem_id": 96, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 95}}
{"id": 914, "code": "```python\nscaler = MinMaxScaler().fit(a.reshape(-1, 1))\nnew_a = scaler.transform(a.reshape(-1, 1)).reshape(a.shape)\n```", "metadata": {"problem_id": 914, "library_problem_id": 97, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 95}}
{"id": 915, "code": "```python\npredict = clf.predict(b)\n```", "metadata": {"problem_id": 915, "library_problem_id": 98, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 98}}
{"id": 916, "code": "```python\nnew_X = [['asdf', '1'], ['asdf', '0']]\nnew_X = np.array(new_X)\nclf.fit(new_X, ['2', '3'])\n```", "metadata": {"problem_id": 916, "library_problem_id": 99, "library": "Sklearn", "test_case_cnt": 0, "perturbation_type": "Origin", "perturbation_origin_id": 99}}
{"id": 917, "code": "```python\nX = [['asdf', '1'], ['asdf', '0']]\ny = ['2', '3']\n\n# Convert string labels to numerical values\nlabel_encoder = LabelEncoder()\ny_encoded = label_encoder.fit_transform(y)\n\nclf = DecisionTreeClassifier()\nclf.fit(X, y_encoded)\n\n# Example prediction\nnew_X = [['asdf', '1']]\nnew_y_pred_encoded = clf.predict(new_X)\nnew_y_pred = label_encoder.inverse_transform(new_y_pred_encoded)\nprint(new_y_pred)\n```", "metadata": {"problem_id": 917, "library_problem_id": 100, "library": "Sklearn", "test_case_cnt": 0, "perturbation_type": "Surface", "perturbation_origin_id": 99}}
{"id": 918, "code": "```python\nnew_X = [['dsa', '2'], ['sato', '3']]\nnew_X = [[int(item[1]) for item in row] for row in new_X]\nclf.fit(new_X, [4, 5])\n```", "metadata": {"problem_id": 918, "library_problem_id": 101, "library": "Sklearn", "test_case_cnt": 0, "perturbation_type": "Surface", "perturbation_origin_id": 99}}
{"id": 919, "code": "```python\nX = dataframe.iloc[:-1].astype(float).values.reshape(-1, 1)\ny = dataframe.iloc[-1:, -1].values.reshape(-1, 1)\nlogReg.fit(X, y.flatten())\npredict = logReg.predict([[some_value]])  # Replace some_value with the actual value you want to predict\n```", "metadata": {"problem_id": 919, "library_problem_id": 102, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 102}}
{"id": 920, "code": "```python\nX = dataframe.iloc[:, :-1].astype(float)\ny = dataframe.iloc[:, -1].astype(int)\n\nlogReg = LogisticRegression()\nlogReg.fit(X, y)\n\npredict = logReg.predict(X)\n```", "metadata": {"problem_id": 920, "library_problem_id": 103, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 102}}
{"id": 921, "code": "```python\nsplit_index = int(len(features_dataframe) * (1 - train_size))\ntrain_dataframe = features_dataframe.iloc[:split_index]\ntest_dataframe = features_dataframe.iloc[split_index:]\n```", "metadata": {"problem_id": 921, "library_problem_id": 104, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 104}}
{"id": 922, "code": "```python\nsplit_index = int(len(features_dataframe) * (1 - train_size))\ntrain_dataframe = features_dataframe.iloc[:split_index]\ntest_dataframe = features_dataframe.iloc[split_index:]\n```", "metadata": {"problem_id": 922, "library_problem_id": 105, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 104}}
{"id": 923, "code": "```python\nsplit_index = int(len(features_dataframe) * (1 - train_size))\ntrain_dataframe = features_dataframe.iloc[:split_index]\ntest_dataframe = features_dataframe.iloc[split_index:]\n```", "metadata": {"problem_id": 923, "library_problem_id": 106, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 104}}
{"id": 924, "code": "```python\ndf['X2_scale'], df['X3_scale'] = zip(*df.groupby('Month').apply(lambda x: scaler.fit_transform(x[['X2', 'X3']])))\n```", "metadata": {"problem_id": 924, "library_problem_id": 107, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 107}}
{"id": 925, "code": "```python\nmyData['new_A2'] = myData.groupby('Month')['A2'].transform(lambda x: scaler.fit_transform(x.values.reshape(-1, 1)).flatten())\nmyData['new_A3'] = myData.groupby('Month')['A3'].transform(lambda x: scaler.fit_transform(x.values.reshape(-1, 1)).flatten())\n```", "metadata": {"problem_id": 925, "library_problem_id": 108, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 107}}
{"id": 926, "code": "```python\nfeature_names = count.get_feature_names_out()\n```", "metadata": {"problem_id": 926, "library_problem_id": 109, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 109}}
{"id": 927, "code": "```python\nfeature_names = count.get_feature_names_out()\n```", "metadata": {"problem_id": 927, "library_problem_id": 110, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 109}}
{"id": 928, "code": "```python\nfull_results = pd.DataFrame(GridSearch_fitted.cv_results_)\n```", "metadata": {"problem_id": 928, "library_problem_id": 111, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 111}}
{"id": 929, "code": "```python\nfull_results = pd.DataFrame(GridSearch_fitted.cv_results_)\nsorted_full_results = full_results.sort_values(by='mean_fit_time')\n```", "metadata": {"problem_id": 929, "library_problem_id": 112, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 111}}
{"id": 930, "code": "```python\nfrom sklearn.externals import joblib\njoblib.dump(fitted_model, 'isolation_forest_model.pkl')\n```", "metadata": {"problem_id": 930, "library_problem_id": 113, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 113}}
{"id": 931, "code": "```python\ncosine_similarity_matrix = cosine_similarity(tfidf_matrix, tfidf_matrix)\n```", "metadata": {"problem_id": 931, "library_problem_id": 114, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 114}}
{"id": 932, "code": "```python\nfor param_group in optim.param_groups:\n    param_group['lr'] = 0.001\n```", "metadata": {"problem_id": 932, "library_problem_id": 0, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 933, "code": "```python\nfor param_group in optim.param_groups:\n    param_group['lr'] = 0.001\n```", "metadata": {"problem_id": 933, "library_problem_id": 1, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 0}}
{"id": 934, "code": "```python\nfor param_group in optim.param_groups:\n    param_group['lr'] = 0.0005\n```", "metadata": {"problem_id": 934, "library_problem_id": 2, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 0}}
{"id": 935, "code": "```python\nfor param_group in optim.param_groups:\n    param_group['lr'] = 0.0005\n```", "metadata": {"problem_id": 935, "library_problem_id": 3, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 0}}
{"id": 936, "code": "```python\nembedding_weights = torch.FloatTensor(word2vec.wv.vectors)\nembedded_input = torch.nn.Embedding.from_pretrained(embedding_weights)\n```", "metadata": {"problem_id": 936, "library_problem_id": 4, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 4}}
{"id": 937, "code": "```python\nembedding_weights = torch.FloatTensor(word2vec.wv.vectors)\nembedding_layer = torch.nn.Embedding.from_pretrained(embedding_weights)\nembedded_input = embedding_layer(input_Tensor)\n```", "metadata": {"problem_id": 937, "library_problem_id": 5, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 4}}
{"id": 938, "code": "```python\npx = pd.DataFrame(x.numpy())\n```", "metadata": {"problem_id": 938, "library_problem_id": 6, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 6}}
{"id": 939, "code": "```python\npx = pd.DataFrame(x.numpy())\n```", "metadata": {"problem_id": 939, "library_problem_id": 7, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 6}}
{"id": 940, "code": "```python\npx = pd.DataFrame(x.numpy())\n```", "metadata": {"problem_id": 940, "library_problem_id": 8, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 6}}
{"id": 941, "code": "```python\nC = B[:, A_log.nonzero(as_tuple=True)[1]]\n```", "metadata": {"problem_id": 941, "library_problem_id": 9, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 9}}
{"id": 942, "code": "```python\nC = B[:, A_logical.nonzero(as_tuple=True)[1]]\n```", "metadata": {"problem_id": 942, "library_problem_id": 10, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 9}}
{"id": 943, "code": "```python\nC = B[:, A_log.nonzero(as_tuple=True)[1]]\n```", "metadata": {"problem_id": 943, "library_problem_id": 11, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 9}}
{"id": 944, "code": "```python\nC = B[:, A_log.nonzero(as_tuple=True)[1]]\n```", "metadata": {"problem_id": 944, "library_problem_id": 12, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Semantic", "perturbation_origin_id": 9}}
{"id": 945, "code": "```python\nC = B[:, A_log.nonzero(as_tuple=True)[1]]\n```", "metadata": {"problem_id": 945, "library_problem_id": 13, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 9}}
{"id": 946, "code": "```python\nC = B[:, A_log.nonzero(as_tuple=True)[1]]\n```", "metadata": {"problem_id": 946, "library_problem_id": 14, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 9}}
{"id": 947, "code": "```python\nC = torch.index_select(B, 1, idx)\n```", "metadata": {"problem_id": 947, "library_problem_id": 15, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 9}}
{"id": 948, "code": "```python\nx_tensor = torch.tensor(x_array.tolist(), dtype=torch.float16)\n```", "metadata": {"problem_id": 948, "library_problem_id": 16, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 16}}
{"id": 949, "code": "```python\nx_tensor = torch.tensor(x.tolist(), dtype=torch.float32)\n```", "metadata": {"problem_id": 949, "library_problem_id": 17, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 16}}
{"id": 950, "code": "```python\nimport torch\nimport numpy as np\n\ndef Convert(a):\n    # Flatten the array and stack it into a single tensor\n    flat_list = [item.flatten() for sublist in a for item in sublist]\n    tensor = torch.tensor(flat_list, dtype=torch.float16)\n    return tensor.view(len(a), -1)\n```", "metadata": {"problem_id": 950, "library_problem_id": 18, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 16}}
{"id": 951, "code": "```python\nmask = torch.arange(max(lens)).expand(len(lens), -1) < torch.tensor(lens).unsqueeze(-1)\n```", "metadata": {"problem_id": 951, "library_problem_id": 19, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 19}}
{"id": 952, "code": "```python\nmask = torch.arange(max(lens)).expand(len(lens), -1) < torch.tensor(lens).unsqueeze(-1)\n```", "metadata": {"problem_id": 952, "library_problem_id": 20, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 19}}
{"id": 953, "code": "```python\nmask = torch.arange(max(lens)).expand(len(lens), -1) < torch.tensor(lens).unsqueeze(-1)\n```", "metadata": {"problem_id": 953, "library_problem_id": 21, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 19}}
{"id": 954, "code": "```python\nimport torch\n\ndef get_mask(lens):\n    max_len = max(lens)\n    mask = torch.arange(max_len).expand(len(lens), -1) < torch.tensor(lens).unsqueeze(-1)\n    return mask.long()\n```", "metadata": {"problem_id": 954, "library_problem_id": 22, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 19}}
{"id": 955, "code": "```python\nTensor_3D = torch.stack([torch.diag(diag_ele) for diag_ele in Tensor_2D])\n```", "metadata": {"problem_id": 955, "library_problem_id": 23, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 23}}
{"id": 956, "code": "```python\nresult = torch.diag_embed(diag_ele)\n```", "metadata": {"problem_id": 956, "library_problem_id": 24, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 23}}
{"id": 957, "code": "```python\nab = torch.cat((a.unsqueeze(0), b.unsqueeze(0)), dim=0)\n```", "metadata": {"problem_id": 957, "library_problem_id": 25, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 25}}
{"id": 958, "code": "```python\nab = torch.cat((a, b), dim=0)\n```", "metadata": {"problem_id": 958, "library_problem_id": 26, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 25}}
{"id": 959, "code": "```python\nab = torch.cat((a.unsqueeze(0), b.unsqueeze(0)), dim=0)\n```", "metadata": {"problem_id": 959, "library_problem_id": 27, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 25}}
{"id": 960, "code": "```python\na[:, lengths:, :] = 0\n```", "metadata": {"problem_id": 960, "library_problem_id": 28, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 28}}
{"id": 961, "code": "```python\na[:, lengths:, :] = 2333\n```", "metadata": {"problem_id": 961, "library_problem_id": 29, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 28}}
{"id": 962, "code": "```python\na[:, :lengths, :] = 0\n```", "metadata": {"problem_id": 962, "library_problem_id": 30, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 28}}
{"id": 963, "code": "```python\na[:, :lengths, :] = 2333\n```", "metadata": {"problem_id": 963, "library_problem_id": 31, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 28}}
{"id": 964, "code": "```python\ntensor_of_tensors = torch.stack(list_of_tensors)\n```", "metadata": {"problem_id": 964, "library_problem_id": 32, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 32}}
{"id": 965, "code": "```python\nnew_tensors = torch.stack(list)\n```", "metadata": {"problem_id": 965, "library_problem_id": 33, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 32}}
{"id": 966, "code": "```python\ntensor_of_tensors = torch.stack(list_of_tensors)\n```", "metadata": {"problem_id": 966, "library_problem_id": 34, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 32}}
{"id": 967, "code": "```python\ntensor_of_tensors = torch.stack(list_of_tensors)\n```", "metadata": {"problem_id": 967, "library_problem_id": 35, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 32}}
{"id": 968, "code": "```python\nresult = t[idx]\n```", "metadata": {"problem_id": 968, "library_problem_id": 36, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 36}}
{"id": 969, "code": "```python\nresult = t[idx]\n```", "metadata": {"problem_id": 969, "library_problem_id": 37, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 36}}
{"id": 970, "code": "```python\nresult = t[idx, torch.arange(t.size(1))]\n```", "metadata": {"problem_id": 970, "library_problem_id": 38, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 36}}
{"id": 971, "code": "```python\nresult = torch.gather(x, 1, ids.unsqueeze(-1).expand(-1, -1, x.size(2))).squeeze(1)\n```", "metadata": {"problem_id": 971, "library_problem_id": 39, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 39}}
{"id": 972, "code": "```python\nresult = torch.gather(x, 1, ids.unsqueeze(-1)).squeeze(1)\n```", "metadata": {"problem_id": 972, "library_problem_id": 40, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 39}}
{"id": 973, "code": "```python\ntorch.gather(x, 1, ids.unsqueeze(-1).expand(-1, -1, x.size(-1))).squeeze(1)\n```", "metadata": {"problem_id": 973, "library_problem_id": 41, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 39}}
{"id": 974, "code": "```python\n_, predicted_classes = torch.max(softmax_output, dim=1)\ny = predicted_classes.view(-1, 1)\n```", "metadata": {"problem_id": 974, "library_problem_id": 42, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 42}}
{"id": 975, "code": "```python\n_, predicted_classes = torch.max(softmax_output, dim=1)\ny = predicted_classes.view(-1, 1)\n```", "metadata": {"problem_id": 975, "library_problem_id": 43, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 42}}
{"id": 976, "code": "```python\n_, predicted_classes = torch.min(softmax_output, dim=1)\ny = predicted_classes.view(-1, 1)\n```", "metadata": {"problem_id": 976, "library_problem_id": 44, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 42}}
{"id": 977, "code": "```python\n_, predicted_classes = torch.max(softmax_output, dim=1)\npredicted_classes = predicted_classes.view(-1, 1)\n```", "metadata": {"problem_id": 977, "library_problem_id": 45, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 42}}
{"id": 978, "code": "```python\ny = torch.argmin(softmax_output, dim=1)\n```", "metadata": {"problem_id": 978, "library_problem_id": 46, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 42}}
{"id": 979, "code": "```python\nlog_p = F.log_softmax(input, dim=1)\ntarget_one_hot = F.one_hot(target, num_classes=c).permute(0, 3, 2, 1).contiguous().view(-1, c)\nloss = F.nll_loss(log_p, target_one_hot.argmax(dim=1).view(-1), weight=weight, size_average=size_average)\n```", "metadata": {"problem_id": 979, "library_problem_id": 47, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 47}}
{"id": 980, "code": "```python\ncnt_equal = torch.sum(A == B).item()\n```", "metadata": {"problem_id": 980, "library_problem_id": 48, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 48}}
{"id": 981, "code": "```python\ncnt_equal = torch.sum(A == B).item()\n```", "metadata": {"problem_id": 981, "library_problem_id": 49, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 48}}
{"id": 982, "code": "```python\ncnt_not_equal = torch.sum(A != B).item()\n```", "metadata": {"problem_id": 982, "library_problem_id": 50, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 48}}
{"id": 983, "code": "```python\ncnt_equal = torch.sum(A == B).item()\n```", "metadata": {"problem_id": 983, "library_problem_id": 51, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 48}}
{"id": 984, "code": "```python\ncnt_equal = torch.sum(A[-x:] == B[-x:])\n```", "metadata": {"problem_id": 984, "library_problem_id": 52, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 48}}
{"id": 985, "code": "```python\ncnt_not_equal = torch.sum(A[-x:] != B[-x:])\n```", "metadata": {"problem_id": 985, "library_problem_id": 53, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 48}}
{"id": 986, "code": "```python\ntensors_31 = []\nfor i in range(chunk_dim):\n    start = i\n    end = start + chunk_dim\n    tensor_chunk = a[:, :, :, start:end, :]\n    tensors_31.append(tensor_chunk)\n```", "metadata": {"problem_id": 986, "library_problem_id": 54, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 54}}
{"id": 987, "code": "```python\ntensors_31 = []\nfor i in range(chunk_dim):\n    start = i\n    end = start + chunk_dim\n    tensor_chunk = a[:, :, start:end, :, :]\n    tensors_31.append(tensor_chunk)\n```", "metadata": {"problem_id": 987, "library_problem_id": 55, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 54}}
{"id": 988, "code": "```python\noutput[mask == 1] = clean_input_spectrogram[mask == 1]\n```", "metadata": {"problem_id": 988, "library_problem_id": 56, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 56}}
{"id": 989, "code": "```python\noutput[mask == 0] = clean_input_spectrogram[mask == 0]\n```", "metadata": {"problem_id": 989, "library_problem_id": 57, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 56}}
{"id": 990, "code": "```python\nsigned_min = torch.where(torch.abs(x) < torch.abs(y), x * torch.sign(x), y * torch.sign(y))\n```", "metadata": {"problem_id": 990, "library_problem_id": 58, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 58}}
{"id": 991, "code": "```python\nsigned_max = torch.where(torch.abs(x) > torch.abs(y), x * torch.sign(x), y * torch.sign(y))\n```", "metadata": {"problem_id": 991, "library_problem_id": 59, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 58}}
{"id": 992, "code": "```python\nsigned_min = torch.where(torch.abs(x) < torch.abs(y), x * torch.sign(x), y * torch.sign(y))\n```", "metadata": {"problem_id": 992, "library_problem_id": 60, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 58}}
{"id": 993, "code": "```python\nconfidence_score = torch.softmax(output, dim=1)\n```", "metadata": {"problem_id": 993, "library_problem_id": 61, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 61}}
{"id": 994, "code": "```python\nresult = torch.cat((a[:, :-1], (a[:, -1:] + b[:, :1]) / 2, b[:, 1:]), dim=1)\n```", "metadata": {"problem_id": 994, "library_problem_id": 62, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 62}}
{"id": 995, "code": "```python\nresult = torch.cat((a[:, :-1], (a[:, -1:] + b[:, :1]) / 2, b[:, 1:]), dim=1)\n```", "metadata": {"problem_id": 995, "library_problem_id": 63, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 62}}
{"id": 996, "code": "```python\nt = torch.arange(8).reshape(1,4,2).float()\nnew = torch.zeros_like(t)\nnew[:, :, 1:] = t[:, :, :-1]\nresult = new\n```", "metadata": {"problem_id": 996, "library_problem_id": 64, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 64}}
{"id": 997, "code": "```python\nt = torch.tensor([[1, 2], [3, 4]])\nexpanded_t = torch.cat((torch.zeros_like(t), t, torch.zeros_like(t)), dim=1)\nresult = expanded_t\n```", "metadata": {"problem_id": 997, "library_problem_id": 65, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 64}}
{"id": 998, "code": "```python\nresult = torch.cat([torch.full_like(t, -1), t, torch.full_like(t, -1)], dim=0)\n```", "metadata": {"problem_id": 998, "library_problem_id": 66, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 64}}
{"id": 999, "code": "```python\nresult = torch.matmul(data, W.unsqueeze(-1)).squeeze(-1).view(10, 2, 3)\n```", "metadata": {"problem_id": 999, "library_problem_id": 67, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 67}}
