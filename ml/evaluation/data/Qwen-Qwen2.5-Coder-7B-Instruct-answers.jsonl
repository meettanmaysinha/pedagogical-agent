{"id": 0, "code": "```python\nresult = df.iloc[List].reset_index(drop=True)\n```", "metadata": {"problem_id": 0, "library_problem_id": 0, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 1, "code": "```python\nresult = df.iloc[List]\n```", "metadata": {"problem_id": 1, "library_problem_id": 1, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 0}}
{"id": 2, "code": "```python\nvalue_counts_threshold = 2\n\nfor col in df.columns:\n    value_counts = df[col].value_counts()\n    replace_values = value_counts[value_counts < value_counts_threshold].index\n    df[col] = df[col].replace(replace_values, 'other')\n```", "metadata": {"problem_id": 2, "library_problem_id": 2, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 2}}
{"id": 3, "code": "```python\nvalue_counts_threshold = 3\n\nfor col in df.columns:\n    value_counts = df[col].value_counts()\n    replace_values = value_counts[value_counts < value_counts_threshold].index\n    df[col] = df[col].replace(replace_values, 'other')\n\nresult = df\n```", "metadata": {"problem_id": 3, "library_problem_id": 3, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 2}}
{"id": 4, "code": "```python\nvalue_counts_threshold = 2\ncolumns_to_process = ['Qu1', 'Qu3']\n\nfor col in columns_to_process:\n    value_counts = df[col].value_counts()\n    replace_values = value_counts[value_counts < value_counts_threshold].index\n    df[col] = df[col].replace(replace_values, 'other')\n\nresult = df\n```", "metadata": {"problem_id": 4, "library_problem_id": 4, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 2}}
{"id": 5, "code": "```python\nvalue_counts_qu1 = df['Qu1'].value_counts()\nvalue_counts_qu2 = df['Qu2'].value_counts()\nvalue_counts_qu3 = df['Qu3'].value_counts()\n\nqu1_replace_dict = {item: 'other' for item, count in value_counts_qu1.items() if count < 3}\nqu2_replace_dict = {item: 'other' for item, count in value_counts_qu2.items() if count < 2}\nqu3_replace_dict = {item: 'other' for item, count in value_counts_qu3.items() if count < 2}\n\ndf['Qu1'] = df['Qu1'].replace(qu1_replace_dict)\ndf['Qu2'] = df['Qu2'].replace(qu2_replace_dict)\ndf['Qu3'] = df['Qu3'].replace(qu3_replace_dict)\n\nresult = df\n```", "metadata": {"problem_id": 5, "library_problem_id": 5, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 2}}
{"id": 6, "code": "```python\nresult = df.copy()\nfor col in ['Qu1', 'Qu2', 'Qu3']:\n    value_counts = df[col].value_counts()\n    threshold = 3 if col == 'Qu1' else 2\n    replace_values = value_counts[value_counts < threshold].index.tolist()\n    if 'apple' in replace_values:\n        replace_values.remove('apple')\n    result[col] = df[col].apply(lambda x: x if x not in replace_values else 'other')\n```", "metadata": {"problem_id": 6, "library_problem_id": 6, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 2}}
{"id": 7, "code": "```python\nresult = df.loc[df['keep_if_dup'] == 'Yes'].drop_duplicates(subset='url', keep='first').append(df.loc[df['keep_if_dup'] == 'No']).reset_index(drop=True)\n```", "metadata": {"problem_id": 7, "library_problem_id": 7, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 7}}
{"id": 8, "code": "```python\nresult = df.loc[df.groupby('url')['drop_if_dup'].transform(lambda x: (x == 'No') | (x != x.duplicated()))].reset_index(drop=True)\n```", "metadata": {"problem_id": 8, "library_problem_id": 8, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 7}}
{"id": 9, "code": "```python\nresult = df.loc[df.groupby('url')['id'].idxmax()]\n```", "metadata": {"problem_id": 9, "library_problem_id": 9, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 7}}
{"id": 10, "code": "```python\nresult = df.set_index(['name', 'v1']).to_dict(orient='index')\nfor key, value in result.items():\n    result[key] = {k: v for k, v in value.items() if not isinstance(v, dict)}\n```", "metadata": {"problem_id": 10, "library_problem_id": 10, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 10}}
{"id": 11, "code": "```python\ndf['datetime'] = df['datetime'].dt.tz_localize(None)\n```", "metadata": {"problem_id": 11, "library_problem_id": 11, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 11}}
{"id": 12, "code": "```python\nresult = df['datetime'].dt.tz_localize(None)\n```", "metadata": {"problem_id": 12, "library_problem_id": 12, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 11}}
{"id": 13, "code": "```python\ndf['datetime'] = df['datetime'].dt.tz_localize(None).dt.strftime('%d-%b-%Y %H:%M:%S')\n```", "metadata": {"problem_id": 13, "library_problem_id": 13, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 11}}
{"id": 14, "code": "```python\ndf['datetime'] = df['datetime'].dt.tz_localize(None)\n```", "metadata": {"problem_id": 14, "library_problem_id": 14, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 11}}
{"id": 15, "code": "```python\nresult = df['message'].str.extractall(r'(\\w+): ([\\w\\s]+)').unstack().apply(lambda x: x.str.strip(',').fillna('none')).T.reset_index(drop=True)\nresult.columns = result.iloc[0]\nresult = result.drop(0).reset_index(drop=True)\n```", "metadata": {"problem_id": 15, "library_problem_id": 15, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 15}}
{"id": 16, "code": "```python\ndf.loc[df['product'].isin(products), 'score'] *= 10\n```", "metadata": {"problem_id": 16, "library_problem_id": 16, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 16}}
{"id": 17, "code": "```python\ndf.loc[~df['product'].isin(products), 'score'] *= 10\n```", "metadata": {"problem_id": 17, "library_problem_id": 17, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 16}}
{"id": 18, "code": "```python\ndf.loc[df['product'].isin([item for sublist in products for item in sublist]), 'score'] *= 10\n```", "metadata": {"problem_id": 18, "library_problem_id": 18, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 16}}
{"id": 19, "code": "```python\ndf.loc[df['product'].isin(products), 'score'] = df.loc[df['product'].isin(products), 'score'].apply(lambda x: (x - df.loc[df['product'].isin(products), 'score'].min()) / (df.loc[df['product'].isin(products), 'score'].max() - df.loc[df['product'].isin(products), 'score'].min()))\n```", "metadata": {"problem_id": 19, "library_problem_id": 19, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 16}}
{"id": 20, "code": "```python\ndf['category'] = df.idxmax(axis=1)\n```", "metadata": {"problem_id": 20, "library_problem_id": 20, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 20}}
{"id": 21, "code": "```python\ndf['category'] = df.idxmax(axis=1)\n```", "metadata": {"problem_id": 21, "library_problem_id": 21, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 20}}
{"id": 22, "code": "```python\ndf['category'] = df.apply(lambda row: [col for col in df.columns if row[col] == 1], axis=1)\n```", "metadata": {"problem_id": 22, "library_problem_id": 22, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 20}}
{"id": 23, "code": "```python\ndf['Date'] = df['Date'].dt.strftime('%b-%Y')\n```", "metadata": {"problem_id": 23, "library_problem_id": 23, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 23}}
{"id": 24, "code": "```python\ndf['Date'] = df['Date'].dt.strftime('%d-%b-%Y')\n```", "metadata": {"problem_id": 24, "library_problem_id": 24, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 23}}
{"id": 25, "code": "```python\ndf.loc[(df['Date'] >= '2017-08-17') & (df['Date'] <= '2018-01-31'), 'Formatted_Date'] = df.loc[(df['Date'] >= '2017-08-17') & (df['Date'] <= '2018-01-31'), 'Date'].dt.strftime('%d-%b-%Y %A')\n```", "metadata": {"problem_id": 25, "library_problem_id": 25, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 23}}
{"id": 26, "code": "```python\ndf_shifted = df.copy()\nfirst_row = df_shifted.iloc[0]\ndf_shifted = df_shifted.shift(1).fillna(df_shifted.iloc[-1])\ndf_shifted.iloc[0] = first_row\n```", "metadata": {"problem_id": 26, "library_problem_id": 26, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 26}}
{"id": 27, "code": "```python\ndf = df.append(df.iloc[0]).drop(df.index[0])\n```", "metadata": {"problem_id": 27, "library_problem_id": 27, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 26}}
{"id": 28, "code": "```python\ndf['#1'] = df['#1'].shift(-1).combine_first(df['#1'].iloc[0])\ndf['#2'] = df['#2'].shift(1).combine_first(df['#2'].iloc[-1])\n```", "metadata": {"problem_id": 28, "library_problem_id": 28, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 26}}
{"id": 29, "code": "```python\ndf_shifted = df.shift(1)\ndf_shifted.iloc[0] = df.iloc[-1]\ndf_shifted\n```", "metadata": {"problem_id": 29, "library_problem_id": 29, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 26}}
{"id": 30, "code": "```python\ndf.columns = [f'{col}X' for col in df.columns]\n```", "metadata": {"problem_id": 30, "library_problem_id": 30, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 30}}
{"id": 31, "code": "```python\ndf.columns = ['X' + col for col in df.columns]\n```", "metadata": {"problem_id": 31, "library_problem_id": 31, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 30}}
{"id": 32, "code": "```python\ndf.columns = ['X' + col if not col.endswith('X') else col for col in df.columns]\n```", "metadata": {"problem_id": 32, "library_problem_id": 32, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 30}}
{"id": 33, "code": "```python\nresult = df.groupby('group').agg({'group_color': 'first', **{col: 'mean' for col in df.columns if col.startswith('val')}})\n```", "metadata": {"problem_id": 33, "library_problem_id": 33, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 33}}
{"id": 34, "code": "```python\nresult = df.groupby('group').agg({'group_color': 'first', **{col: 'sum' for col in df.columns if col.startswith('val')}})\n```", "metadata": {"problem_id": 34, "library_problem_id": 34, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 33}}
{"id": 35, "code": "```python\nresult = df.groupby('group').agg({\"group_color\": \"first\", (\"val1\", \"sum\"), (\"val2\", \"mean\"), (\"val42\", \"mean\")})\n```", "metadata": {"problem_id": 35, "library_problem_id": 35, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 33}}
{"id": 36, "code": "```python\nresult = df.loc[row_list, column_list].mean()\n```", "metadata": {"problem_id": 36, "library_problem_id": 36, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 36}}
{"id": 37, "code": "```python\nresult = df.loc[row_list, column_list].sum(axis=0)\n```", "metadata": {"problem_id": 37, "library_problem_id": 37, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 36}}
{"id": 38, "code": "```python\nresult = df.loc[row_list, column_list].sum().drop('d')\n```", "metadata": {"problem_id": 38, "library_problem_id": 38, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 36}}
{"id": 39, "code": "```python\nresult = df.apply(lambda x: x.value_counts(dropna=False)).stack()\n```", "metadata": {"problem_id": 39, "library_problem_id": 39, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 39}}
{"id": 40, "code": "```python\nresult = df.isnull().sum()\n```", "metadata": {"problem_id": 40, "library_problem_id": 40, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 39}}
{"id": 41, "code": "```python\nresult = \"\"\nfor column in df.columns:\n    result += f\"---- {column} ---\\n{df[column].value_counts()}\\n\"\n```", "metadata": {"problem_id": 41, "library_problem_id": 41, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 39}}
{"id": 42, "code": "```python\nresult = df.iloc[1].add(df.iloc[0], fill_value=0).to_frame().T\nresult.columns = result.columns.str.replace(' ', '_')\n```", "metadata": {"problem_id": 42, "library_problem_id": 42, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 42}}
{"id": 43, "code": "```python\nresult = df.iloc[1:].combine_first(df.iloc[0]).reset_index(drop=True)\n```", "metadata": {"problem_id": 43, "library_problem_id": 43, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 42}}
{"id": 44, "code": "```python\nresult = df.apply(lambda x: x.dropna().tolist() + [np.nan] * (len(x) - len(x.dropna())), axis=1)\n```", "metadata": {"problem_id": 44, "library_problem_id": 44, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 44}}
{"id": 45, "code": "```python\nresult = df.apply(lambda x: x.sort_values().reset_index(drop=True), axis=1)\n```", "metadata": {"problem_id": 45, "library_problem_id": 45, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 44}}
{"id": 46, "code": "```python\nresult = df.fillna(method='ffill', axis=0).fillna(method='bfill', axis=0)\n```", "metadata": {"problem_id": 46, "library_problem_id": 46, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 44}}
{"id": 47, "code": "```python\nresult = df.groupby(df['value'] >= thresh).apply(lambda x: x.sum() if x.name else x)\n```", "metadata": {"problem_id": 47, "library_problem_id": 47, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 47}}
{"id": 48, "code": "```python\nresult = df.loc[df['value'] >= thresh].groupby(level=0).mean().append(df.loc[df['value'] < thresh].sum()).sort_index()\n```", "metadata": {"problem_id": 48, "library_problem_id": 48, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 47}}
{"id": 49, "code": "```python\nmask = (df['value'] < section_left) | (df['value'] > section_right)\ngrouped = df[mask].groupby(mask).mean().reset_index(drop=True)\ndf.loc[mask] = grouped.iloc[0]\nresult = df\n```", "metadata": {"problem_id": 49, "library_problem_id": 49, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 47}}
{"id": 50, "code": "```python\nresult = df.copy()\nfor col in df.columns:\n    result[f'inv_{col}'] = 1 / df[col]\n```", "metadata": {"problem_id": 50, "library_problem_id": 50, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 50}}
{"id": 51, "code": "```python\nresult = df.assign(**{f'exp_{col}': np.exp(df[col]) for col in df.columns})\n```", "metadata": {"problem_id": 51, "library_problem_id": 51, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 50}}
{"id": 52, "code": "```python\nresult = df.copy()\nfor col in df.columns:\n    result[f'inv_{col}'] = df[col].apply(lambda x: 1/x if x != 0 else 0)\n```", "metadata": {"problem_id": 52, "library_problem_id": 52, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 50}}
{"id": 53, "code": "```python\nimport numpy as np\n\nresult = df.copy()\nfor col in df.columns:\n    result[f'sigmoid_{col}'] = 1 / (1 + np.exp(-df[col]))\n```", "metadata": {"problem_id": 53, "library_problem_id": 53, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 50}}
{"id": 54, "code": "```python\nresult = df.apply(lambda x: x[::-1].idxmax()[::-1] if x.min() != x.max() else x.idxmax())\n```", "metadata": {"problem_id": 54, "library_problem_id": 54, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 54}}
{"id": 55, "code": "```python\nresult = df.apply(lambda x: x.argmax() if x.argmax() >= x.idxmin() else x.idxmax())\n```", "metadata": {"problem_id": 55, "library_problem_id": 55, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 54}}
{"id": 56, "code": "```python\nresult = df.set_index(['user', 'dt']).unstack(fill_value=0).stack().reset_index(name='val')\n```", "metadata": {"problem_id": 56, "library_problem_id": 56, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 56}}
{"id": 57, "code": "```python\nresult = df.set_index(['user', 'dt']).unstack(fill_value=0).stack().reset_index(name='val')\n```", "metadata": {"problem_id": 57, "library_problem_id": 57, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 56}}
{"id": 58, "code": "```python\nresult = df.set_index(['user', 'dt']).unstack(fill_value=233).stack().reset_index(name='val')\n```", "metadata": {"problem_id": 58, "library_problem_id": 58, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 56}}
{"id": 59, "code": "```python\nresult = df.groupby('user').apply(lambda x: pd.DataFrame({\n    'dt': pd.date_range(start=x['dt'].min(), end=x['dt'].max()),\n    'user': x['user'].iloc[0],\n    'val': x['val'].max()\n})).reset_index(drop=True)\n```", "metadata": {"problem_id": 59, "library_problem_id": 59, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 56}}
{"id": 60, "code": "```python\nresult = (df.set_index('dt')\n          .groupby('user')['val']\n          .transform(lambda x: x.fillna(x.max()))\n          .reset_index()\n          .rename(columns={'level_1': 'dt'})\n          .sort_values(by=['user', 'dt'])\n          .reset_index(drop=True))\n```", "metadata": {"problem_id": 60, "library_problem_id": 60, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 56}}
{"id": 61, "code": "```python\ndf['name'] = df['name'].astype('category').cat.codes + 1\n```", "metadata": {"problem_id": 61, "library_problem_id": 61, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 61}}
{"id": 62, "code": "```python\ndf['a'] = df.groupby('name')['a'].transform(lambda x: x.rank(method='dense').astype(int))\n```", "metadata": {"problem_id": 62, "library_problem_id": 62, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 61}}
{"id": 63, "code": "```python\nresult = df['name'].astype('category').cat.codes + 1\ndf['name'] = result\nreturn df\n### END SOLUTION\n```", "metadata": {"problem_id": 63, "library_problem_id": 63, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 61}}
{"id": 64, "code": "```python\ndf['ID'] = df.groupby(['name', 'a']).ngroup() + 1\nresult = df[['ID', 'b', 'c']]\n```", "metadata": {"problem_id": 64, "library_problem_id": 64, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 61}}
{"id": 65, "code": "```python\ndf = df.melt(id_vars=['user', 'someBool'], var_name='date', value_name='value')\n```", "metadata": {"problem_id": 65, "library_problem_id": 65, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 65}}
{"id": 66, "code": "```python\ndf = df.melt(id_vars=['user', '01/12/15'], var_name='others', value_name='value')\n```", "metadata": {"problem_id": 66, "library_problem_id": 66, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 65}}
{"id": 67, "code": "```python\ndf = df.melt(id_vars=['user', 'someBool'], var_name='date', value_name='value').dropna()\n```", "metadata": {"problem_id": 67, "library_problem_id": 67, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 65}}
{"id": 68, "code": "```python\nresult = df.loc[df['c'] > 0.5, columns].to_numpy()\n```", "metadata": {"problem_id": 68, "library_problem_id": 68, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 68}}
{"id": 69, "code": "```python\nresult = df.loc[df['c'] > 0.45, columns].to_numpy()\n```", "metadata": {"problem_id": 69, "library_problem_id": 69, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 68}}
{"id": 70, "code": "```python\nresult = df.loc[df['c'] > 0.5, columns].to_numpy()\n```", "metadata": {"problem_id": 70, "library_problem_id": 70, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 68}}
{"id": 71, "code": "```python\nresult = df.loc[df['c'] > 0.5, columns].assign(sum=df.loc[df['c'] > 0.5, columns].sum(axis=1))\n```", "metadata": {"problem_id": 71, "library_problem_id": 71, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 68}}
{"id": 72, "code": "```python\nresult = df.loc[df['c'] > 0.5, columns]\n```", "metadata": {"problem_id": 72, "library_problem_id": 72, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 68}}
{"id": 73, "code": "```python\nfrom datetime import datetime, timedelta\n\n# Convert date column to datetime format\ndf['date'] = pd.to_datetime(df['date'], format='%m/%d/%y')\n\n# Sort the dataframe by date\ndf.sort_values(by='date', inplace=True)\n\n# Initialize an empty list to store indices of rows to keep\nindices_to_keep = []\n\n# Iterate over each row in the dataframe\nfor i in range(len(df)):\n    # Add the current row index to the list\n    indices_to_keep.append(i)\n    \n    # Get the current date\n    current_date = df.loc[i, 'date']\n    \n    # Find the index of the next row that is more than X days away\n    j = i + 1\n    while j < len(df) and (df.loc[j, 'date'] - current_date).days <= X:\n        j += 1\n    \n    # Set the index of the next row to keep\n    i = j - 1\n\n# Filter the dataframe to include only the rows with indices in indices_to_keep\nresult = df.iloc[indices_to_keep]\n```", "metadata": {"problem_id": 73, "library_problem_id": 73, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 73}}
{"id": 74, "code": "```python\nfrom datetime import datetime, timedelta\n\n# Convert date column to datetime format\ndf['date'] = pd.to_datetime(df['date'], format='%m/%d/%y')\n\n# Sort the dataframe by date\ndf.sort_values(by='date', inplace=True)\n\n# Initialize an empty list to store indices of rows to keep\nindices_to_keep = []\n\n# Iterate over each row in the dataframe\nfor i in range(len(df)):\n    # Add the current row index to the list\n    indices_to_keep.append(i)\n    \n    # Get the current date\n    current_date = df.loc[i, 'date']\n    \n    # Find the index of the next row that is more than X days away\n    j = i + 1\n    while j < len(df) and (df.loc[j, 'date'] - current_date).days <= X:\n        j += 1\n    \n    # Set the index of the next row to keep\n    i = j - 1\n\n# Filter the dataframe to include only the rows with indices in indices_to_keep\nresult = df.iloc[indices_to_keep]\n```", "metadata": {"problem_id": 74, "library_problem_id": 74, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 73}}
{"id": 75, "code": "```python\nfrom datetime import datetime, timedelta\n\n# Convert date column to datetime\ndf['date'] = pd.to_datetime(df['date'], format='%m/%d/%y')\n\n# Sort the DataFrame by date\ndf.sort_values(by='date', inplace=True)\n\n# Initialize an empty list to store indices of rows to keep\nindices_to_keep = []\n\n# Iterate over each row in the DataFrame\nfor i in range(len(df)):\n    # Add the current row index to the list\n    indices_to_keep.append(i)\n    \n    # Get the current date\n    current_date = df.loc[i, 'date']\n    \n    # Find the index of the next row that is more than X days away\n    j = i + 1\n    while j < len(df) and (df.loc[j, 'date'] - current_date).days <= X * 7:\n        j += 1\n    \n    # Set the index of the next row to keep\n    i = j - 1\n\n# Filter the DataFrame to include only the rows with indices in indices_to_keep\nresult = df.iloc[indices_to_keep]\n```", "metadata": {"problem_id": 75, "library_problem_id": 75, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 73}}
{"id": 76, "code": "```python\nresult = df.groupby(df.index // 3).transform('mean')\n```", "metadata": {"problem_id": 76, "library_problem_id": 76, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 76}}
{"id": 77, "code": "```python\nresult = df.groupby(df.index // 3).mean().reset_index(drop=True)\n```", "metadata": {"problem_id": 77, "library_problem_id": 77, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 76}}
{"id": 78, "code": "```python\nresult = df.groupby(df.index // 4).sum().reset_index(drop=True)\n```", "metadata": {"problem_id": 78, "library_problem_id": 78, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 76}}
{"id": 79, "code": "```python\nresult = df['col1'].iloc[::-1].groupby(df.index // 3).mean().iloc[::-1]\n```", "metadata": {"problem_id": 79, "library_problem_id": 79, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 76}}
{"id": 80, "code": "```python\nresult = df.groupby((range(len(df)), lambda x: (x // 5) % 2)).sum().groupby(level=1).transform('mean')\n```", "metadata": {"problem_id": 80, "library_problem_id": 80, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 76}}
{"id": 81, "code": "```python\nresult = df.groupby((range(len(df)), lambda x: (x // 5) % 2)).sum().groupby(level=1).transform('mean').reset_index(drop=True)\n```", "metadata": {"problem_id": 81, "library_problem_id": 81, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 76}}
{"id": 82, "code": "```python\ndf['A'] = df['A'].replace(0, pd.NA).ffill().fillna(0)\n```", "metadata": {"problem_id": 82, "library_problem_id": 82, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 82}}
{"id": 83, "code": "```python\ndf['A'] = df['A'].replace(0, pd.NA).fillna(method='ffill').fillna(0)\n```", "metadata": {"problem_id": 83, "library_problem_id": 83, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 82}}
{"id": 84, "code": "```python\ndf['A'] = df['A'].replace(0, np.nan).ffill().bfill()\n```", "metadata": {"problem_id": 84, "library_problem_id": 84, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 82}}
{"id": 85, "code": "```python\ndf['number'] = df.duration.str.extract('(\\d+)').astype(int)\ndf['time'] = df.duration.str.extract('(year|month|week|day)')\ndf['time_days'] = df.time.map({'year': 365, 'month': 30, 'week': 7, 'day': 1})\n```", "metadata": {"problem_id": 85, "library_problem_id": 85, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 85}}
{"id": 86, "code": "```python\ndf['number'] = df.duration.str.extract('(\\d+)').astype(int)\ndf['time'] = df.duration.str.extract('(year|month|week|day)')\ndf['time_day'] = df.time.map({'year': 365, 'month': 30, 'week': 7, 'day': 1})\n```", "metadata": {"problem_id": 86, "library_problem_id": 86, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 85}}
{"id": 87, "code": "```python\ndf['number'] = df.duration.str.extract('(\\d+)').astype(int)\ndf['time'] = df.duration.str.extract('(year|month|week|day)')\ndf['time_days'] = df.time.map({'year': 365, 'month': 30, 'week': 7, 'day': 1})\n```", "metadata": {"problem_id": 87, "library_problem_id": 87, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 85}}
{"id": 88, "code": "```python\ndf['numer'] = df.duration.str.extract('(\\d+)').astype(int)\ndf['time'] = df.duration.str.extract('(year|month|week|day)')\ndf['time_day'] = df.time.map({'year': 365, 'month': 30, 'week': 7, 'day': 1}) * df.numer\n```", "metadata": {"problem_id": 88, "library_problem_id": 88, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 85}}
{"id": 89, "code": "```python\nresult = np.all(df1[columns_check_list] == df2[columns_check_list], axis=1)\n```", "metadata": {"problem_id": 89, "library_problem_id": 89, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 89}}
{"id": 90, "code": "```python\nresult = np.all(np.array([df1[col] == df2[col] for col in columns_check_list]), axis=0)\n```", "metadata": {"problem_id": 90, "library_problem_id": 90, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 89}}
{"id": 91, "code": "```python\ndf.index.set_levels(pd.to_datetime(df.index.levels[1]), level=1, inplace=True)\n```", "metadata": {"problem_id": 91, "library_problem_id": 91, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 91}}
{"id": 92, "code": "```python\ndf.index.set_levels(pd.to_datetime(df.index.levels[1]), level=1, inplace=True)\n```", "metadata": {"problem_id": 92, "library_problem_id": 92, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 91}}
{"id": 93, "code": "```python\ndf.index.set_levels(pd.to_datetime(df.index.levels[1]), level=1, inplace=True)\nreturn df.reset_index().to_numpy()\n```", "metadata": {"problem_id": 93, "library_problem_id": 93, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 91}}
{"id": 94, "code": "```python\ndf.index = pd.MultiIndex.from_arrays([pd.to_datetime(df.index.get_level_values('date')), df.index.get_level_values('id')])\ndf = df.swaplevel(i=0, j=1).sort_index()\nreturn df\n```", "metadata": {"problem_id": 94, "library_problem_id": 94, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 91}}
{"id": 95, "code": "```python\ndf = pd.melt(df, id_vars=['Country', 'Variable'], value_vars=['2000', '2001', '2002', '2003', '2004', '2005'], var_name='year', value_name='value')\ndf = df.rename(columns={'Variable': 'var'})\n```", "metadata": {"problem_id": 95, "library_problem_id": 95, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 95}}
{"id": 96, "code": "```python\ndf = pd.melt(df, id_vars=['Country', 'Variable'], value_vars=['2005', '2004', '2003', '2002', '2001', '2000'], var_name='year', value_name='value')\ndf['year'] = df['year'].astype(int)\ndf.sort_values(by=['Country', 'Variable', 'year'], ascending=[True, True, False], inplace=True)\ndf.rename(columns={'value': 'var1'}, inplace=True)\ndf.drop(columns=['Variable'], inplace=True)\n```", "metadata": {"problem_id": 96, "library_problem_id": 96, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 95}}
{"id": 97, "code": "```python\ndf[df.filter(like='Value').abs().lt(1).all(axis=1)]\n```", "metadata": {"problem_id": 97, "library_problem_id": 97, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 97}}
{"id": 98, "code": "```python\ndf[df.filter(like='Value').abs().max(axis=1) > 1]\n```", "metadata": {"problem_id": 98, "library_problem_id": 98, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 97}}
{"id": 99, "code": "```python\ndf_filtered = df[df.filter(like='Value').abs().max(axis=1) > 1].rename(columns=lambda x: x.replace('Value_', '') if 'Value_' in x else x)\n```", "metadata": {"problem_id": 99, "library_problem_id": 99, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 97}}
{"id": 100, "code": "```python\ndf.replace('&AMP;', '&', regex=True)\n```", "metadata": {"problem_id": 100, "library_problem_id": 100, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 100}}
{"id": 101, "code": "```python\ndf.replace('&LT;', '<', regex=True)\n```", "metadata": {"problem_id": 101, "library_problem_id": 101, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 100}}
{"id": 102, "code": "```python\ndf.replace('&AMP;', '&', regex=True)\n```", "metadata": {"problem_id": 102, "library_problem_id": 102, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 100}}
{"id": 103, "code": "```python\ndf.replace('&AMP;', '&', regex=True)\n```", "metadata": {"problem_id": 103, "library_problem_id": 103, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 100}}
{"id": 104, "code": "```python\ndf.replace('&AMP;', '&', regex=True)\n```", "metadata": {"problem_id": 104, "library_problem_id": 104, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 100}}
{"id": 105, "code": "```python\ndf['first_name'], df['last_name'] = zip(*df['name'].apply(lambda x: (x.split()[0], x.split()[1]) if len(x.split()) == 2 else (x, None)))\n```", "metadata": {"problem_id": 105, "library_problem_id": 105, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 105}}
{"id": 106, "code": "```python\ndf['1_name'], df['2_name'] = zip(*df['name'].apply(lambda x: (x.split()[0], ' '.join(x.split()[1:])) if len(x.split()) == 2 else (x, '')))\n```", "metadata": {"problem_id": 106, "library_problem_id": 106, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 105}}
{"id": 107, "code": "```python\ndf['first_name'], df['middle_name'], df['last_name'] = zip(*df['name'].str.split(' ', n=2))\n```", "metadata": {"problem_id": 107, "library_problem_id": 107, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 105}}
{"id": 108, "code": "```python\nresult = pd.merge_asof(df2.sort_values('Timestamp'), df1.sort_values('Timestamp'), on='Timestamp', direction='backward')\n```", "metadata": {"problem_id": 108, "library_problem_id": 108, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 108}}
{"id": 109, "code": "```python\nresult = pd.merge_asof(df1.sort_values('Timestamp'), df2.sort_values('Timestamp'), on='Timestamp', direction='backward')\n```", "metadata": {"problem_id": 109, "library_problem_id": 109, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 108}}
{"id": 110, "code": "```python\ndf['state'] = df.apply(lambda row: row['col1'] if row['col2'] <= 50 and row['col3'] <= 50 else max(row['col1'], row['col2'], row['col3']), axis=1)\n```", "metadata": {"problem_id": 110, "library_problem_id": 110, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 110}}
{"id": 111, "code": "```python\ndf['state'] = df.apply(lambda row: row['col1'] if row['col2'] > 50 and row['col3'] > 50 else row['col1'] + row['col2'] + row['col3'], axis=1)\n```", "metadata": {"problem_id": 111, "library_problem_id": 111, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 110}}
{"id": 112, "code": "```python\nerrors = []\nfor index, row in df.iterrows():\n    if not isinstance(row['Field1'], int):\n        errors.append(row['Field1'])\n```", "metadata": {"problem_id": 112, "library_problem_id": 112, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 112}}
{"id": 113, "code": "```python\ninteger_values = []\nfor index, row in df.iterrows():\n    try:\n        if isinstance(row['Field1'], int):\n            integer_values.append(row['Field1'])\n    except ValueError:\n        continue\n```", "metadata": {"problem_id": 113, "library_problem_id": 113, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 112}}
{"id": 114, "code": "```python\nresult = []\nfor index, row in df.iterrows():\n    if not isinstance(row['Field1'], int) and not (isinstance(row['Field1'], float) and row['Field1'].is_integer()):\n        result.append(row['Field1'])\n```", "metadata": {"problem_id": 114, "library_problem_id": 114, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 112}}
{"id": 115, "code": "```python\ndf.set_index('cat').div(df.groupby(level=0).sum(), level=0)\n```", "metadata": {"problem_id": 115, "library_problem_id": 115, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 115}}
{"id": 116, "code": "```python\ndf.set_index('cat', inplace=True)\ndf = df.div(df.sum())\ndf.reset_index(inplace=True)\n```", "metadata": {"problem_id": 116, "library_problem_id": 116, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 115}}
{"id": 117, "code": "```python\nresult = df.loc[test]\n```", "metadata": {"problem_id": 117, "library_problem_id": 117, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 117}}
{"id": 118, "code": "```python\nresult = df.loc[test]\n```", "metadata": {"problem_id": 118, "library_problem_id": 118, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 117}}
{"id": 119, "code": "```python\nresult = df.drop(test)\n```", "metadata": {"problem_id": 119, "library_problem_id": 119, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 117}}
{"id": 120, "code": "```python\nresult = df.loc[test].drop_duplicates()\n```", "metadata": {"problem_id": 120, "library_problem_id": 120, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 117}}
{"id": 121, "code": "```python\nfrom scipy.spatial import distance_matrix\n\n# Calculate pairwise distances\ndistances = distance_matrix(df[['x', 'y']], df[['x', 'y']])\n\n# Find nearest neighbor indices (excluding self)\nnearest_neighbors = np.argmin(distances + np.eye(len(distances)) * np.inf, axis=1)\n\n# Map back to original car IDs\ndf['nearest_neighbour'] = df.iloc[nearest_neighbors]['car'].values\n\n# Calculate Euclidean distance\ndf['euclidean_distance'] = np.sqrt(np.sum((df[['x', 'y']] - df.iloc[nearest_neighbors][['x', 'y']].values) ** 2, axis=1))\n\n# Resulting DataFrame\ndf2 = df.groupby('time').agg({\n    'car': lambda x: x,\n    'nearest_neighbour': lambda x: x,\n    'euclidean_distance': 'mean'\n}).reset_index()\n\nprint(df2)\n```", "metadata": {"problem_id": 121, "library_problem_id": 121, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 121}}
{"id": 122, "code": "```python\nfrom scipy.spatial import distance_matrix\n\n# Calculate pairwise distances\ndistances = distance_matrix(df[['x', 'y']], df[['x', 'y']])\n\n# Create a mask to exclude self-distances\nmask = np.eye(len(distances), dtype=bool)\n\n# Apply the mask to the distance matrix\ndistances[mask] = np.inf\n\n# Find the index of the minimum distance for each car\nmin_indices = np.argmin(distances, axis=1)\n\n# Map indices back to car IDs\ndf['farmost_neighbour'] = min_indices.map(df.set_index('car')['car'])\n\n# Calculate Euclidean distance\ndf['euclidean_distance'] = np.sqrt(np.sum((df[['x', 'y']] - df.loc[df['farmost_neighbour'], ['x', 'y']].values) ** 2, axis=1))\n\n# Drop rows where the farmost neighbour is the same car (self-distance)\ndf = df[df['car'] != df['farmost_neighbour']]\n```", "metadata": {"problem_id": 122, "library_problem_id": 122, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 121}}
{"id": 123, "code": "```python\ndf['keywords_all'] = df.apply(lambda row: ','.join([str(item) for item in row if pd.notnull(item)]), axis=1)\n```", "metadata": {"problem_id": 123, "library_problem_id": 123, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 123}}
{"id": 124, "code": "```python\ndf['keywords_all'] = df.apply(lambda row: '-'.join([str(item) for item in row if pd.notnull(item)]), axis=1)\n```", "metadata": {"problem_id": 124, "library_problem_id": 124, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 123}}
{"id": 125, "code": "```python\ndf['keywords_all'] = df[['keywords_0', 'keywords_1', 'keywords_2', 'keywords_3']].apply(lambda row: '-'.join(row.dropna()), axis=1)\n```", "metadata": {"problem_id": 125, "library_problem_id": 125, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 123}}
{"id": 126, "code": "```python\ndf['keywords_all'] = df[['keywords_0', 'keywords_1', 'keywords_2', 'keywords_3']].apply(lambda row: '-'.join([str(item) for item in row if pd.notnull(item)]), axis=1)\n```", "metadata": {"problem_id": 126, "library_problem_id": 126, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 123}}
{"id": 127, "code": "```python\nsampled_indices = df.sample(frac=0.2, random_state=0).index\ndf.loc[sampled_indices, 'Quantity'] = 0\ndf\n```", "metadata": {"problem_id": 127, "library_problem_id": 127, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 127}}
{"id": 128, "code": "```python\nsampled_indices = df.sample(frac=0.2, random_state=0).index\ndf.loc[sampled_indices, 'ProductId'] = 0\ndf\n```", "metadata": {"problem_id": 128, "library_problem_id": 128, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 127}}
{"id": 129, "code": "```python\ngrouped = df.groupby('UserId')\ndf['sampled'] = grouped.apply(lambda x: x.sample(frac=0.2, random_state=0).index)\ndf.loc[df['sampled'].notna(), 'Quantity'] = 0\ndf.drop(columns=['sampled'], inplace=True)\n```", "metadata": {"problem_id": 129, "library_problem_id": 129, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 127}}
{"id": 130, "code": "```python\nresult = df.loc[df.duplicated(subset=['col1', 'col2'], keep='first'), ['col1', 'col2']].assign(index_original=df['col1'].map(df.drop_duplicates(subset=['col1', 'col2'], keep='first').reset_index(drop=True).index))\n```", "metadata": {"problem_id": 130, "library_problem_id": 130, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 130}}
{"id": 131, "code": "```python\nresult = df.loc[df.duplicated(subset=['col1', 'col2'], keep=False), ['col1', 'col2']].drop_duplicates(keep='last').reset_index().rename(columns={'index': 'index_original'})\ndf = df.merge(result, on=['col1', 'col2'], how='left')\n```", "metadata": {"problem_id": 131, "library_problem_id": 131, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 130}}
{"id": 132, "code": "```python\nresult['index_original'] = result.apply(lambda row: df[(df['col1'] == row['col1']) & (df['col2'] == row['col2'])].index.min(), axis=1)\n```", "metadata": {"problem_id": 132, "library_problem_id": 132, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 130}}
{"id": 133, "code": "```python\nduplicate['index_original'] = duplicate.apply(lambda row: df[(df['col1'] == row['col1']) & (df['col2'] == row['col2']) & (df['3col'] == row['3col'])].index[0], axis=1)\n```", "metadata": {"problem_id": 133, "library_problem_id": 133, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 130}}
{"id": 134, "code": "```python\nduplicate_bool = df.duplicated(subset=['col1','col2'], keep='last')\nduplicate = df.loc[duplicate_bool == True]\nduplicate['index_original'] = duplicate.apply(lambda row: df[(df['col1'] == row['col1']) & (df['col2'] == row['col2'])].index.max(), axis=1)\n```", "metadata": {"problem_id": 134, "library_problem_id": 134, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 130}}
{"id": 135, "code": "```python\ngrouped = df.groupby(['Sp', 'Mt'])\nmax_counts = grouped['count'].transform(max)\nresult = df[df['count'] == max_counts]\n```", "metadata": {"problem_id": 135, "library_problem_id": 135, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 135}}
{"id": 136, "code": "```python\ngrouped = df.groupby(['Sp', 'Mt'])\nmax_count = grouped['count'].transform(max)\nresult = df[df['count'] == max_count]\n```", "metadata": {"problem_id": 136, "library_problem_id": 136, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 135}}
{"id": 137, "code": "```python\ngrouped = df.groupby(['Sp', 'Mt'])\nmin_counts = grouped['count'].transform('min')\nresult = df[df['count'] == min_counts]\n```", "metadata": {"problem_id": 137, "library_problem_id": 137, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 135}}
{"id": 138, "code": "```python\ngrouped = df.groupby(['Sp', 'Value'])\nmax_count = grouped['count'].transform('max')\nresult = df[df['count'] == max_count]\n```", "metadata": {"problem_id": 138, "library_problem_id": 138, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 135}}
{"id": 139, "code": "```python\nresult = df.query(\"Category.isin(@filter_list)\")\n```", "metadata": {"problem_id": 139, "library_problem_id": 139, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 139}}
{"id": 140, "code": "```python\nresult = df.query(\"Category not in @filter_list\")\n```", "metadata": {"problem_id": 140, "library_problem_id": 140, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 139}}
{"id": 141, "code": "```python\nresult = pd.melt(df, value_vars=[(x[0], x[1], x[2]) for x in df.columns])\n```", "metadata": {"problem_id": 141, "library_problem_id": 141, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 141}}
{"id": 142, "code": "```python\nvalue_vars = [(i[0], i[1], i[2]) for i in df.columns]\nresult = pd.melt(df, value_vars=value_vars)\n```", "metadata": {"problem_id": 142, "library_problem_id": 142, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 141}}
{"id": 143, "code": "```python\ndf['cumsum'] = df.groupby('id')['val'].cumsum()\n```", "metadata": {"problem_id": 143, "library_problem_id": 143, "library": "Pandas", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 143}}
{"id": 144, "code": "```python\ndf['cumsum'] = df.groupby('id')['val'].cumsum()\n```", "metadata": {"problem_id": 144, "library_problem_id": 144, "library": "Pandas", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 143}}
{"id": 145, "code": "```python\ndf['cumsum'] = df.groupby('id')['val'].cumsum()\n```", "metadata": {"problem_id": 145, "library_problem_id": 145, "library": "Pandas", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 143}}
{"id": 146, "code": "```python\ndf['cummax'] = df.groupby('id')['val'].cummax()\n```", "metadata": {"problem_id": 146, "library_problem_id": 146, "library": "Pandas", "test_case_cnt": 3, "perturbation_type": "Semantic", "perturbation_origin_id": 143}}
{"id": 147, "code": "```python\ndf['cumsum'] = df.groupby('id')['val'].cumsum().clip(lower=0)\n```", "metadata": {"problem_id": 147, "library_problem_id": 147, "library": "Pandas", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 143}}
{"id": 148, "code": "```python\nresult = df.groupby('l')['v'].agg(lambda x: np.sum(x, skipna=False))\n```", "metadata": {"problem_id": 148, "library_problem_id": 148, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 148}}
{"id": 149, "code": "```python\nresult = df.groupby('r')['v'].agg(lambda x: np.sum(x, skipna=False))\n```", "metadata": {"problem_id": 149, "library_problem_id": 149, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 148}}
{"id": 150, "code": "```python\nresult = df.groupby('l')['v'].agg(lambda x: np.sum(x, skipna=False))\n```", "metadata": {"problem_id": 150, "library_problem_id": 150, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 148}}
{"id": 151, "code": "```python\nfrom collections import defaultdict\n\ndef get_relationships(df):\n    relationships = defaultdict(set)\n    \n    for col1 in df.columns:\n        for col2 in df.columns:\n            if col1 != col2:\n                unique_pairs = set(zip(df[col1], df[col2]))\n                if len(unique_pairs) == len(df[col1]):\n                    relationship = 'one-to-one'\n                elif len(unique_pairs) < len(df[col1]):\n                    relationship = 'many-to-one'\n                else:\n                    relationship = 'one-to-many'\n                \n                relationships[(col1, col2)].add(relationship)\n                relationships[(col2, col1)].add(relationship)\n    \n    result = []\n    for (col1, col2), rel_set in relationships.items():\n        result.append(f'{col1} {col2} {\" \".join(sorted(rel_set))}')\n    \n    return result\n\nresult = get_relationships(df)\n```", "metadata": {"problem_id": 151, "library_problem_id": 151, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 151}}
{"id": 152, "code": "```python\nresult = []\nfor i in range(len(df.columns)):\n    for j in range(i+1, len(df.columns)):\n        col1 = df.columns[i]\n        col2 = df.columns[j]\n        unique_col1 = df[col1].nunique()\n        unique_col2 = df[col2].nunique()\n        combined_unique = df[[col1, col2]].drop_duplicates().shape[0]\n        if unique_col1 == combined_unique:\n            relation = 'one-2-many'\n        elif unique_col2 == combined_unique:\n            relation = 'many-2-one'\n        else:\n            relation = 'many-2-many'\n        result.append(f'{col1} {col2} {relation}')\n        result.append(f'{col2} {col1} {relation[::-1]}')\nresult = list(set(result))\n```", "metadata": {"problem_id": 152, "library_problem_id": 152, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 151}}
{"id": 153, "code": "```python\nresult = df.apply(lambda x: df.apply(lambda y: 'one-to-one' if len(x[x == y]) == len(y[y == x]) else \n                                      ('one-to-many' if len(x[x == y]) > 0 else \n                                       'many-to-one' if len(y[y == x]) > 0 else \n                                       'many-to-many'), axis=0), axis=1).T\n```", "metadata": {"problem_id": 153, "library_problem_id": 153, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 151}}
{"id": 154, "code": "```python\nresult = df.apply(lambda x: df.apply(lambda y: 'one-2-one' if len(set(x) & set(y)) == 1 else ('many-2-one' if len(set(x) & set(y)) > 1 else 'NaN'), axis=0), axis=1).T\n```", "metadata": {"problem_id": 154, "library_problem_id": 154, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 151}}
{"id": 155, "code": "```python\nresult = df.sort_values(by='bank', ascending=False).drop_duplicates(subset=['firstname', 'lastname', 'email'], keep='first')\n```", "metadata": {"problem_id": 155, "library_problem_id": 155, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 155}}
{"id": 156, "code": "```python\nresult = pd.to_numeric(s.str.replace(',', ''), errors='coerce')\n```", "metadata": {"problem_id": 156, "library_problem_id": 156, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 156}}
{"id": 157, "code": "```python\ndf['Family'] = ((df['SibSp'] > 0) | (df['Parch'] > 0)).astype(int)\nresult = df.groupby('Family')['Survived'].mean()\n```", "metadata": {"problem_id": 157, "library_problem_id": 157, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 157}}
{"id": 158, "code": "```python\ndf['FamilyGroup'] = ((df['Survived'] > 0) | (df['Parch'] > 0)).map({True: 'Has Family', False: 'No Family'})\nresult = df.groupby('FamilyGroup')['SibSp'].mean()\n```", "metadata": {"problem_id": 158, "library_problem_id": 158, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 157}}
{"id": 159, "code": "```python\ndf['FamilyGroup'] = df.apply(lambda row: 'Has Family' if (row['SibSp'] == 1) & (row['Parch'] == 1) else \n                             ('New Family' if (row['SibSp'] == 0) & (row['Parch'] == 1) else \n                              ('No Family' if (row['SibSp'] == 0) & (row['Parch'] == 0) else 'Old Family')), axis=1)\nresult = df.groupby('FamilyGroup')['Survived'].mean()\n```", "metadata": {"problem_id": 159, "library_problem_id": 159, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 157}}
{"id": 160, "code": "```python\nresult = df.groupby('cokey').apply(lambda x: x.sort_values(by='A')).reset_index(drop=True)\n```", "metadata": {"problem_id": 160, "library_problem_id": 160, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 160}}
{"id": 161, "code": "```python\nresult = df.groupby('cokey').apply(lambda x: x.sort_values(by='A')).reset_index(drop=True)\n```", "metadata": {"problem_id": 161, "library_problem_id": 161, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 160}}
{"id": 162, "code": "```python\ndf.columns = pd.MultiIndex.from_tuples(df.columns)\n```", "metadata": {"problem_id": 162, "library_problem_id": 162, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 162}}
{"id": 163, "code": "```python\ndf.columns = pd.MultiIndex.from_tuples(df.columns)\n```", "metadata": {"problem_id": 163, "library_problem_id": 163, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 162}}
{"id": 164, "code": "```python\ndf.columns = pd.MultiIndex.from_tuples(df.columns)\n```", "metadata": {"problem_id": 164, "library_problem_id": 164, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 162}}
{"id": 165, "code": "```python\nresult = pd.DataFrame({'birdType': someTuple[0], 'birdCount': someTuple[1]})\n```", "metadata": {"problem_id": 165, "library_problem_id": 165, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 165}}
{"id": 166, "code": "```python\nresult = df.groupby('a')['b'].agg(['mean', 'std'])\n```", "metadata": {"problem_id": 166, "library_problem_id": 166, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 166}}
{"id": 167, "code": "```python\nresult = df.groupby('b')['a'].agg(['mean', 'std'])\n```", "metadata": {"problem_id": 167, "library_problem_id": 167, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 166}}
{"id": 168, "code": "```python\nimport numpy as np\n\ndef softmax(x):\n    e_x = np.exp(x - np.max(x))\n    return e_x / e_x.sum()\n\ndef min_max_normalize(x):\n    return (x - x.min()) / (x.max() - x.min())\n\ngrouped = df.groupby('a')['b']\ndf['softmax'] = grouped.transform(softmax)\ndf['min-max'] = grouped.transform(min_max_normalize)\n\ndf\n```", "metadata": {"problem_id": 168, "library_problem_id": 168, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 166}}
{"id": 169, "code": "```python\nresult = df.loc[(df.sum(axis=1) != 0), (df.sum(axis=0) != 0)]\n```", "metadata": {"problem_id": 169, "library_problem_id": 169, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 169}}
{"id": 170, "code": "```python\nresult = df.loc[(df.sum(axis=1) != 0) & (df.sum(axis=0) != 0)]\n```", "metadata": {"problem_id": 170, "library_problem_id": 170, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 169}}
{"id": 171, "code": "```python\nresult = df[(df == 2).any(axis=1) & (df == 0).any(axis=1)]\n```", "metadata": {"problem_id": 171, "library_problem_id": 171, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 169}}
{"id": 172, "code": "```python\ndf[df == 2] = 0\n```", "metadata": {"problem_id": 172, "library_problem_id": 172, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 169}}
{"id": 173, "code": "```python\nresult = s.sort_values().sort_index(kind='mergesort')\n```", "metadata": {"problem_id": 173, "library_problem_id": 173, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 173}}
{"id": 174, "code": "```python\ndf = s.sort_values().reset_index()\n```", "metadata": {"problem_id": 174, "library_problem_id": 174, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 173}}
{"id": 175, "code": "```python\nresult = df[pd.to_numeric(df['A'], errors='coerce').notnull()]\n```", "metadata": {"problem_id": 175, "library_problem_id": 175, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 175}}
{"id": 176, "code": "```python\nresult = df[df['A'].apply(lambda x: isinstance(x, str))]\n```", "metadata": {"problem_id": 176, "library_problem_id": 176, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 175}}
{"id": 177, "code": "```python\ngrouped = df.groupby(['Sp', 'Mt'])\nmax_counts = grouped['count'].transform(max)\nresult = df[df['count'] == max_counts]\n```", "metadata": {"problem_id": 177, "library_problem_id": 177, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 177}}
{"id": 178, "code": "```python\ngrouped = df.groupby(['Sp', 'Mt'])\nmax_count = grouped['count'].transform(max)\nresult = df[df['count'] == max_count]\n```", "metadata": {"problem_id": 178, "library_problem_id": 178, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 177}}
{"id": 179, "code": "```python\ngrouped = df.groupby(['Sp', 'Mt'])\nmin_counts = grouped['count'].transform('min')\nresult = df[df['count'] == min_counts]\n```", "metadata": {"problem_id": 179, "library_problem_id": 179, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 177}}
{"id": 180, "code": "```python\ngrouped = df.groupby(['Sp', 'Value'])\nmax_count = grouped['count'].transform('max')\nresult = df[df['count'] == max_count]\n```", "metadata": {"problem_id": 180, "library_problem_id": 180, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 177}}
{"id": 181, "code": "```python\ndf['Date'] = df['Member'].map(dict).fillna(df['Date'])\n```", "metadata": {"problem_id": 181, "library_problem_id": 181, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 181}}
{"id": 182, "code": "```python\ndf['Date'] = df['Member'].map(dict).fillna('17/8/1926')\n```", "metadata": {"problem_id": 182, "library_problem_id": 182, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 181}}
{"id": 183, "code": "```python\ndf['Date'] = df['Member'].map(example_dict).fillna(df['Date'])\n```", "metadata": {"problem_id": 183, "library_problem_id": 183, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 181}}
{"id": 184, "code": "```python\ndf['Date'] = df['Member'].map(dict).fillna('17/8/1926').dt.strftime('%d-%b-%Y')\n```", "metadata": {"problem_id": 184, "library_problem_id": 184, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 181}}
{"id": 185, "code": "```python\ndf['Date'] = pd.to_datetime(df['Date'], format='%d/%m/%y')\ndf['Count_d'] = df.Date.map(df.groupby('Date').size())\ndf['Count_m'] = df.Date.dt.to_period('M').map(df.groupby(df.Date.dt.to_period('M')).size())\ndf['Count_y'] = df.Date.dt.to_period('Y').map(df.groupby(df.Date.dt.to_period('Y')).size())\n```", "metadata": {"problem_id": 185, "library_problem_id": 185, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 185}}
{"id": 186, "code": "```python\ndf['Date'] = pd.to_datetime(df['Date'], format='%d/%m/%y')\ndf['Count_d'] = df.Date.map(df.groupby('Date').size())\ndf['Count_m'] = df.Date.dt.to_period('M').map(df.groupby(df.Date.dt.to_period('M')).size())\ndf['Count_y'] = df.Date.dt.year.map(df.groupby(df.Date.dt.year).size())\ndf['Count_Val'] = df.Val.map(df.groupby('Val').size())\n```", "metadata": {"problem_id": 186, "library_problem_id": 186, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 185}}
{"id": 187, "code": "```python\ndf['Date'] = pd.to_datetime(df['Date'], format='%d/%m/%y')\ndf['Count_d'] = df.Date.map(df.groupby('Date').size())\ndf['Count_m'] = df.Date.dt.to_period('M').map(df.groupby(df.Date.dt.to_period('M')).size())\ndf['Count_y'] = df.Date.dt.year.map(df.groupby(df.Date.dt.year).size())\ndf['Count_w'] = df.Date.dt.isocalendar().week.map(df.groupby(df.Date.dt.isocalendar().week).size())\ndf['Count_Val'] = df.Val.map(df.groupby('Val').size())\n```", "metadata": {"problem_id": 187, "library_problem_id": 187, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 185}}
{"id": 188, "code": "```python\nresult1 = df.groupby('Date').apply(lambda x: (x == 0).sum()).drop(columns=['Date'])\nresult2 = df.groupby('Date').apply(lambda x: (x != 0).sum()).drop(columns=['Date'])\n```", "metadata": {"problem_id": 188, "library_problem_id": 188, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 188}}
{"id": 189, "code": "```python\nresult1 = df.groupby('Date').apply(lambda x: (x % 2 == 0).sum()).drop(columns=['Date'])\nresult2 = df.groupby('Date').apply(lambda x: (x % 2 != 0).sum()).drop(columns=['Date'])\n```", "metadata": {"problem_id": 189, "library_problem_id": 189, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 188}}
{"id": 190, "code": "```python\nresult = pd.pivot_table(df, values=['D','E'], rows=['B'], aggfunc={'D': np.sum, 'E': np.mean})\n```", "metadata": {"problem_id": 190, "library_problem_id": 190, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 190}}
{"id": 191, "code": "```python\nresult = pd.pivot_table(df, values=['D','E'], rows=['B'], aggfunc={'D': np.sum, 'E': np.mean})\n```", "metadata": {"problem_id": 191, "library_problem_id": 191, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 190}}
{"id": 192, "code": "```python\nresult = pd.pivot_table(df, values=['D','E'], rows=['B'], aggfunc={'D': np.sum, 'E': np.mean})\n```", "metadata": {"problem_id": 192, "library_problem_id": 192, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 190}}
{"id": 193, "code": "```python\nresult = pd.pivot_table(df, values=['D','E'], rows=['B'], aggfunc={'D': np.max, 'E': np.min})\n```", "metadata": {"problem_id": 193, "library_problem_id": 193, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 190}}
{"id": 194, "code": "```python\nimport dask.dataframe as dd\n\n# Assuming df is your Dask DataFrame\ndf_exploded = df.explode('var2')\nresult = df_exploded\n```", "metadata": {"problem_id": 194, "library_problem_id": 194, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 194}}
{"id": 195, "code": "```python\nimport dask.dataframe as dd\n\n# Assuming df is your Dask DataFrame\ndf_exploded = df.explode('var2')\n```", "metadata": {"problem_id": 195, "library_problem_id": 195, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 194}}
{"id": 196, "code": "```python\nimport dask.dataframe as dd\n\n# Assuming df is your Dask DataFrame\ndf = dd.from_pandas(pd.DataFrame([[\"A\", \"Z-Y\"], [\"B\", \"X\"], [\"C\", \"W-U-V\"]], index=[1,2,3], columns=['var1', 'var2']), npartitions=1)\n\n# Splitting the 'var2' column and exploding it into multiple rows\nresult = df.explode('var2')\n```", "metadata": {"problem_id": 196, "library_problem_id": 196, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 194}}
{"id": 197, "code": "```python\ndf['new'] = df['str'].apply(lambda x: sum(1 for char in x if not char.isalnum()))\n```", "metadata": {"problem_id": 197, "library_problem_id": 197, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 197}}
{"id": 198, "code": "```python\ndf['new'] = df['str'].apply(lambda x: sum(1 for char in x if not char.isalpha()))\n```", "metadata": {"problem_id": 198, "library_problem_id": 198, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 197}}
{"id": 199, "code": "```python\ndf[['fips', 'row']] = df['row'].str.split(' ', 1, expand=True)\n```", "metadata": {"problem_id": 199, "library_problem_id": 199, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 199}}
{"id": 200, "code": "```python\ndf[['fips', 'row']] = df['row'].str.split(' ', 1, expand=True)\n```", "metadata": {"problem_id": 200, "library_problem_id": 200, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 199}}
{"id": 201, "code": "```python\ndf[['fips', 'medi', 'row']] = df['row'].str.split(' ', n=2, expand=True)\n```", "metadata": {"problem_id": 201, "library_problem_id": 201, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 199}}
{"id": 202, "code": "```python\ndf.set_index('Name', inplace=True)\ndf = df.replace(0, pd.NA).cumsum(axis=1) / (df.notna().cumsum(axis=1))\ndf.reset_index(inplace=True)\n```", "metadata": {"problem_id": 202, "library_problem_id": 202, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 202}}
{"id": 203, "code": "```python\ndf.iloc[:, 1:] = df.iloc[:, 1:].apply(lambda x: x[::-1].replace(0, np.nan).cumsum().fillna(method='ffill').astype(int)[::-1], axis=1)\n```", "metadata": {"problem_id": 203, "library_problem_id": 203, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 202}}
{"id": 204, "code": "```python\nresult = df.set_index('Name').apply(lambda x: x.replace(0, pd.NA).expanding().mean().fillna(x)).reset_index()\n```", "metadata": {"problem_id": 204, "library_problem_id": 204, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 202}}
{"id": 205, "code": "```python\ndf.iloc[:, 1:] = df.iloc[:, 1:].apply(lambda x: x[::-1].replace(0, np.nan).cumsum().fillna(method='ffill').astype(int)[::-1], axis=1)\n```", "metadata": {"problem_id": 205, "library_problem_id": 205, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 202}}
{"id": 206, "code": "```python\ndf['label'] = (df['Close'].diff() > 0).astype(int)\ndf.loc[0, 'label'] = 1\n```", "metadata": {"problem_id": 206, "library_problem_id": 206, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 206}}
{"id": 207, "code": "```python\ndf['label'] = (df['Close'].diff() > 0).astype(int)\ndf.loc[0, 'label'] = 1\n```", "metadata": {"problem_id": 207, "library_problem_id": 207, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 206}}
{"id": 208, "code": "```python\ndf['label'] = df['Close'].diff().apply(lambda x: 1 if x > 0 else (0 if x == 0 else -1))\ndf.loc[0, 'label'] = 1\ndf['DateTime'] = df['DateTime'].dt.strftime('%d-%b-%Y')\n```", "metadata": {"problem_id": 208, "library_problem_id": 208, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 206}}
{"id": 209, "code": "```python\ndf['Duration'] = df.apply(lambda x: x['departure_time'].iloc[x.name + 1] - x['arrival_time'].iloc[x.name], axis=1)\n```", "metadata": {"problem_id": 209, "library_problem_id": 209, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 209}}
{"id": 210, "code": "```python\ndf['Duration'] = df['departure_time'].shift(-1) - df['arrival_time']\ndf['Duration'] = df['Duration'].dt.total_seconds()\n```", "metadata": {"problem_id": 210, "library_problem_id": 210, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 209}}
{"id": 211, "code": "```python\ndf['arrival_time'] = pd.to_datetime(df['arrival_time'], errors='coerce')\ndf['departure_time'] = pd.to_datetime(df['departure_time'])\ndf['Duration'] = df.groupby('id')['arrival_time'].shift(-1) - df['departure_time']\ndf['Duration'] = df['Duration'].dt.total_seconds()\ndf['arrival_time'] = df['arrival_time'].dt.strftime('%d-%b-%Y %H:%M:%S')\ndf['departure_time'] = df['departure_time'].dt.strftime('%d-%b-%Y %H:%M:%S')\n```", "metadata": {"problem_id": 211, "library_problem_id": 211, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 209}}
{"id": 212, "code": "```python\nresult = df.groupby('key1')['key2'].apply(lambda x: (x == 'one').sum()).reset_index(name='count')\n```", "metadata": {"problem_id": 212, "library_problem_id": 212, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 212}}
{"id": 213, "code": "```python\nresult = df.groupby('key1')['key2'].apply(lambda x: (x == 'two').sum()).reset_index(name='count')\n```", "metadata": {"problem_id": 213, "library_problem_id": 213, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 212}}
{"id": 214, "code": "```python\nresult = df[df['key2'].str.endswith('e')].groupby(['key1']).size().reset_index(name='count')\n```", "metadata": {"problem_id": 214, "library_problem_id": 214, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 212}}
{"id": 215, "code": "```python\nmax_result, min_result = df.index.max(), df.index.min()\n```", "metadata": {"problem_id": 215, "library_problem_id": 215, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 215}}
{"id": 216, "code": "```python\nmode_result = df.index[df['value'].mode()[0]]\nmedian_result = df.index[df['value'].median()]\n```", "metadata": {"problem_id": 216, "library_problem_id": 216, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 215}}
{"id": 217, "code": "df = df[(df['closing_price'] >= 99) & (df['closing_price'] <= 101)]", "metadata": {"problem_id": 217, "library_problem_id": 217, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 217}}
{"id": 218, "code": "df = df[(df['closing_price'] < 99) | (df['closing_price'] > 101)]", "metadata": {"problem_id": 218, "library_problem_id": 218, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 217}}
{"id": 219, "code": "```python\nresult = df.loc[df.groupby('item')['diff'].idxmin()]\n```", "metadata": {"problem_id": 219, "library_problem_id": 219, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 219}}
{"id": 220, "code": "```python\nd6['SOURCE_NAME'] = d6['SOURCE_NAME'].apply(lambda x: '_'.join(x.split('_')[:-1]) if '_' in x else x)\n```", "metadata": {"problem_id": 220, "library_problem_id": 220, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 220}}
{"id": 221, "code": "```python\ndf['SOURCE_NAME'] = df['SOURCE_NAME'].apply(lambda x: '_'.join(x.split('_')[-1:]) if '_' in x else x)\n```", "metadata": {"problem_id": 221, "library_problem_id": 221, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 220}}
{"id": 222, "code": "```python\nresult = df['SOURCE_NAME'].str.rsplit('_', 1).str[0]\n```", "metadata": {"problem_id": 222, "library_problem_id": 222, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 220}}
{"id": 223, "code": "```python\nnan_indices = df[df['Column_x'].isna()].index\nnum_nan = len(nan_indices)\nfirst_half = nan_indices[:num_nan // 2]\nsecond_half = nan_indices[num_nan // 2:]\n\ndf.loc[first_half, 'Column_x'] = 0\ndf.loc[second_half, 'Column_x'] = 1\n```", "metadata": {"problem_id": 223, "library_problem_id": 223, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 223}}
{"id": 224, "code": "```python\nnan_indices = df[df['Column_x'].isna()].index\nnum_nan = len(nan_indices)\nfirst_third = nan_indices[:num_nan//3]\nsecond_third = nan_indices[num_nan//3:2*num_nan//3]\nthird_third = nan_indices[2*num_nan//3:]\n\ndf.loc[first_third, 'Column_x'] = 0\ndf.loc[second_third, 'Column_x'] = 0.5\ndf.loc[third_third, 'Column_x'] = 1\n```", "metadata": {"problem_id": 224, "library_problem_id": 224, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 223}}
{"id": 225, "code": "```python\nnan_count = df['Column_x'].isna().sum()\nzero_count = nan_count // 2\none_count = nan_count - zero_count\n\nzeros = [0] * zero_count\nones = [1] * one_count\n\nfill_values = zeros + ones\nnp.random.shuffle(fill_values)\n\ndf.loc[df['Column_x'].isna(), 'Column_x'] = fill_values\n```", "metadata": {"problem_id": 225, "library_problem_id": 225, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 223}}
{"id": 226, "code": "```python\nresult = pd.concat([a.stack(), b.stack()], axis=1).apply(lambda x: (x[0], x[1]), axis=1).unstack()\n```", "metadata": {"problem_id": 226, "library_problem_id": 226, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 226}}
{"id": 227, "code": "```python\nresult = pd.concat([a.stack(), b.stack(), c.stack()], axis=1).apply(tuple, axis=1).unstack()\n```", "metadata": {"problem_id": 227, "library_problem_id": 227, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 226}}
{"id": 228, "code": "```python\nresult = pd.concat([a.stack(), b.stack()], axis=1).apply(lambda x: (x[0], x[1]), axis=1).unstack().reset_index(drop=True)\n```", "metadata": {"problem_id": 228, "library_problem_id": 228, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 226}}
{"id": 229, "code": "```python\nresult = pd.crosstab(df['username'], pd.cut(df['views'], bins))\n```", "metadata": {"problem_id": 229, "library_problem_id": 229, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 229}}
{"id": 230, "code": "```python\nresult = df.groupby(['username', pd.cut(df['views'], bins)]).size().unstack(fill_value=0)\n```", "metadata": {"problem_id": 230, "library_problem_id": 230, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 229}}
{"id": 231, "code": "```python\nresult = pd.crosstab(df['username'], pd.cut(df['views'], bins))\n```", "metadata": {"problem_id": 231, "library_problem_id": 231, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 229}}
{"id": 232, "code": "```python\nresult = pd.DataFrame({'text': [', '.join(df['text'].tolist())]})\n```", "metadata": {"problem_id": 232, "library_problem_id": 232, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 232}}
{"id": 233, "code": "```python\nresult = pd.DataFrame({'text': ['-'.join(df['text'].tolist())]})\n```", "metadata": {"problem_id": 233, "library_problem_id": 233, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 232}}
{"id": 234, "code": "```python\nresult = pd.DataFrame({'text': [', '.join(df['text'].tolist()[::-1])]})\n```", "metadata": {"problem_id": 234, "library_problem_id": 234, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 232}}
{"id": 235, "code": "```python\nresult = pd.Series([', '.join(df['text'].tolist())], name='text')\n```", "metadata": {"problem_id": 235, "library_problem_id": 235, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 232}}
{"id": 236, "code": "```python\nresult = pd.Series(['-'.join(df['text'][::-1])], name='text')\n```", "metadata": {"problem_id": 236, "library_problem_id": 236, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 232}}
{"id": 237, "code": "```python\nresult = pd.merge(df2, df1[['id', 'city', 'district']], how='left')\nresult = pd.concat([df1, result], axis=0).sort_values(by=['id', 'date']).reset_index(drop=True)\n```", "metadata": {"problem_id": 237, "library_problem_id": 237, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 237}}
{"id": 238, "code": "```python\nresult = pd.merge(df1, df2, on='id', how='outer').sort_values(by=['id', 'date']).fillna('NaN')\nresult['date'] = pd.to_datetime(result['date'], format='%Y/%m/%d').dt.strftime('%d-%b-%Y')\n```", "metadata": {"problem_id": 238, "library_problem_id": 238, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 237}}
{"id": 239, "code": "```python\nresult = pd.merge(df1, df2, on='id', how='outer').sort_values(by=['id', 'date']).fillna(method='ffill')\n```", "metadata": {"problem_id": 239, "library_problem_id": 239, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 237}}
{"id": 240, "code": "```python\nresult = C.set_index('A').combine_first(D.set_index('A')).reset_index()\n```", "metadata": {"problem_id": 240, "library_problem_id": 240, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 240}}
{"id": 241, "code": "```python\nresult = C.set_index('A').combine_first(D.set_index('A')).reset_index()\n```", "metadata": {"problem_id": 241, "library_problem_id": 241, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 240}}
{"id": 242, "code": "```python\nresult = pd.merge(C, D, how='left', on='A', suffixes=('', '_y'))\nresult['B'] = result['B_y'].combine_first(result['B'])\nresult.drop(columns=['B_y'], inplace=True)\nresult['duplicated'] = result.duplicated(subset='A', keep=False)\nresult = result[['A', 'B', 'duplicated']]\n```", "metadata": {"problem_id": 242, "library_problem_id": 242, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 240}}
{"id": 243, "code": "```python\nresult = df.groupby('user').apply(lambda x: sorted(zip(x['time'], x['amount']))).reset_index(name='transactions')\n```", "metadata": {"problem_id": 243, "library_problem_id": 243, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 243}}
{"id": 244, "code": "```python\nresult = df.groupby('user').apply(lambda x: sorted(zip(x['time'], x['amount']))).reset_index(name='amount-time-tuple')\n```", "metadata": {"problem_id": 244, "library_problem_id": 244, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 243}}
{"id": 245, "code": "```python\nresult = df.groupby('user').apply(lambda x: sorted(zip(x['time'], x['amount']))).reset_index(name='amount-time-tuple')\n```", "metadata": {"problem_id": 245, "library_problem_id": 245, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 243}}
{"id": 246, "code": "```python\ndf = pd.DataFrame(series.tolist(), index=series.index)\n```", "metadata": {"problem_id": 246, "library_problem_id": 246, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 246}}
{"id": 247, "code": "```python\ndf = pd.DataFrame(series.tolist(), index=series.index).reset_index().rename(columns={'index': 'name'})\n```", "metadata": {"problem_id": 247, "library_problem_id": 247, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 246}}
{"id": 248, "code": "```python\nresult = [col for col in df.columns if s in col and col != s]\n```", "metadata": {"problem_id": 248, "library_problem_id": 248, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 248}}
{"id": 249, "code": "```python\nresult = df[[col for col in df.columns if s in col and col != s]]\n```", "metadata": {"problem_id": 249, "library_problem_id": 249, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 248}}
{"id": 250, "code": "```python\nimport re\n\n# Extract column names containing 'spike' but not exactly matching it\nmatching_columns = [col for col in df.columns if re.search(r'\\bspike\\b', col) and col != s]\n\n# Rename these columns\nfor i, col in enumerate(matching_columns):\n    df.rename(columns={col: f'spike{i+1}'}, inplace=True)\n\nresult = df\n```", "metadata": {"problem_id": 250, "library_problem_id": 250, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 248}}
{"id": 251, "code": "```python\nresult = pd.DataFrame(df['codes'].tolist(), index=df.index)\n```", "metadata": {"problem_id": 251, "library_problem_id": 251, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 251}}
{"id": 252, "code": "```python\nresult = pd.DataFrame(df['codes'].tolist(), index=df.index)\n```", "metadata": {"problem_id": 252, "library_problem_id": 252, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 251}}
{"id": 253, "code": "```python\nresult = pd.DataFrame(df['codes'].tolist(), index=df.index)\n```", "metadata": {"problem_id": 253, "library_problem_id": 253, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 251}}
{"id": 254, "code": "```python\nresult = sum(df['col1'], [])\n```", "metadata": {"problem_id": 254, "library_problem_id": 254, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 254}}
{"id": 255, "code": "```python\nresult = ','.join(str(item) for sublist in df['col1'].tolist() for item in reversed(sublist))\n```", "metadata": {"problem_id": 255, "library_problem_id": 255, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 254}}
{"id": 256, "code": "```python\nresult = ','.join(str(item) for sublist in df['col1'] for item in sublist)\n```", "metadata": {"problem_id": 256, "library_problem_id": 256, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 254}}
{"id": 257, "code": "```python\ndf = df.resample('2T', on='Time').mean().reset_index()\n```", "metadata": {"problem_id": 257, "library_problem_id": 257, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 257}}
{"id": 258, "code": "```python\ndf = df.resample('3T', on='Time').sum().reset_index()\n```", "metadata": {"problem_id": 258, "library_problem_id": 258, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 257}}
{"id": 259, "code": "```python\ndf['RANK'] = df.groupby('ID')['TIME'].rank(ascending=True)\n```", "metadata": {"problem_id": 259, "library_problem_id": 259, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 259}}
{"id": 260, "code": "```python\ndf['RANK'] = df.groupby('ID')['TIME'].rank(ascending=False)\n```", "metadata": {"problem_id": 260, "library_problem_id": 260, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 259}}
{"id": 261, "code": "```python\ndf['RANK'] = df.groupby('ID')['TIME'].rank(ascending=False)\ndf['TIME'] = pd.to_datetime(df['TIME']).dt.strftime('%d-%b-%Y %a %H:%M:%S')\n```", "metadata": {"problem_id": 261, "library_problem_id": 261, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 259}}
{"id": 262, "code": "```python\nresult = df[df.index.get_level_values('a').map(filt)]\n```", "metadata": {"problem_id": 262, "library_problem_id": 262, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 262}}
{"id": 263, "code": "```python\nresult = df[df.index.get_level_values('a').map(filt)]\n```", "metadata": {"problem_id": 263, "library_problem_id": 263, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 262}}
{"id": 264, "code": "```python\nresult = df.columns[(df.iloc[0] != df.iloc[8]) & ~(df.iloc[0].isna() & df.iloc[8].isna())]\n```", "metadata": {"problem_id": 264, "library_problem_id": 264, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 264}}
{"id": 265, "code": "```python\nresult = df.loc[0] == df.loc[8]\nresult = result[result].index.tolist()\n```", "metadata": {"problem_id": 265, "library_problem_id": 265, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 264}}
{"id": 266, "code": "```python\nresult = [col for col in df.columns if not equalp(df.at[0, col], df.at[8, col])]\n```", "metadata": {"problem_id": 266, "library_problem_id": 266, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 264}}
{"id": 267, "code": "```python\nresult = [(df.iloc[0, i], df.iloc[8, i]) for i in range(len(df.columns)) if df.iloc[0, i] != df.iloc[8, i]]\n```", "metadata": {"problem_id": 267, "library_problem_id": 267, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 264}}
{"id": 268, "code": "```python\nts = df.set_index('Date')['Value']\n```", "metadata": {"problem_id": 268, "library_problem_id": 268, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 268}}
{"id": 269, "code": "```python\ndf = df.melt().groupby('variable')['value'].apply(lambda x: ','.join(map(str, x))).reset_index()\ndf.columns = [f'{col}_{i+1}' if i > 0 else col for i, col in enumerate(df.columns)]\ndf = df.T.reset_index(drop=True)\n```", "metadata": {"problem_id": 269, "library_problem_id": 269, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 269}}
{"id": 270, "code": "```python\ndf = df.melt().set_index('variable').T\n```", "metadata": {"problem_id": 270, "library_problem_id": 270, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 269}}
{"id": 271, "code": "```python\ndf['dogs'] = df['dogs'].apply(lambda x: round(x, 2) if pd.notna(x) else x)\n```", "metadata": {"problem_id": 271, "library_problem_id": 271, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 271}}
{"id": 272, "code": "```python\ndf['dogs'] = df['dogs'].apply(lambda x: round(x, 2) if pd.notna(x) else x)\ndf['cats'] = df['cats'].apply(lambda x: round(x, 2) if pd.notna(x) else x)\n```", "metadata": {"problem_id": 272, "library_problem_id": 272, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 271}}
{"id": 273, "code": "```python\ndf['Sum'] = df[list_of_my_columns].sum(axis=1)\n```", "metadata": {"problem_id": 273, "library_problem_id": 273, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 273}}
{"id": 274, "code": "```python\ndf['Avg'] = df[list_of_my_columns].mean(axis=1)\n```", "metadata": {"problem_id": 274, "library_problem_id": 274, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 273}}
{"id": 275, "code": "```python\ndf['Avg'] = df[list_of_my_columns].mean(axis=1)\ndf['Min'] = df[list_of_my_columns].min(axis=1)\ndf['Max'] = df[list_of_my_columns].max(axis=1)\ndf['Median'] = df[list_of_my_columns].median(axis=1)\n```", "metadata": {"problem_id": 275, "library_problem_id": 275, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 273}}
{"id": 276, "code": "```python\nresult = df.sort_index(level='time')\n```", "metadata": {"problem_id": 276, "library_problem_id": 276, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 276}}
{"id": 277, "code": "```python\nresult = df.sort_values(by='VIM')\n```", "metadata": {"problem_id": 277, "library_problem_id": 277, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 276}}
{"id": 278, "code": "```python\ndays_to_remove = ['2020-02-17', '2020-02-18']\nsp = sp[~sp.index.normalize().isin(pd.to_datetime(days_to_remove))]\n```", "metadata": {"problem_id": 278, "library_problem_id": 278, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 278}}
{"id": 279, "code": "```python\nresult = df[~((df.index >= '2020-02-17') & (df.index <= '2020-02-18'))]\n```", "metadata": {"problem_id": 279, "library_problem_id": 279, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 278}}
{"id": 280, "code": "```python\nresult = corr.where(corr > 0.3).stack().reset_index(name='Pearson Correlation Coefficient').dropna()\n```", "metadata": {"problem_id": 280, "library_problem_id": 280, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 280}}
{"id": 281, "code": "```python\nresult = corr.stack().loc[lambda x: x > 0.3]\n```", "metadata": {"problem_id": 281, "library_problem_id": 281, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 280}}
{"id": 282, "code": "```python\ndf.columns.values[-1] = 'Test'\n```", "metadata": {"problem_id": 282, "library_problem_id": 282, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 282}}
{"id": 283, "code": "```python\ndf.columns.values[0] = 'Test'\n```", "metadata": {"problem_id": 283, "library_problem_id": 283, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 282}}
{"id": 284, "code": "```python\ndf['frequent'] = df.mode(axis=1).iloc[:, 0]\ndf['freq_count'] = df.eq(df['frequent'], axis=1).sum(axis=1)\n```", "metadata": {"problem_id": 284, "library_problem_id": 284, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 284}}
{"id": 285, "code": "```python\ndf['frequent'] = df.mode(axis=1)[0]\ndf['freq_count'] = df.nunique(axis=1)\n```", "metadata": {"problem_id": 285, "library_problem_id": 285, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 284}}
{"id": 286, "code": "```python\ndf['frequent'] = df.apply(lambda row: sorted(row.value_counts().index), axis=1)\ndf['freq_count'] = df.apply(lambda row: row.value_counts()[row.value_counts().idxmax()], axis=1)\n```", "metadata": {"problem_id": 286, "library_problem_id": 286, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 284}}
{"id": 287, "code": "```python\nresult = df.groupby([\"id1\", \"id2\"]).agg({'foo': 'mean', 'bar': 'mean'}).reset_index()\n```", "metadata": {"problem_id": 287, "library_problem_id": 287, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 287}}
{"id": 288, "code": "```python\ndf['bar'] = df['bar'].replace('NULL', 0).astype(float)\nresult = df.groupby([\"id1\", \"id2\"])[[\"foo\", \"bar\"]].mean().reset_index()\n```", "metadata": {"problem_id": 288, "library_problem_id": 288, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 287}}
{"id": 289, "code": "```python\nresult = pd.merge(df_a, df_b[['EntityNum', 'a_col']], on='EntityNum')\n```", "metadata": {"problem_id": 289, "library_problem_id": 289, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 289}}
{"id": 290, "code": "```python\ndf_c = pd.merge(df_a, df_b[['EntityNum', 'b_col']], on='EntityNum')\n```", "metadata": {"problem_id": 290, "library_problem_id": 290, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 289}}
{"id": 291, "code": "```python\nresult = a.shape\n```", "metadata": {"problem_id": 291, "library_problem_id": 0, "library": "Numpy", "test_case_cnt": 4, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 292, "code": "```python\nx = x[~np.isnan(x)]\n```", "metadata": {"problem_id": 292, "library_problem_id": 1, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 1}}
{"id": 293, "code": "```python\nx[np.isnan(x)] = np.inf\n```", "metadata": {"problem_id": 293, "library_problem_id": 2, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 1}}
{"id": 294, "code": "```python\nresult = [list(filter(lambda y: not np.isnan(y), sublist)) for sublist in x]\n```", "metadata": {"problem_id": 294, "library_problem_id": 3, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 1}}
{"id": 295, "code": "```python\nb = np.eye(np.max(a) + 1)[a]\n```", "metadata": {"problem_id": 295, "library_problem_id": 4, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 4}}
{"id": 296, "code": "```python\nb = np.eye(np.max(a) + 1)[a]\n```", "metadata": {"problem_id": 296, "library_problem_id": 5, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 4}}
{"id": 297, "code": "```python\nunique_a = np.unique(a)\nb = np.eye(len(unique_a))[np.searchsorted(unique_a, a)]\n```", "metadata": {"problem_id": 297, "library_problem_id": 6, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 4}}
{"id": 298, "code": "```python\nunique_a = np.unique(a)\nb = np.eye(len(unique_a))[np.searchsorted(unique_a, a)]\n```", "metadata": {"problem_id": 298, "library_problem_id": 7, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 4}}
{"id": 299, "code": "```python\nmax_val = a.max()\nflat_a = a.ravel()\nunique_vals = np.unique(flat_a)\nval_to_index = {val: idx for idx, val in enumerate(unique_vals)}\nb = np.eye(max_val + 1)[flat_a].reshape(a.shape + (max_val + 1,))\n```", "metadata": {"problem_id": 299, "library_problem_id": 8, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 4}}
{"id": 300, "code": "```python\nresult = np.percentile(a, p)\n```", "metadata": {"problem_id": 300, "library_problem_id": 9, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 9}}
{"id": 301, "code": "```python\nB = A.reshape(-1, ncol)\n```", "metadata": {"problem_id": 301, "library_problem_id": 10, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 10}}
{"id": 302, "code": "```python\nB = A.reshape(nrow, -1)\n```", "metadata": {"problem_id": 302, "library_problem_id": 11, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 10}}
{"id": 303, "code": "```python\nB = A[:len(A) - len(A) % ncol].reshape(-1, ncol)\n```", "metadata": {"problem_id": 303, "library_problem_id": 12, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 10}}
{"id": 304, "code": "```python\nB = A[-(len(A) % ncol):].reshape(-1, ncol)[::-1]\n```", "metadata": {"problem_id": 304, "library_problem_id": 13, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 10}}
{"id": 305, "code": "```python\nresult = np.concatenate((np.full(shift, np.nan), a[:-shift]))\n```", "metadata": {"problem_id": 305, "library_problem_id": 14, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 14}}
{"id": 306, "code": "```python\nresult = np.roll(a, shift, axis=1)\n```", "metadata": {"problem_id": 306, "library_problem_id": 15, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 14}}
{"id": 307, "code": "```python\nresult = np.roll(a, shift, axis=1)\n```", "metadata": {"problem_id": 307, "library_problem_id": 16, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 14}}
{"id": 308, "code": "```python\nnp.random.seed(0)\nr_old = np.random.randint(3, size=(100, 2000)) - 1\nnp.random.seed(0)\nr_new = np.random.randint(3, size=(100, 2000)) - 1\n```", "metadata": {"problem_id": 308, "library_problem_id": 17, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 17}}
{"id": 309, "code": "```python\nresult = np.argmax(a)\n```", "metadata": {"problem_id": 309, "library_problem_id": 18, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 18}}
{"id": 310, "code": "```python\nresult = np.argmin(a)\n```", "metadata": {"problem_id": 310, "library_problem_id": 19, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 18}}
{"id": 311, "code": "```python\nresult = np.unravel_index(np.argmax(a), a.shape, order='F')\n```", "metadata": {"problem_id": 311, "library_problem_id": 20, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 18}}
{"id": 312, "code": "```python\nresult = np.unravel_index(np.argmax(a), a.shape)\n```", "metadata": {"problem_id": 312, "library_problem_id": 21, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 18}}
{"id": 313, "code": "```python\nresult = np.argmax(a)\n```", "metadata": {"problem_id": 313, "library_problem_id": 22, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 18}}
{"id": 314, "code": "```python\nsecond_largest_index = np.argsort(a, axis=None)[-2]\nresult = np.unravel_index(second_largest_index, a.shape)\n```", "metadata": {"problem_id": 314, "library_problem_id": 23, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 18}}
{"id": 315, "code": "```python\na = a[:, ~z]\n```", "metadata": {"problem_id": 315, "library_problem_id": 24, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 24}}
{"id": 316, "code": "a = a[~np.isnan(a).any(axis=1)]", "metadata": {"problem_id": 316, "library_problem_id": 25, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 24}}
{"id": 317, "code": "```python\nresult = np.array(a)\n```", "metadata": {"problem_id": 317, "library_problem_id": 26, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 26}}
{"id": 318, "code": "```python\na[:, permutation]\n```", "metadata": {"problem_id": 318, "library_problem_id": 27, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 27}}
{"id": 319, "code": "```python\nresult = a[permutation]\n```", "metadata": {"problem_id": 319, "library_problem_id": 28, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 27}}
{"id": 320, "code": "```python\nresult = np.unravel_index(np.argmin(a), a.shape)\n```", "metadata": {"problem_id": 320, "library_problem_id": 29, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 29}}
{"id": 321, "code": "```python\nresult = np.unravel_index(np.argmax(a), a.shape)\n```", "metadata": {"problem_id": 321, "library_problem_id": 30, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 29}}
{"id": 322, "code": "```python\nnp.argmin(a, axis=None, out=None)\n```", "metadata": {"problem_id": 322, "library_problem_id": 31, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 29}}
{"id": 323, "code": "```python\nresult = np.sin(np.radians(degree))\n```", "metadata": {"problem_id": 323, "library_problem_id": 32, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 32}}
{"id": 324, "code": "```python\nresult = np.cos(np.radians(degree))\n```", "metadata": {"problem_id": 324, "library_problem_id": 33, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 32}}
{"id": 325, "code": "```python\nif np.sin(np.deg2rad(number)) > np.sin(number):\n    result = 0\nelse:\n    result = 1\n```", "metadata": {"problem_id": 325, "library_problem_id": 34, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 32}}
{"id": 326, "code": "```python\nnp.degrees(np.arcsin(value))\n```", "metadata": {"problem_id": 326, "library_problem_id": 35, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 32}}
{"id": 327, "code": "```python\nresult = np.pad(A, (0, max(0, length - len(A))), 'constant', constant_values=0)\n```", "metadata": {"problem_id": 327, "library_problem_id": 36, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 36}}
{"id": 328, "code": "```python\nresult = np.pad(A, (0, max(0, length - len(A))), 'constant', constant_values=0)\n```", "metadata": {"problem_id": 328, "library_problem_id": 37, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 36}}
{"id": 329, "code": "a = np.power(a, power)", "metadata": {"problem_id": 329, "library_problem_id": 38, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 38}}
{"id": 330, "code": "```python\nresult = np.power(a, power)\n### END SOLUTION\nreturn result\n```", "metadata": {"problem_id": 330, "library_problem_id": 39, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 38}}
{"id": 331, "code": "```python\nfrom math import gcd\n\nnumerator = 98\ndenominator = 42\ncommon_divisor = gcd(numerator, denominator)\nresult = (numerator // common_divisor, denominator // common_divisor)\n```", "metadata": {"problem_id": 331, "library_problem_id": 40, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 40}}
{"id": 332, "code": "```python\nfrom math import gcd\n\ndef f(numerator=98, denominator=42):\n    common_divisor = gcd(numerator, denominator)\n    return (numerator // common_divisor, denominator // common_divisor)\n```", "metadata": {"problem_id": 332, "library_problem_id": 41, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 40}}
{"id": 333, "code": "```python\nfrom fractions import Fraction\n\ndef reduce_fraction(numerator, denominator):\n    if denominator == 0:\n        return (np.nan, np.nan)\n    else:\n        frac = Fraction(numerator, denominator)\n        return (frac.numerator, frac.denominator)\n\n# Example usage:\nnumerator = 98\ndenominator = 42\nresult = reduce_fraction(numerator, denominator)\nprint(result)  # Output: (7, 3)\n```", "metadata": {"problem_id": 333, "library_problem_id": 42, "library": "Numpy", "test_case_cnt": 4, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 40}}
{"id": 334, "code": "```python\nresult = (a + b + c) / 3\n```", "metadata": {"problem_id": 334, "library_problem_id": 43, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 43}}
{"id": 335, "code": "```python\nresult = np.maximum.reduce([a, b, c])\n```", "metadata": {"problem_id": 335, "library_problem_id": 44, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 43}}
{"id": 336, "code": "```python\nresult = np.diag(np.fliplr(a))\n```", "metadata": {"problem_id": 336, "library_problem_id": 45, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 45}}
{"id": 337, "code": "```python\nresult = np.diag(np.fliplr(a))\n```", "metadata": {"problem_id": 337, "library_problem_id": 46, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 45}}
{"id": 338, "code": "```python\nresult = np.diag(np.fliplr(a))\n```", "metadata": {"problem_id": 338, "library_problem_id": 47, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 45}}
{"id": 339, "code": "```python\nresult = np.diag(np.fliplr(a))\n```", "metadata": {"problem_id": 339, "library_problem_id": 48, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 45}}
{"id": 340, "code": "```python\nresult = X.flatten().tolist()\n```", "metadata": {"problem_id": 340, "library_problem_id": 49, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 49}}
{"id": 341, "code": "```python\nresult = X.flatten('C').tolist()\n```", "metadata": {"problem_id": 341, "library_problem_id": 50, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 49}}
{"id": 342, "code": "```python\nresult = [x for row in X for x in row]\n```", "metadata": {"problem_id": 342, "library_problem_id": 51, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 49}}
{"id": 343, "code": "```python\nresult = X.flatten(order='F').tolist()\n```", "metadata": {"problem_id": 343, "library_problem_id": 52, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 49}}
{"id": 344, "code": "```python\nresult = np.array(list(mystr), dtype=int)\n```", "metadata": {"problem_id": 344, "library_problem_id": 53, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 53}}
{"id": 345, "code": "```python\nresult = np.cumsum(a[:, col] * multiply_number)\n```", "metadata": {"problem_id": 345, "library_problem_id": 54, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 54}}
{"id": 346, "code": "```python\nresult = np.cumsum(a[row] * multiply_number)\n```", "metadata": {"problem_id": 346, "library_problem_id": 55, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 54}}
{"id": 347, "code": "```python\nresult = np.prod(a[row] / divide_number)\n```", "metadata": {"problem_id": 347, "library_problem_id": 56, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 54}}
{"id": 348, "code": "```python\nfrom scipy.linalg import qr\n\nq, r = qr(a.T)\nresult = q[:, :r.shape[0]]\n```", "metadata": {"problem_id": 348, "library_problem_id": 57, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 57}}
{"id": 349, "code": "```python\nresult = a.shape[1]\n```", "metadata": {"problem_id": 349, "library_problem_id": 58, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 58}}
{"id": 350, "code": "```python\nt_stat, p_value = scipy.stats.ttest_ind(a, b, equal_var=False)\n```", "metadata": {"problem_id": 350, "library_problem_id": 59, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 59}}
{"id": 351, "code": "```python\np_value = scipy.stats.ttest_ind(a, b, equal_var=False, nan_policy='omit').pvalue\n```", "metadata": {"problem_id": 351, "library_problem_id": 60, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 59}}
{"id": 352, "code": "```python\nfrom scipy.stats import ttest_ind_from_stats\n\namean = -0.0896\navar = 0.954\nanobs = 40\nbmean = 0.719\nbvar = 11.87\nbnobs = 50\n\np_value = ttest_ind_from_stats(mean1=amean, std1=np.sqrt(avar), nobs1=anobs,\n                               mean2=bmean, std2=np.sqrt(bvar), nobs2=bnobs,\n                               equal_var=False).pvalue\n```", "metadata": {"problem_id": 352, "library_problem_id": 61, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 59}}
{"id": 353, "code": "```python\noutput = A[~np.isin(A.view([tuple]), B.view([tuple])).any(axis=1)]\n```", "metadata": {"problem_id": 353, "library_problem_id": 62, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 62}}
{"id": 354, "code": "```python\noutput = np.vstack((np.setdiff1d(A, B), np.setdiff1d(B, A)))\n```", "metadata": {"problem_id": 354, "library_problem_id": 63, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Semantic", "perturbation_origin_id": 62}}
{"id": 355, "code": "```python\nc = np.take_along_axis(b, sort_indices, axis=0)\n```", "metadata": {"problem_id": 355, "library_problem_id": 64, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 64}}
{"id": 356, "code": "```python\nc = np.take_along_axis(b, sort_indices, axis=0)\n```", "metadata": {"problem_id": 356, "library_problem_id": 65, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 64}}
{"id": 357, "code": "```python\nc = np.take_along_axis(b, np.argsort(-a, axis=0), axis=0)\n```", "metadata": {"problem_id": 357, "library_problem_id": 66, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 64}}
{"id": 358, "code": "```python\nresult = b[np.argsort(np.sum(a, axis=(1, 2)))]\n```", "metadata": {"problem_id": 358, "library_problem_id": 67, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 64}}
{"id": 359, "code": "```python\na = np.delete(a, 2, axis=1)\n```", "metadata": {"problem_id": 359, "library_problem_id": 68, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 68}}
{"id": 360, "code": "```python\na = np.delete(a, 2, axis=0)\n```", "metadata": {"problem_id": 360, "library_problem_id": 69, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 68}}
{"id": 361, "code": "```python\na[:, [1, 3]]\n```", "metadata": {"problem_id": 361, "library_problem_id": 70, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 68}}
{"id": 362, "code": "```python\nresult = np.delete(a, del_col, axis=1)\n```", "metadata": {"problem_id": 362, "library_problem_id": 71, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 68}}
{"id": 363, "code": "```python\na = np.insert(a, pos, element)\n```", "metadata": {"problem_id": 363, "library_problem_id": 72, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 72}}
{"id": 364, "code": "```python\na = np.insert(a, pos, element, axis=0)\n```", "metadata": {"problem_id": 364, "library_problem_id": 73, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 72}}
{"id": 365, "code": "```python\nimport numpy as np\n\ndef f(a=example_a, pos=2, element=66):\n    return np.insert(a, pos, element)\n\n# Example usage:\nresult = f()\nprint(result)  # Output: [1 2 66 3 4]\n```", "metadata": {"problem_id": 365, "library_problem_id": 74, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 72}}
{"id": 366, "code": "```python\na = np.insert(a, pos, element, axis=0)\n```", "metadata": {"problem_id": 366, "library_problem_id": 75, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 72}}
{"id": 367, "code": "```python\nresult = np.array([arr.copy() for arr in array_of_arrays], dtype=object)\n```", "metadata": {"problem_id": 367, "library_problem_id": 76, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 76}}
{"id": 368, "code": "```python\nresult = np.all(a == a[0])\n```", "metadata": {"problem_id": 368, "library_problem_id": 77, "library": "Numpy", "test_case_cnt": 5, "perturbation_type": "Origin", "perturbation_origin_id": 77}}
{"id": 369, "code": "```python\nresult = np.all(a == a[:, [0]])\n```", "metadata": {"problem_id": 369, "library_problem_id": 78, "library": "Numpy", "test_case_cnt": 5, "perturbation_type": "Semantic", "perturbation_origin_id": 77}}
{"id": 370, "code": "```python\nresult = np.all(a == a[0])\n```", "metadata": {"problem_id": 370, "library_problem_id": 79, "library": "Numpy", "test_case_cnt": 5, "perturbation_type": "Surface", "perturbation_origin_id": 77}}
{"id": 371, "code": "```python\nfrom scipy import integrate\n\ndef f(x, y):\n    return (np.cos(x))**4 + (np.sin(y))**2\n\nx = np.linspace(0, 1, 20)\ny = np.linspace(0, 1, 30)\n\nX, Y = np.meshgrid(x, y)\nZ = f(X, Y)\n\nresult, error = integrate.dblquad(lambda x, y: Z[X.searchsorted(x), Y.searchsorted(y)], 0, 1, lambda x: 0, lambda x: 1)\n```", "metadata": {"problem_id": 371, "library_problem_id": 80, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 80}}
{"id": 372, "code": "```python\nresult = np.sum((np.cos(example_x)**4 + np.sin(example_y)**2) * np.outer(np.ones_like(example_x), np.ones_like(example_y))) * (example_x[1] - example_x[0]) * (example_y[1] - example_y[0])\n### END SOLUTION\nreturn result\n```", "metadata": {"problem_id": 372, "library_problem_id": 81, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 80}}
{"id": 373, "code": "```python\nimport numpy as np\n\ndef ecdf(x):\n    # Sort the data\n    sorted_x = np.sort(x)\n    # Calculate ECDF values\n    y = np.arange(1, len(sorted_x) + 1) / len(sorted_x)\n    return sorted_x, y\n\ngrades = np.array((93.5,93,60.8,94.5,82,87.5,91.5,99.5,86,93.5,92.5,78,76,69,94.5,\n                  89.5,92.8,78,65.5,98,98.5,92.3,95.5,76,91,95,61))\n\nsorted_grades, ecdf_values = ecdf(grades)\n\n# To get the ECDF value for each element in grades\nresult = np.interp(grades, sorted_grades, ecdf_values)\n```", "metadata": {"problem_id": 373, "library_problem_id": 82, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 82}}
{"id": 374, "code": "```python\necdf_values = ecdf(grades)\nresult = ecdf_values[np.searchsorted(np.sort(grades), eval, side='right') - 1]\n```", "metadata": {"problem_id": 374, "library_problem_id": 83, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 82}}
{"id": 375, "code": "```python\nimport numpy as np\n\ngrades = np.array([93.5, 93, 60.8, 94.5, 82, 87.5, 91.5, 99.5, 86, 93.5, 92.5, 78, 76, 69, 94.5,\n                   89.5, 92.8, 78, 65.5, 98, 98.5, 92.3, 95.5, 76, 91, 95, 61])\nthreshold = 0.5\n\ndef ecdf(x):\n    x_sorted = np.sort(x)\n    n = len(x_sorted)\n    return np.arange(1, n + 1) / n\n\necdf_values = ecdf(grades)\n\n# Find the longest interval [low, high) such that ECDF(x) < threshold\nlow = grades[0]\nhigh = grades[0]\n\nfor i in range(len(ecdf_values)):\n    if ecdf_values[i] >= threshold:\n        break\n    low = grades[i]\n    high = grades[i + 1]\n\nprint(f\"Low: {low}, High: {high}\")\n```", "metadata": {"problem_id": 375, "library_problem_id": 84, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 82}}
{"id": 376, "code": "```python\nnums = np.zeros(size)\nones_count = int(one_ratio * size)\nindices = np.random.choice(range(size), ones_count, replace=False)\nnums[indices] = 1\n```", "metadata": {"problem_id": 376, "library_problem_id": 85, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 85}}
{"id": 377, "code": "```python\na_np = a.numpy()\n```", "metadata": {"problem_id": 377, "library_problem_id": 86, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 86}}
{"id": 378, "code": "```python\na_pt = torch.from_numpy(a)\n```", "metadata": {"problem_id": 378, "library_problem_id": 87, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 86}}
{"id": 379, "code": "```python\na_np = a.numpy()\n```", "metadata": {"problem_id": 379, "library_problem_id": 88, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 88}}
{"id": 380, "code": "```python\na_tf = tf.convert_to_tensor(a)\n```", "metadata": {"problem_id": 380, "library_problem_id": 89, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 88}}
{"id": 381, "code": "```python\nresult = np.argsort(a)[::-1].tolist()\n```", "metadata": {"problem_id": 381, "library_problem_id": 90, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 90}}
{"id": 382, "code": "```python\nresult = np.argsort(a)\n```", "metadata": {"problem_id": 382, "library_problem_id": 91, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 90}}
{"id": 383, "code": "```python\nresult = np.argsort(a)[-N:][::-1]\n```", "metadata": {"problem_id": 383, "library_problem_id": 92, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 90}}
{"id": 384, "code": "```python\nresult = np.linalg.matrix_power(A, n)\n```", "metadata": {"problem_id": 384, "library_problem_id": 93, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 93}}
{"id": 385, "code": "```python\nresult = a.reshape(a.shape[0]//2, 2, a.shape[1]//2, 2).swapaxes(1,2)\n```", "metadata": {"problem_id": 385, "library_problem_id": 94, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 94}}
{"id": 386, "code": "```python\nresult = np.lib.stride_tricks.as_strided(a, shape=(a.shape[0]-1, a.shape[1]-1, 2, 2), strides=a.strides*2)\n```", "metadata": {"problem_id": 386, "library_problem_id": 95, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 94}}
{"id": 387, "code": "```python\nresult = a.reshape(2, 2, 2, 2).swapaxes(1, 2)\n```", "metadata": {"problem_id": 387, "library_problem_id": 96, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 94}}
{"id": 388, "code": "```python\nresult = a.reshape(a.shape[0]//patch_size, patch_size, a.shape[1]//patch_size, patch_size).swapaxes(1,2)\n```", "metadata": {"problem_id": 388, "library_problem_id": 97, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 94}}
{"id": 389, "code": "```python\nresult = a.reshape(h, w)\n```", "metadata": {"problem_id": 389, "library_problem_id": 98, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 94}}
{"id": 390, "code": "```python\nresult = a.reshape(a.shape[0]//patch_size, patch_size, a.shape[1]//patch_size, patch_size).swapaxes(1,2)\n```", "metadata": {"problem_id": 390, "library_problem_id": 99, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 94}}
{"id": 391, "code": "```python\nresult = a[:, low:high]\n```", "metadata": {"problem_id": 391, "library_problem_id": 100, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 100}}
{"id": 392, "code": "```python\nresult = a[low:high+1]\n```", "metadata": {"problem_id": 392, "library_problem_id": 101, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 100}}
{"id": 393, "code": "```python\nresult = a[:, low:min(high, a.shape[1])]\n```", "metadata": {"problem_id": 393, "library_problem_id": 102, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 100}}
{"id": 394, "code": "```python\na = np.fromstring(string.replace(' ', ''), dtype=float, sep=',').reshape(-1, 2)\n```", "metadata": {"problem_id": 394, "library_problem_id": 103, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 103}}
{"id": 395, "code": "```python\nresult = np.power(np.random.uniform(min, max, n), 1/np.log(max/min))\n```", "metadata": {"problem_id": 395, "library_problem_id": 104, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 104}}
{"id": 396, "code": "```python\nnp.exp(np.random.uniform(min, max, n))\n```", "metadata": {"problem_id": 396, "library_problem_id": 105, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 104}}
{"id": 397, "code": "```python\nresult = np.power(max / min, np.random.uniform(0, 1, n)) * min\n### END SOLUTION\nreturn result\n```", "metadata": {"problem_id": 397, "library_problem_id": 106, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 104}}
{"id": 398, "code": "```python\nB = pd.Series(index=A.index)\nB[0] = a * A[0]\nfor t in range(1, len(A)):\n    B[t] = a * A[t] + b * B[t-1]\n```", "metadata": {"problem_id": 398, "library_problem_id": 107, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 107}}
{"id": 399, "code": "```python\nB = pd.Series(index=A.index)\nB[0] = a * A[0]\nif len(A) > 1:\n    B[1] = a * A[1] + b * B[0]\nfor t in range(2, len(A)):\n    B[t] = a * A[t] + b * B[t-1] + c * B[t-2]\n```", "metadata": {"problem_id": 399, "library_problem_id": 108, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 107}}
{"id": 400, "code": "```python\nresult = np.array([], dtype=float).reshape((0,))\n```", "metadata": {"problem_id": 400, "library_problem_id": 109, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 109}}
{"id": 401, "code": "```python\nresult = np.empty((3,0))\n```", "metadata": {"problem_id": 401, "library_problem_id": 110, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 109}}
{"id": 402, "code": "```python\nresult = np.ravel_multi_index(index, dims, order='F')\n```", "metadata": {"problem_id": 402, "library_problem_id": 111, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 111}}
{"id": 403, "code": "```python\nresult = np.ravel_multi_index(index, dims)\n```", "metadata": {"problem_id": 403, "library_problem_id": 112, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 111}}
{"id": 404, "code": "```python\ndf = pd.DataFrame(index=index, columns=columns, dtype={'a': 'int32', 'b': 'float32', 'c': 'float32'})\ndf.values[:] = 0\n```", "metadata": {"problem_id": 404, "library_problem_id": 113, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 113}}
{"id": 405, "code": "```python\nresult = np.bincount(accmap, weights=a)\n```", "metadata": {"problem_id": 405, "library_problem_id": 114, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 114}}
{"id": 406, "code": "```python\nresult = np.maximum.reduceat(a, np.unique(index, return_index=True)[1])\n```", "metadata": {"problem_id": 406, "library_problem_id": 115, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 114}}
{"id": 407, "code": "```python\nnp.bincount(accmap + (accmap < 0) * len(a), weights=a)\n```", "metadata": {"problem_id": 407, "library_problem_id": 116, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 114}}
{"id": 408, "code": "```python\nresult = np.minimum.at(a, index, a)\n```", "metadata": {"problem_id": 408, "library_problem_id": 117, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 114}}
{"id": 409, "code": "```python\nz = np.array(x) + np.array(y)\n```", "metadata": {"problem_id": 409, "library_problem_id": 118, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 118}}
{"id": 410, "code": "```python\nresult = np.random.choice(range(len(lista_elegir)), samples, p=probabilit)\nselected_tuples = [lista_elegir[i] for i in result]\n```", "metadata": {"problem_id": 410, "library_problem_id": 119, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 119}}
{"id": 411, "code": "```python\nresult = np.pad(a, ((0, max(0, -low_index)), (0, max(0, -high_index))), mode='constant', constant_values=0)\n```", "metadata": {"problem_id": 411, "library_problem_id": 120, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 120}}
{"id": 412, "code": "```python\nresult = x[x >= 0]\n```", "metadata": {"problem_id": 412, "library_problem_id": 121, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 121}}
{"id": 413, "code": "```python\nresult = x[np.iscomplex(x)]\n```", "metadata": {"problem_id": 413, "library_problem_id": 122, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 121}}
{"id": 414, "code": "```python\nbin_data_mean = np.mean(data.reshape(-1, bin_size), axis=1)\n```", "metadata": {"problem_id": 414, "library_problem_id": 123, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 123}}
{"id": 415, "code": "```python\nbin_data_max = np.max(data.reshape(-1, bin_size), axis=1)\n```", "metadata": {"problem_id": 415, "library_problem_id": 124, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 123}}
{"id": 416, "code": "```python\nbin_data_mean = np.mean(np.reshape(data, (data.shape[0], -1, bin_size)), axis=2)\n```", "metadata": {"problem_id": 416, "library_problem_id": 125, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 123}}
{"id": 417, "code": "```python\nbin_data_mean = np.mean(data[::-1].reshape(-1, bin_size), axis=1)[::-1]\n```", "metadata": {"problem_id": 417, "library_problem_id": 126, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 123}}
{"id": 418, "code": "```python\nimport numpy as np\n\n# Reverse the data to start binning from the end\nreversed_data = np.flip(data, axis=1)\n\n# Calculate the number of bins for each row\nnum_bins = reversed_data.shape[1] // bin_size\n\n# Reshape the data to create bins and calculate the mean\nbin_data_mean = np.mean(reversed_data[:, :num_bins * bin_size].reshape(reversed_data.shape[0], num_bins, bin_size), axis=2)\n\n# Reverse the means back to the original order\nbin_data_mean = np.fliplr(bin_data_mean)\n```", "metadata": {"problem_id": 418, "library_problem_id": 127, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 123}}
{"id": 419, "code": "```python\nbin_data_mean = np.mean(np.lib.stride_tricks.as_strided(data, shape=(data.shape[0], data.shape[1]//bin_size, bin_size), strides=(data.strides[0], data.strides[1]*bin_size, data.strides[1]))[:, :, :bin_size].reshape(data.shape[0], -1, bin_size).mean(axis=2), axis=1)\n```", "metadata": {"problem_id": 419, "library_problem_id": 128, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 123}}
{"id": 420, "code": "```python\ndef smoothclamp(x, min_val, max_val):\n    if x <= min_val:\n        return min_val\n    elif x >= max_val:\n        return max_val\n    else:\n        t = (x - min_val) / (max_val - min_val)\n        return (3 * t**2 - 2 * t**3) * (max_val - min_val) + min_val\n```", "metadata": {"problem_id": 420, "library_problem_id": 129, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 129}}
{"id": 421, "code": "```python\ndef smoothclamp(x, min_val, max_val, N):\n    t = np.clip((x - min_val) / (max_val - min_val), 0, 1)\n    result = 0\n    for n in range(N + 1):\n        binomial_coefficient = np.math.comb(N + n, n) * np.math.comb(N + n, n)\n        term = (-t)**(n + 1) * (1 - t)**n * binomial_coefficient\n        result += term\n    return result * (max_val - min_val) + min_val\n```", "metadata": {"problem_id": 421, "library_problem_id": 130, "library": "Numpy", "test_case_cnt": 4, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 129}}
{"id": 422, "code": "```python\nresult = np.fft.ifft(np.fft.fft(a) * np.conj(np.fft.fft(b)))\n```", "metadata": {"problem_id": 422, "library_problem_id": 131, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 131}}
{"id": 423, "code": "```python\nresult = df.values.reshape((4, 15, 5))\n```", "metadata": {"problem_id": 423, "library_problem_id": 132, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 132}}
{"id": 424, "code": "```python\nresult = df.values.reshape((15, 4, 5))\n```", "metadata": {"problem_id": 424, "library_problem_id": 133, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 132}}
{"id": 425, "code": "```python\nresult = np.array([(num >> i) & 1 for num in a for i in range(m)]).reshape(-1, m)\n```", "metadata": {"problem_id": 425, "library_problem_id": 134, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 134}}
{"id": 426, "code": "```python\nresult = np.packbits((a[:, None] & (1 << np.arange(m)[::-1])).astype(bool), axis=1).reshape(-1, m)\n```", "metadata": {"problem_id": 426, "library_problem_id": 135, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 134}}
{"id": 427, "code": "```python\nresult = np.bitwise_xor.reduce(np.unpackbits(a[:, None] & ((1 << np.arange(m))[::-1]), axis=1))\n```", "metadata": {"problem_id": 427, "library_problem_id": 136, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 134}}
{"id": 428, "code": "```python\nmean = np.mean(a)\nstd_dev = np.std(a)\nresult = (mean - 3 * std_dev, mean + 3 * std_dev)\n```", "metadata": {"problem_id": 428, "library_problem_id": 137, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 137}}
{"id": 429, "code": "```python\nmean = np.mean(a)\nstd_dev = np.std(a)\nresult = (mean - 2*std_dev, mean + 2*std_dev)\n```", "metadata": {"problem_id": 429, "library_problem_id": 138, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 137}}
{"id": 430, "code": "```python\nmean = np.mean(a)\nstd_dev = np.std(a)\nresult = (mean - 3 * std_dev, mean + 3 * std_dev)\nreturn result\n### END SOLUTION\n```", "metadata": {"problem_id": 430, "library_problem_id": 139, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 137}}
{"id": 431, "code": "```python\nmean = np.mean(a)\nstd_dev = np.std(a)\nlower_bound = mean - 2 * std_dev\nupper_bound = mean + 2 * std_dev\nresult = (a < lower_bound) | (a > upper_bound)\n```", "metadata": {"problem_id": 431, "library_problem_id": 140, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 137}}
{"id": 432, "code": "```python\nprob = np.ma.percentile(masked_data.compressed(), percentile)\n```", "metadata": {"problem_id": 432, "library_problem_id": 141, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 141}}
{"id": 433, "code": "```python\na[zero_rows] = 0\na[:, zero_cols] = 0\n```", "metadata": {"problem_id": 433, "library_problem_id": 142, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 142}}
{"id": 434, "code": "```python\na[zero_rows, :] = 0\na[:, zero_cols] = 0\n```", "metadata": {"problem_id": 434, "library_problem_id": 143, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 142}}
{"id": 435, "code": "```python\na[1,:] = 0\na[:,0] = 0\n```", "metadata": {"problem_id": 435, "library_problem_id": 144, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 142}}
{"id": 436, "code": "```python\nmask = (a == np.max(a, axis=1, keepdims=True))\n```", "metadata": {"problem_id": 436, "library_problem_id": 145, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 145}}
{"id": 437, "code": "```python\nmask = (a == a.min(axis=1, keepdims=True))\n```", "metadata": {"problem_id": 437, "library_problem_id": 146, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 145}}
{"id": 438, "code": "```python\nresult = np.corrcoef(post, distance)[0, 1]\n```", "metadata": {"problem_id": 438, "library_problem_id": 147, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 147}}
{"id": 439, "code": "```python\nnp.einsum('ij,jk->ikj', X, X)\n```", "metadata": {"problem_id": 439, "library_problem_id": 148, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 148}}
{"id": 440, "code": "```python\nX = np.sqrt(np.diagonal(Y, axis1=1, axis2=2))\n```", "metadata": {"problem_id": 440, "library_problem_id": 149, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 148}}
{"id": 441, "code": "```python\nis_contained = (number in a).any()\n```", "metadata": {"problem_id": 441, "library_problem_id": 150, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 150}}
{"id": 442, "code": "```python\nC = A[~np.isin(A, B)]\n```", "metadata": {"problem_id": 442, "library_problem_id": 151, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 151}}
{"id": 443, "code": "```python\nC = A[np.isin(A, B)]\n```", "metadata": {"problem_id": 443, "library_problem_id": 152, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 151}}
{"id": 444, "code": "```python\nC = A[(A > B[0]) & (A < B[-1])]\n```", "metadata": {"problem_id": 444, "library_problem_id": 153, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 151}}
{"id": 445, "code": "```python\nresult = (len(a) + 1 - rankdata(a)).astype(int)\n```", "metadata": {"problem_id": 445, "library_problem_id": 154, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 154}}
{"id": 446, "code": "```python\nresult = (len(a) + 1 - rankdata(a)).astype(int)\n```", "metadata": {"problem_id": 446, "library_problem_id": 155, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 154}}
{"id": 447, "code": "```python\nresult = len(a) + 1 - rankdata(a).astype(int)\n```", "metadata": {"problem_id": 447, "library_problem_id": 156, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 154}}
{"id": 448, "code": "```python\ndists = np.dstack((x_dists, y_dists))\n```", "metadata": {"problem_id": 448, "library_problem_id": 157, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 157}}
{"id": 449, "code": "```python\ndists = np.dstack((x_dists, y_dists))\n```", "metadata": {"problem_id": 449, "library_problem_id": 158, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 157}}
{"id": 450, "code": "```python\nresult = a[:, second][:, :, third]\n```", "metadata": {"problem_id": 450, "library_problem_id": 159, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 159}}
{"id": 451, "code": "```python\narr = np.zeros((20, 10, 10, 2))\n```", "metadata": {"problem_id": 451, "library_problem_id": 160, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 160}}
{"id": 452, "code": "```python\nresult = X / np.linalg.norm(X, ord=1, axis=1, keepdims=True)\n```", "metadata": {"problem_id": 452, "library_problem_id": 161, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 161}}
{"id": 453, "code": "```python\nresult = X / x[:, np.newaxis]\n```", "metadata": {"problem_id": 453, "library_problem_id": 162, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 161}}
{"id": 454, "code": "```python\nresult = X / x[:, np.newaxis]\n```", "metadata": {"problem_id": 454, "library_problem_id": 163, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 161}}
{"id": 455, "code": "```python\nresult = df['a'].apply(lambda x: choices[0] if target in str(x) else np.nan)\n```", "metadata": {"problem_id": 455, "library_problem_id": 164, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 164}}
{"id": 456, "code": "```python\nfrom scipy.spatial import distance_matrix\n\nresult = distance_matrix(a, a)\n```", "metadata": {"problem_id": 456, "library_problem_id": 165, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 165}}
{"id": 457, "code": "```python\nfrom scipy.spatial import distance_matrix\n\nresult = distance_matrix(a, a)\n```", "metadata": {"problem_id": 457, "library_problem_id": 166, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 165}}
{"id": 458, "code": "```python\nfrom scipy.spatial import distance_matrix\n\nresult = distance_matrix(a, a)\n```", "metadata": {"problem_id": 458, "library_problem_id": 167, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 165}}
{"id": 459, "code": "```python\nAVG = np.mean(np.array(A).astype(float), axis=0)\n```", "metadata": {"problem_id": 459, "library_problem_id": 168, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 168}}
{"id": 460, "code": "```python\nAVG = np.nanmean(NA, axis=0)\n```", "metadata": {"problem_id": 460, "library_problem_id": 169, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 168}}
{"id": 461, "code": "```python\nNA = np.array([float(item) for item in A])\n```", "metadata": {"problem_id": 461, "library_problem_id": 170, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 168}}
{"id": 462, "code": "```python\nresult = np.diff(np.nonzero(a)[0])\n```", "metadata": {"problem_id": 462, "library_problem_id": 171, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 171}}
{"id": 463, "code": "```python\nresult = a[~np.diff(a.flatten()) & (a.flatten() != 0)].reshape(-1, 1)\n```", "metadata": {"problem_id": 463, "library_problem_id": 172, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 171}}
{"id": 464, "code": "```python\ndf = pd.DataFrame({'lat': lat.flatten(), 'lon': lon.flatten(), 'val': val.flatten()})\n```", "metadata": {"problem_id": 464, "library_problem_id": 173, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 173}}
{"id": 465, "code": "```python\ndf = pd.DataFrame({'lat': lat.flatten(), 'lon': lon.flatten(), 'val': val.flatten()})\nreturn df\n### END SOLUTION\n```", "metadata": {"problem_id": 465, "library_problem_id": 174, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 173}}
{"id": 466, "code": "```python\ndf = pd.DataFrame({'lat': lat.flatten(), 'lon': lon.flatten(), 'val': val.flatten()})\ndf['maximum'] = df.max(axis=1)\n```", "metadata": {"problem_id": 466, "library_problem_id": 175, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 173}}
{"id": 467, "code": "```python\nresult = []\nfor i in range(a.shape[0]):\n    for j in range(a.shape[1]):\n        row_start = max(0, i-1)\n        row_end = min(a.shape[0], i+2)\n        col_start = max(0, j-1)\n        col_end = min(a.shape[1], j+2)\n        result.append(a[row_start:row_end, col_start:col_end])\n```", "metadata": {"problem_id": 467, "library_problem_id": 176, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 176}}
{"id": 468, "code": "```python\nresult = []\nfor i in range(a.shape[0]):\n    for j in range(a.shape[1]):\n        row_start = max(0, i-1)\n        row_end = min(a.shape[0], i+2)\n        col_start = max(0, j-1)\n        col_end = min(a.shape[1], j+2)\n        result.append(a[row_start:row_end, col_start:col_end])\n```", "metadata": {"problem_id": 468, "library_problem_id": 177, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 176}}
{"id": 469, "code": "```python\nresult = np.nanmean(a)\n```", "metadata": {"problem_id": 469, "library_problem_id": 178, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 178}}
{"id": 470, "code": "```python\nresult = np.nanmean(a)\n### END SOLUTION\nreturn result\n```", "metadata": {"problem_id": 470, "library_problem_id": 179, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 178}}
{"id": 471, "code": "```python\nresult = Z[Ellipsis, -1:]\n```", "metadata": {"problem_id": 471, "library_problem_id": 180, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 180}}
{"id": 472, "code": "```python\nresult = a[-1:]\n```", "metadata": {"problem_id": 472, "library_problem_id": 181, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 180}}
{"id": 473, "code": "```python\nresult = any(np.array_equal(c, cnt) for cnt in CNTS)\n```", "metadata": {"problem_id": 473, "library_problem_id": 182, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 182}}
{"id": 474, "code": "```python\nresult = any(np.array_equal(c, cnt) for cnt in CNTS)\n```", "metadata": {"problem_id": 474, "library_problem_id": 183, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 182}}
{"id": 475, "code": "```python\nf = intp.interp2d(np.arange(4), np.arange(4), a, kind='linear')\nresult = f(x_new, y_new)\n```", "metadata": {"problem_id": 475, "library_problem_id": 184, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 184}}
{"id": 476, "code": "```python\ndf[name] = df.groupby('D')['Q'].cumsum()\n```", "metadata": {"problem_id": 476, "library_problem_id": 185, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 185}}
{"id": 477, "code": "```python\ni = np.diag(i)\n```", "metadata": {"problem_id": 477, "library_problem_id": 186, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 186}}
{"id": 478, "code": "```python\nnp.fill_diagonal(a, np.diag(a))\n```", "metadata": {"problem_id": 478, "library_problem_id": 187, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 187}}
{"id": 479, "code": "```python\nresult = pd.date_range(start=start, end=end, periods=n)\n```", "metadata": {"problem_id": 479, "library_problem_id": 188, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 188}}
{"id": 480, "code": "```python\nresult = np.where((x == a) & (y == b))[0][0] if np.any((x == a) & (y == b)) else -1\n```", "metadata": {"problem_id": 480, "library_problem_id": 189, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 189}}
{"id": 481, "code": "```python\nresult = np.where((x == a) & (y == b))[0]\n```", "metadata": {"problem_id": 481, "library_problem_id": 190, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Semantic", "perturbation_origin_id": 189}}
{"id": 482, "code": "```python\nnp.polyfit(x, y, 2)\n```", "metadata": {"problem_id": 482, "library_problem_id": 191, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 191}}
{"id": 483, "code": "```python\ncoefficients = np.polyfit(x, y, degree)\nresult = coefficients[::-1]\n```", "metadata": {"problem_id": 483, "library_problem_id": 192, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 191}}
{"id": 484, "code": "```python\ndf = df.apply(lambda x: x - a[x.name])\n```", "metadata": {"problem_id": 484, "library_problem_id": 193, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 193}}
{"id": 485, "code": "```python\nresult = np.einsum('ij,kjl->kil', B, A)\n```", "metadata": {"problem_id": 485, "library_problem_id": 194, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 194}}
{"id": 486, "code": "```python\na_flat = a.flatten().reshape(-1, 1)\nscaler = MinMaxScaler()\na_normalized_flat = scaler.fit_transform(a_flat)\nresult = a_normalized_flat.reshape(a.shape)\n```", "metadata": {"problem_id": 486, "library_problem_id": 195, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 195}}
{"id": 487, "code": "```python\nresult = MinMaxScaler().fit_transform(arr)\n```", "metadata": {"problem_id": 487, "library_problem_id": 196, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 195}}
{"id": 488, "code": "```python\nscaler = MinMaxScaler()\nresult = scaler.fit_transform(a.reshape(-1, a.shape[-1])).reshape(a.shape)\n```", "metadata": {"problem_id": 488, "library_problem_id": 197, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 195}}
{"id": 489, "code": "```python\narr[(arr < -10)] = 0\narr[(arr >= 15)] = 30\narr[~((arr < -10) | (arr >= 15))] += 5\n```", "metadata": {"problem_id": 489, "library_problem_id": 198, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 198}}
{"id": 490, "code": "```python\nfor i in range(arr.shape[0]):\n    mask = arr[i] < n1[i]\n    mask2 = arr[i] >= n2[i]\n    arr[i][mask] = 0\n    arr[i][~mask & ~mask2] += 5\n    arr[i][mask2] = 30\n```", "metadata": {"problem_id": 490, "library_problem_id": 199, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 198}}
{"id": 491, "code": "```python\nresult = np.sum(np.abs(s1 - s2) > 1e-8)\n```", "metadata": {"problem_id": 491, "library_problem_id": 200, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 200}}
{"id": 492, "code": "```python\nresult = np.sum(np.abs(s1 - s2) > 1e-8)\n```", "metadata": {"problem_id": 492, "library_problem_id": 201, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 200}}
{"id": 493, "code": "```python\nall(np.array_equal(a[0], arr) for arr in a)\n```", "metadata": {"problem_id": 493, "library_problem_id": 202, "library": "Numpy", "test_case_cnt": 5, "perturbation_type": "Origin", "perturbation_origin_id": 202}}
{"id": 494, "code": "```python\nall_nan = all(np.isnan(arr).all() for arr in a)\n```", "metadata": {"problem_id": 494, "library_problem_id": 203, "library": "Numpy", "test_case_cnt": 5, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 202}}
{"id": 495, "code": "```python\nresult = np.pad(a, ((0, shape[0] - a.shape[0]), (0, shape[1] - a.shape[1])), mode='constant', constant_values=0)\n```", "metadata": {"problem_id": 495, "library_problem_id": 204, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 204}}
{"id": 496, "code": "```python\nresult = np.pad(a, ((0, shape[0] - a.shape[0]), (0, shape[1] - a.shape[1])), mode='constant', constant_values=0)\n```", "metadata": {"problem_id": 496, "library_problem_id": 205, "library": "Numpy", "test_case_cnt": 4, "perturbation_type": "Surface", "perturbation_origin_id": 204}}
{"id": 497, "code": "```python\nresult = np.pad(a, ((0, shape[0] - a.shape[0]), (0, shape[1] - a.shape[1])), 'constant', constant_values=element)\n```", "metadata": {"problem_id": 497, "library_problem_id": 206, "library": "Numpy", "test_case_cnt": 4, "perturbation_type": "Semantic", "perturbation_origin_id": 204}}
{"id": 498, "code": "```python\nresult = np.pad(arr, ((0, shape[0] - arr.shape[0]), (0, shape[1] - arr.shape[1])), mode='constant', constant_values=0)\n### END SOLUTION\nreturn result\n```", "metadata": {"problem_id": 498, "library_problem_id": 207, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 204}}
{"id": 499, "code": "```python\npad_height = (shape[0] - a.shape[0]) // 2\npad_width = (shape[1] - a.shape[1]) // 2\nextra_height = (shape[0] - a.shape[0]) % 2\nextra_width = (shape[1] - a.shape[1]) % 2\n\nresult = np.pad(a, ((pad_height, pad_height + extra_height), (pad_width, pad_width + extra_width)), mode='constant', constant_values=0)\n```", "metadata": {"problem_id": 499, "library_problem_id": 208, "library": "Numpy", "test_case_cnt": 4, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 204}}
{"id": 500, "code": "a = a.reshape(int(a.shape[0]/3), 3)", "metadata": {"problem_id": 500, "library_problem_id": 209, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 209}}
{"id": 501, "code": "```python\nresult = a[np.arange(a.shape[0])[:, None], np.arange(a.shape[1]), b]\n```", "metadata": {"problem_id": 501, "library_problem_id": 210, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 210}}
{"id": 502, "code": "```python\nresult = a[np.arange(a.shape[0])[:, None], np.arange(a.shape[1]), b]\n```", "metadata": {"problem_id": 502, "library_problem_id": 211, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 210}}
{"id": 503, "code": "```python\nresult = np.take_along_axis(a, b[:, :, None], axis=2).squeeze()\n```", "metadata": {"problem_id": 503, "library_problem_id": 212, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 210}}
{"id": 504, "code": "```python\nresult = np.sum(a[np.arange(a.shape[0])[:, None], np.arange(a.shape[1]), b])\n```", "metadata": {"problem_id": 504, "library_problem_id": 213, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 210}}
{"id": 505, "code": "```python\nresult = np.sum(a[np.arange(a.shape[0])[:, None], np.arange(a.shape[1]), b])\n```", "metadata": {"problem_id": 505, "library_problem_id": 214, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 210}}
{"id": 506, "code": "```python\nresult = np.where((df['a'] > 1) & (df['a'] <= 4), df['b'], np.nan)\n```", "metadata": {"problem_id": 506, "library_problem_id": 215, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 215}}
{"id": 507, "code": "```python\nresult = im[(im.sum(axis=1) != 0), :]\nresult = result[:, (result.sum(axis=0) != 0)]\n```", "metadata": {"problem_id": 507, "library_problem_id": 216, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 216}}
{"id": 508, "code": "```python\nrows = np.any(A != 0, axis=1)\ncols = np.any(A != 0, axis=0)\nresult = A[rows][:, cols]\n```", "metadata": {"problem_id": 508, "library_problem_id": 217, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 216}}
{"id": 509, "code": "```python\nresult = im[(im.sum(axis=1) != 0)[:, None] & (im.sum(axis=0) != 0)]\n```", "metadata": {"problem_id": 509, "library_problem_id": 218, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 216}}
{"id": 510, "code": "```python\nresult = im[(im != 0).any(axis=1), :][(im != 0).any(axis=0)]\n```", "metadata": {"problem_id": 510, "library_problem_id": 219, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 216}}
{"id": 511, "code": "```python\nplt.plot(x, y, label=\"x-y\")\nplt.legend()\nplt.show()\n```", "metadata": {"problem_id": 511, "library_problem_id": 0, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 512, "code": "```python\nplt.minorticks_on()\nplt.tick_params(axis='y', which='minor', bottom=False)\n```", "metadata": {"problem_id": 512, "library_problem_id": 1, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 1}}
{"id": 513, "code": "plt.minorticks_on()", "metadata": {"problem_id": 513, "library_problem_id": 2, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 1}}
{"id": 514, "code": "plt.minorticks_on()\nplt.tick_params(axis='x', which='minor', bottom=True)", "metadata": {"problem_id": 514, "library_problem_id": 3, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 1}}
{"id": 515, "code": "```python\ny = np.random.rand(10)\nplt.plot(x, y, linestyle='--')\nplt.show()\n```", "metadata": {"problem_id": 515, "library_problem_id": 4, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 4}}
{"id": 516, "code": "```python\ny = np.random.rand(10)\nplt.plot(x, y, linestyle='--')\nplt.show()\n```", "metadata": {"problem_id": 516, "library_problem_id": 5, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 4}}
{"id": 517, "code": "```python\nplt.plot(x, y, 'd-', markersize=5, linewidth=0.5)\nplt.show()\n```", "metadata": {"problem_id": 517, "library_problem_id": 6, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 4}}
{"id": 518, "code": "```python\nplt.plot(x, y, 'd-', markersize=10, linewidth=2)\nplt.show()\n```", "metadata": {"problem_id": 518, "library_problem_id": 7, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 4}}
{"id": 519, "code": "```python\nax.set_ylim(0, 40)\nplt.show()\n```", "metadata": {"problem_id": 519, "library_problem_id": 8, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 8}}
{"id": 520, "code": "```python\nplt.axvspan(2, 4, color='red', alpha=0.5)\nplt.show()\n```", "metadata": {"problem_id": 520, "library_problem_id": 9, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 9}}
{"id": 521, "code": "```python\nplt.plot([0, 1], [0, 2])\nplt.show()\n```", "metadata": {"problem_id": 521, "library_problem_id": 10, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 10}}
{"id": 522, "code": "```python\nplt.plot([0, 1], [0, 2])\nplt.show()\n```", "metadata": {"problem_id": 522, "library_problem_id": 11, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 10}}
{"id": 523, "code": "```python\nsns.relplot(x=\"Height (cm)\", y=\"Weight (kg)\", hue=\"Gender\", data=df)\nplt.show()\n```", "metadata": {"problem_id": 523, "library_problem_id": 12, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 12}}
{"id": 524, "code": "```python\nsns.lineplot(x=x, y=y)\nplt.show()\n```", "metadata": {"problem_id": 524, "library_problem_id": 13, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 13}}
{"id": 525, "code": "```python\nsns.lineplot(x=x, y=y)\nplt.show()\n```", "metadata": {"problem_id": 525, "library_problem_id": 14, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 13}}
{"id": 526, "code": "```python\nplt.plot(x, y, 'o', markersize=7)\n```", "metadata": {"problem_id": 526, "library_problem_id": 15, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 15}}
{"id": 527, "code": "```python\nplt.legend(fontsize=20)\nplt.show()\n```", "metadata": {"problem_id": 527, "library_problem_id": 16, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 16}}
{"id": 528, "code": "```python\nplt.legend(title='xyz', title_fontsize=20)\n```", "metadata": {"problem_id": 528, "library_problem_id": 17, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 16}}
{"id": 529, "code": "l.set_markerfacecolor('blue')\nl.set_alpha(0.2)", "metadata": {"problem_id": 529, "library_problem_id": 18, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 18}}
{"id": 530, "code": "```python\nl.set_markeredgecolor('black')\n```", "metadata": {"problem_id": 530, "library_problem_id": 19, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 18}}
{"id": 531, "code": "l.set_color('red')", "metadata": {"problem_id": 531, "library_problem_id": 20, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 18}}
{"id": 532, "code": "```python\nplt.xticks(rotation=45)\n```", "metadata": {"problem_id": 532, "library_problem_id": 21, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 21}}
{"id": 533, "code": "```python\nplt.xticks(rotation=45)\n```", "metadata": {"problem_id": 533, "library_problem_id": 22, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 21}}
{"id": 534, "code": "```python\nplt.xticks([0, 2, 4])\n```", "metadata": {"problem_id": 534, "library_problem_id": 23, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 21}}
{"id": 535, "code": "plt.legend()\nplt.show()", "metadata": {"problem_id": 535, "library_problem_id": 24, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 24}}
{"id": 536, "code": "```python\nplt.imshow(H, cmap='viridis')\nplt.colorbar()\nplt.show()\n```", "metadata": {"problem_id": 536, "library_problem_id": 25, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 25}}
{"id": 537, "code": "plt.imshow(H, cmap='gray')\nplt.colorbar()\nplt.show()", "metadata": {"problem_id": 537, "library_problem_id": 26, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 25}}
{"id": 538, "code": "```python\nplt.xlabel('X', loc='right')\n```", "metadata": {"problem_id": 538, "library_problem_id": 27, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 27}}
{"id": 539, "code": "```python\nplt.xticks(rotation=90)\nplt.show()\n```", "metadata": {"problem_id": 539, "library_problem_id": 28, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 28}}
{"id": 540, "code": "```python\nmyTitle = \"Some really really long long long title I really really need\\n- and just can't\\n- just can't\\n- make it any\\n- simply any\\n- shorter\\n- at all.\"\nplt.title(myTitle)\nplt.show()\n```", "metadata": {"problem_id": 540, "library_problem_id": 29, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 29}}
{"id": 541, "code": "```python\nplt.gca().invert_yaxis()\n```", "metadata": {"problem_id": 541, "library_problem_id": 30, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 30}}
{"id": 542, "code": "```python\nplt.xticks([0, 1.5])\nplt.show()\n```", "metadata": {"problem_id": 542, "library_problem_id": 31, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 31}}
{"id": 543, "code": "```python\nplt.yticks([-1, 1])\nplt.show()\n```", "metadata": {"problem_id": 543, "library_problem_id": 32, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 31}}
{"id": 544, "code": "```python\nplt.plot(x, label='x')\nplt.plot(y, label='y', linestyle='--')\nplt.plot(z, label='z', linestyle='-.')\nplt.legend()\nplt.show()\n```", "metadata": {"problem_id": 544, "library_problem_id": 33, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 33}}
{"id": 545, "code": "```python\nplt.scatter(x, y, edgecolor='black', facecolor='blue')\nplt.show()\n```", "metadata": {"problem_id": 545, "library_problem_id": 34, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 34}}
{"id": 546, "code": "```python\nax = plt.gca()\nax.set_xticks(np.arange(min(x), max(x)+1, 1))\nax.set_yticks(np.arange(min(y), max(y)+1, 1))\nplt.show()\n```", "metadata": {"problem_id": 546, "library_problem_id": 35, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 35}}
{"id": 547, "code": "```python\nax = sns.catplot(y=\"coverage\", x=\"reports\", kind=\"bar\", data=df, label=\"Total\")\nax.set_yticklabels(ax.get_yticks(), size=12)\nplt.ticklabel_format(style='plain', axis='y')\nplt.show()\n```", "metadata": {"problem_id": 547, "library_problem_id": 36, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 36}}
{"id": 548, "code": "```python\nax.lines[0].set_linestyle(\"--\")\nplt.show()\n```", "metadata": {"problem_id": 548, "library_problem_id": 37, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 37}}
{"id": 549, "code": "```python\nfig, axs = plt.subplots(2, 1, sharex=True)\naxs[0].plot(x, y1)\naxs[1].plot(x, y2)\nplt.show()\n```", "metadata": {"problem_id": 549, "library_problem_id": 38, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 38}}
{"id": 550, "code": "```python\nfig, axs = plt.subplots(2, 1)\naxs[0].plot(x, y1)\naxs[1].plot(x, y2)\nfor ax in axs:\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n    ax.spines['bottom'].set_visible(False)\n    ax.spines['left'].set_visible(False)\nplt.show()\n```", "metadata": {"problem_id": 550, "library_problem_id": 39, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 38}}
{"id": 551, "code": "ax = plt.gca()\nax.set_xlabel('')", "metadata": {"problem_id": 551, "library_problem_id": 40, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 40}}
{"id": 552, "code": "plt.xticks([])\nplt.show()", "metadata": {"problem_id": 552, "library_problem_id": 41, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 40}}
{"id": 553, "code": "```python\nplt.xticks([3, 4])\nplt.grid(True, which='both', axis='x')\nplt.show()\n```", "metadata": {"problem_id": 553, "library_problem_id": 42, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 42}}
{"id": 554, "code": "```python\nplt.yticks([3, 4])\nplt.grid(axis='y', linestyle='--')\nplt.show()\n```", "metadata": {"problem_id": 554, "library_problem_id": 43, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 42}}
{"id": 555, "code": "```python\nplt.yticks([3, 4])\nplt.grid(axis='y', linestyle='--', linewidth=0.5)\nplt.xticks([1, 2])\nplt.grid(axis='x', linestyle='--', linewidth=0.5)\nplt.show()\n```", "metadata": {"problem_id": 555, "library_problem_id": 44, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 42}}
{"id": 556, "code": "```python\nplt.grid(True)\nplt.show()\n```", "metadata": {"problem_id": 556, "library_problem_id": 45, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 42}}
{"id": 557, "code": "```python\nplt.legend(loc='lower right')\nplt.show()\n```", "metadata": {"problem_id": 557, "library_problem_id": 46, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 46}}
{"id": 558, "code": "```python\nplt.subplots_adjust(wspace=0.4, hspace=0.4)\nplt.show()\nplt.clf()\n```", "metadata": {"problem_id": 558, "library_problem_id": 47, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 47}}
{"id": 559, "code": "```python\nplt.legend(['Y', 'Z'])\nplt.show()\n```", "metadata": {"problem_id": 559, "library_problem_id": 48, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 48}}
{"id": 560, "code": "ax.xaxis.tick_top()", "metadata": {"problem_id": 560, "library_problem_id": 49, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 49}}
{"id": 561, "code": "plt.xlabel('X', labelpad=20)", "metadata": {"problem_id": 561, "library_problem_id": 50, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 50}}
{"id": 562, "code": "plt.plot(x, y)\nplt.xticks([])\nplt.show()", "metadata": {"problem_id": 562, "library_problem_id": 51, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 51}}
{"id": 563, "code": "```python\nplt.gca().yaxis.tick_right()\nplt.show()\n```", "metadata": {"problem_id": 563, "library_problem_id": 52, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 52}}
{"id": 564, "code": "```python\nplt.ylabel('Y', rotation=90, labelpad=15)\nplt.yticks(label_position='left')\nplt.show()\n```", "metadata": {"problem_id": 564, "library_problem_id": 53, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 52}}
{"id": 565, "code": "```python\nsns.jointplot(x=\"total_bill\", y=\"tip\", data=tips, kind='reg', joint_kws={'line_kws':{'color':'green'}, 'scatter_kws':{'color':'green'}}, marginal_kws={'color':'blue'})\nplt.show()\n```", "metadata": {"problem_id": 565, "library_problem_id": 54, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 54}}
{"id": 566, "code": "```python\nsns.jointplot(x=\"total_bill\", y=\"tip\", data=tips, kind='reg', scatter_kws={'color': 'blue'}, line_kws={'color': 'green'})\nplt.show()\n```", "metadata": {"problem_id": 566, "library_problem_id": 55, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 54}}
{"id": 567, "code": "```python\nsns.jointplot(x=\"total_bill\", y=\"tip\", data=tips, kind='reg')\nplt.show()\n```", "metadata": {"problem_id": 567, "library_problem_id": 56, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 54}}
{"id": 568, "code": "```python\nax = df.plot(kind='bar', x='celltype', y=['s1', 's2'], legend=True)\nplt.xticks(rotation=0)\nplt.show()\n```", "metadata": {"problem_id": 568, "library_problem_id": 57, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 57}}
{"id": 569, "code": "```python\nax = df.plot(kind='bar', x='celltype', y=['s1', 's2'], legend=True)\nplt.xticks(rotation=45)\nplt.show()\n```", "metadata": {"problem_id": 569, "library_problem_id": 58, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 57}}
{"id": 570, "code": "```python\nplt.plot(x, y)\nplt.xlabel('X', color='red')\nplt.xticks(color='red')\nplt.show()\n```", "metadata": {"problem_id": 570, "library_problem_id": 59, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 59}}
{"id": 571, "code": "```python\nplt.plot(x, y)\nplt.xlabel('X', color='red')\nplt.show()\n```", "metadata": {"problem_id": 571, "library_problem_id": 60, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 59}}
{"id": 572, "code": "```python\nplt.xticks(fontsize=10, rotation='vertical')\nplt.plot(x, y)\nplt.show()\n```", "metadata": {"problem_id": 572, "library_problem_id": 61, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 61}}
{"id": 573, "code": "```python\nplt.axvline(x=0.22058956)\nplt.axvline(x=0.33088437)\nplt.axvline(x=2.20589566)\nplt.show()\n```", "metadata": {"problem_id": 573, "library_problem_id": 62, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 62}}
{"id": 574, "code": "```python\nplt.imshow(rand_mat, cmap='hot', interpolation='nearest')\nplt.xticks(ticks=range(len(xlabels)), labels=xlabels, rotation=0, ha='center', va='bottom')\nplt.yticks(ticks=range(len(ylabels)), labels=ylabels[::-1], rotation=90, ha='right', va='center')\nplt.gca().invert_yaxis()\nplt.show()\n```", "metadata": {"problem_id": 574, "library_problem_id": 63, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 63}}
{"id": 575, "code": "```python\nax.legend(loc=0)\nax2.legend(loc=0)\n```", "metadata": {"problem_id": 575, "library_problem_id": 64, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 64}}
{"id": 576, "code": "```python\nfig, axs = plt.subplots(1, 2, figsize=(10, 4))\nfor ax in axs:\n    ax.plot(x, y)\n    ax.set_title('Y')\nplt.show()\n```", "metadata": {"problem_id": 576, "library_problem_id": 65, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 65}}
{"id": 577, "code": "```python\nsns.scatterplot(x=\"bill_length_mm\", y=\"bill_depth_mm\", data=df, s=30)\nplt.show()\n```", "metadata": {"problem_id": 577, "library_problem_id": 66, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 66}}
{"id": 578, "code": "```python\nplt.scatter(a, b)\nfor i, txt in enumerate(c):\n    plt.annotate(txt, (a[i], b[i]))\nplt.show()\n```", "metadata": {"problem_id": 578, "library_problem_id": 67, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 67}}
{"id": 579, "code": "```python\nplt.plot(x, y, label=\"y over x\")\nplt.legend(title=\"Legend Title\")\nplt.show()\n```", "metadata": {"problem_id": 579, "library_problem_id": 68, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 68}}
{"id": 580, "code": "```python\nplt.plot(x, y, label=\"y over x\")\nplt.legend(title=\"Legend\", title_fontsize='large', fontweight='bold')\nplt.show()\n```", "metadata": {"problem_id": 580, "library_problem_id": 69, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 68}}
{"id": 581, "code": "```python\nplt.hist(x, edgecolor='black', linewidth=1.2)\nplt.show()\n```", "metadata": {"problem_id": 581, "library_problem_id": 70, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 70}}
{"id": 582, "code": "```python\nfig, (ax1, ax2) = plt.subplots(1, 2, gridspec_kw={'width_ratios': [3, 1]})\nax1.plot(x, y)\nax2.plot(x, y)\nplt.show()\n```", "metadata": {"problem_id": 582, "library_problem_id": 71, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 71}}
{"id": 583, "code": "```python\nplt.hist(x, bins=bins, alpha=0.5, label='x')\nplt.hist(y, bins=bins, alpha=0.5, label='y')\nplt.legend()\nplt.show()\n```", "metadata": {"problem_id": 583, "library_problem_id": 72, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 72}}
{"id": 584, "code": "```python\nplt.hist([x, y], bins=10, alpha=0.5, label=['x', 'y'])\nplt.legend(loc='upper right')\nplt.show()\n```", "metadata": {"problem_id": 584, "library_problem_id": 73, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 72}}
{"id": 585, "code": "```python\nplt.plot([a, c], [b, d])\nplt.xlim(0, 5)\nplt.ylim(0, 5)\nplt.show()\n```", "metadata": {"problem_id": 585, "library_problem_id": 74, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 74}}
{"id": 586, "code": "```python\nfig, axes = plt.subplots(1, 2)\ncax1 = axes[0].imshow(x, cmap='viridis')\ncax2 = axes[1].imshow(y, cmap='plasma')\n\nfig.colorbar(cax1, ax=axes.ravel().tolist())\nplt.show()\n```", "metadata": {"problem_id": 586, "library_problem_id": 75, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 75}}
{"id": 587, "code": "plt.plot(x[:, 0], label='a')\nplt.plot(x[:, 1], label='b')\nplt.legend()\nplt.show()", "metadata": {"problem_id": 587, "library_problem_id": 76, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 76}}
{"id": 588, "code": "```python\nfig, axs = plt.subplots(1, 2, figsize=(10, 4))\naxs[0].plot(x, y)\naxs[1].plot(a, z)\nplt.suptitle('Y and Z')\nplt.show()\n```", "metadata": {"problem_id": 588, "library_problem_id": 77, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 77}}
{"id": 589, "code": "```python\nplt.plot([p[0] for p in points], [p[1] for p in points])\nplt.yscale('log')\nplt.show()\n```", "metadata": {"problem_id": 589, "library_problem_id": 78, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 78}}
{"id": 590, "code": "```python\nplt.plot(x, y)\nplt.title('Plot of y over x', fontsize=20)\nplt.xlabel('x', fontsize=18)\nplt.ylabel('y', fontsize=16)\nplt.show()\n```", "metadata": {"problem_id": 590, "library_problem_id": 79, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 79}}
{"id": 591, "code": "```python\nax.set_xticks(x + 1)\nax.set_yticks(y + 1)\nax.set_xticklabels(x + 1)\nax.set_yticklabels(y + 1)\n```", "metadata": {"problem_id": 591, "library_problem_id": 80, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 80}}
{"id": 592, "code": "```python\nfor i, line in enumerate(lines):\n    x = [point[0] for point in line]\n    y = [point[1] for point in line]\n    plt.plot(x, y, color=c[i])\nplt.show()\n```", "metadata": {"problem_id": 592, "library_problem_id": 81, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 81}}
{"id": 593, "code": "```python\nplt.loglog(x, y, marker='o')\nplt.xticks([1, 10, 100])\nplt.yticks([1, 10, 100])\nplt.show()\n```", "metadata": {"problem_id": 593, "library_problem_id": 82, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 82}}
{"id": 594, "code": "```python\nfor column in df.columns:\n    plt.plot(df.index, df[column], marker='o', label=column)\n\nplt.legend()\nplt.show()\n```", "metadata": {"problem_id": 594, "library_problem_id": 83, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 83}}
{"id": 595, "code": "```python\nplt.hist(data, weights=np.ones_like(data)/sum(data), bins=range(min(data), max(data)+1))\nplt.yticks(np.arange(0, 1.1, 0.1), [f'{int(y*100)}%' for y in np.arange(0, 1.1, 0.1)])\nplt.show()\n```", "metadata": {"problem_id": 595, "library_problem_id": 84, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 84}}
{"id": 596, "code": "```python\nplt.plot(x, y, marker='o', markersize=10, markerfacecolor='blue', markeredgewidth=1, markeredgecolor='black', alpha=0.5, linestyle='-')\nplt.show()\n```", "metadata": {"problem_id": 596, "library_problem_id": 85, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 85}}
{"id": 597, "code": "```python\nfig, axs = plt.subplots(1, 2, figsize=(10, 5))\n\naxs[0].plot(x, y, label='y')\naxs[1].plot(z, a, label='a')\n\nfig.legend(loc='upper center', bbox_to_anchor=(0.5, 1.05), ncol=2)\nplt.show()\n```", "metadata": {"problem_id": 597, "library_problem_id": 86, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 86}}
{"id": 598, "code": "```python\nfig, axs = plt.subplots(1, 2, figsize=(10, 4), sharey=False)\n\nsns.regplot(x=\"bill_length_mm\", y=\"bill_depth_mm\", data=df, ax=axs[0])\nsns.regplot(x=\"bill_length_mm\", y=\"flipper_length_mm\", data=df, ax=axs[1])\n\nplt.show()\n```", "metadata": {"problem_id": 598, "library_problem_id": 87, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 87}}
{"id": 599, "code": "ax.set_xticklabels(['', 'second'] + [str(i) for i in range(3, 10)])", "metadata": {"problem_id": 599, "library_problem_id": 88, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 88}}
{"id": 600, "code": "```python\nplt.plot(x, y, label=r'$\\lambda$')\nplt.legend()\nplt.show()\n```", "metadata": {"problem_id": 600, "library_problem_id": 89, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 89}}
{"id": 601, "code": "```python\nextra_ticks = [2.1, 3, 7.6]\nall_ticks = list(plt.xticks()[0]) + extra_ticks\nall_ticks.sort()\nplt.xticks(all_ticks)\n```", "metadata": {"problem_id": 601, "library_problem_id": 90, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 90}}
{"id": 602, "code": "```python\nplt.xticks(rotation=-60, ha='left')\nplt.show()\n```", "metadata": {"problem_id": 602, "library_problem_id": 91, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 91}}
{"id": 603, "code": "```python\nplt.yticks(rotation=-60)\nplt.xticks(va='top')\nplt.show()\n```", "metadata": {"problem_id": 603, "library_problem_id": 92, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 91}}
{"id": 604, "code": "```python\nplt.xticks(alpha=0.5)\n```", "metadata": {"problem_id": 604, "library_problem_id": 93, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 91}}
{"id": 605, "code": "```python\nplt.margins(x=0, y=0.05)\n```", "metadata": {"problem_id": 605, "library_problem_id": 94, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 94}}
{"id": 606, "code": "```python\nplt.margins(y=-0.1, x=0.1)\n```", "metadata": {"problem_id": 606, "library_problem_id": 95, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 94}}
{"id": 607, "code": "```python\nfig, ax = plt.subplots(1, 2)\nax[0].plot(x, y)\nax[1].plot(x, y)\nfig.suptitle('Figure')\nplt.show()\n```", "metadata": {"problem_id": 607, "library_problem_id": 96, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 96}}
{"id": 608, "code": "```python\nplt.plot(df.index, df[\"Type A\"], label=\"Type A\")\nplt.plot(df.index, df[\"Type B\"], label=\"Type B\")\nplt.xlabel(\"X\")\nplt.ylabel(\"Y\")\nplt.legend()\nplt.show()\n```", "metadata": {"problem_id": 608, "library_problem_id": 97, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 97}}
{"id": 609, "code": "```python\nplt.scatter(x, y, marker='|', hatch='///')\nplt.show()\n```", "metadata": {"problem_id": 609, "library_problem_id": 98, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 98}}
{"id": 610, "code": "```python\nplt.scatter(x, y, edgecolor='none', hatch='|')\nplt.show()\n```", "metadata": {"problem_id": 610, "library_problem_id": 99, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 98}}
{"id": 611, "code": "```python\nplt.scatter(x, y, marker='*')\nplt.show()\n```", "metadata": {"problem_id": 611, "library_problem_id": 100, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 98}}
{"id": 612, "code": "```python\nplt.scatter(x, y, s=100, hatch='*|')\nplt.show()\n```", "metadata": {"problem_id": 612, "library_problem_id": 101, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 98}}
{"id": 613, "code": "```python\nplt.xlim(1, 5)\nplt.ylim(1, 4)\nplt.imshow(data, extent=[1, 5, 1, 4], origin='lower')\nplt.colorbar()\nplt.show()\n```", "metadata": {"problem_id": 613, "library_problem_id": 102, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 102}}
{"id": 614, "code": "```python\nplt.stem(y, x, orientation='horizontal')\nplt.show()\n```", "metadata": {"problem_id": 614, "library_problem_id": 103, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 103}}
{"id": 615, "code": "```python\nplt.bar(d.keys(), d.values(), color=[c[key] for key in d.keys()])\nplt.show()\n```", "metadata": {"problem_id": 615, "library_problem_id": 104, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 104}}
{"id": 616, "code": "```python\nplt.axvline(x=3, label='cutoff')\nplt.legend()\nplt.show()\n```", "metadata": {"problem_id": 616, "library_problem_id": 105, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 105}}
{"id": 617, "code": "```python\nax.bar(labels, height)\nplt.show()\n```", "metadata": {"problem_id": 617, "library_problem_id": 106, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 106}}
{"id": 618, "code": "```python\nplt.pie(data, labels=l, wedgeprops=dict(width=0.4))\nplt.show()\n```", "metadata": {"problem_id": 618, "library_problem_id": 107, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 107}}
{"id": 619, "code": "```python\nplt.plot(x, y)\nplt.grid(True, linestyle='--', color='blue')\nplt.show()\n```", "metadata": {"problem_id": 619, "library_problem_id": 108, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 108}}
{"id": 620, "code": "```python\nplt.minorticks_on()\nplt.grid(which='minor', linestyle='--', color='gray')\nplt.grid(which='major', linestyle='', linewidth=0)\nplt.plot(x, y)\nplt.show()\n```", "metadata": {"problem_id": 620, "library_problem_id": 109, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 109}}
{"id": 621, "code": "```python\nplt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\nplt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nplt.show()\n```", "metadata": {"problem_id": 621, "library_problem_id": 110, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 110}}
{"id": 622, "code": "```python\nplt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\nplt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nplt.show()\n```", "metadata": {"problem_id": 622, "library_problem_id": 111, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 111}}
{"id": 623, "code": "```python\nplt.plot(x, y, marker='o', markerfacecolor='none', markeredgecolor='black')\nplt.show()\n```", "metadata": {"problem_id": 623, "library_problem_id": 112, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 112}}
{"id": 624, "code": "```python\nplt.axvline(x=55, color='green')\nplt.show()\n```", "metadata": {"problem_id": 624, "library_problem_id": 113, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 113}}
{"id": 625, "code": "```python\nx = np.arange(len(blue_bar))\nwidth = 0.35\n\nplt.bar(x - width/2, blue_bar, width, label='Blue')\nplt.bar(x + width/2, orange_bar, width, label='Orange')\n\nplt.xlabel('Categories')\nplt.ylabel('Values')\nplt.title('Side-by-Side Bar Plot')\nplt.xticks(x, ['A', 'B', 'C'])\nplt.legend()\nplt.show()\n```", "metadata": {"problem_id": 625, "library_problem_id": 114, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 114}}
{"id": 626, "code": "```python\nfig, axs = plt.subplots(1, 2, figsize=(10, 5))\n\naxs[0].plot(x, y, label='y over x')\naxs[1].plot(a, z, label='z over a')\n\naxs[0].legend()\n\nplt.show()\n```", "metadata": {"problem_id": 626, "library_problem_id": 115, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 115}}
{"id": 627, "code": "```python\nplt.scatter(x, y, c=y, cmap='Spectral')\nplt.colorbar()\nplt.show()\n```", "metadata": {"problem_id": 627, "library_problem_id": 116, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 116}}
{"id": 628, "code": "plt.xticks(np.arange(min(x), max(x)+1, 1))\nplt.plot(x, y)\nplt.show()", "metadata": {"problem_id": 628, "library_problem_id": 117, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 117}}
{"id": 629, "code": "```python\nsns.catplot(x=\"sex\", y=\"bill_length_mm\", col=\"species\", data=df, kind=\"bar\", sharey=False)\nplt.show()\n```", "metadata": {"problem_id": 629, "library_problem_id": 118, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 118}}
{"id": 630, "code": "```python\ncircle = plt.Circle((0.5, 0.5), 0.2, color='blue', fill=False)\nplt.gca().add_artist(circle)\nplt.xlim(0, 1)\nplt.ylim(0, 1)\nplt.show()\n```", "metadata": {"problem_id": 630, "library_problem_id": 119, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 119}}
{"id": 631, "code": "```python\nplt.plot(x, y)\nplt.title(r'$\\bf{\\phi}$', fontsize=14, fontweight='bold')\nplt.show()\n```", "metadata": {"problem_id": 631, "library_problem_id": 120, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 120}}
{"id": 632, "code": "```python\nplt.plot(x, y, label=\"Line\")\nplt.legend(handlelength=0.1)\nplt.show()\n```", "metadata": {"problem_id": 632, "library_problem_id": 121, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 121}}
{"id": 633, "code": "```python\nplt.plot(x, y, label=\"Line\")\nplt.legend(handlelength=0.3)\nplt.show()\n```", "metadata": {"problem_id": 633, "library_problem_id": 122, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 121}}
{"id": 634, "code": "```python\nplt.legend(ncol=2)\nplt.show()\n```", "metadata": {"problem_id": 634, "library_problem_id": 123, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 121}}
{"id": 635, "code": "```python\nplt.legend()\nplt.show()\n```", "metadata": {"problem_id": 635, "library_problem_id": 124, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 121}}
{"id": 636, "code": "```python\nplt.imshow(data, cmap='viridis')\nplt.colorbar()\nplt.show()\n```", "metadata": {"problem_id": 636, "library_problem_id": 125, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 125}}
{"id": 637, "code": "```python\nplt.plot(x, y)\nplt.title(r'$\\bf{Figure}$ 1')\nplt.show()\n```", "metadata": {"problem_id": 637, "library_problem_id": 126, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 126}}
{"id": 638, "code": "```python\nsns.pairplot(data=df, x_vars=[\"x\"], y_vars=[\"y\"], hue=\"id\")\nplt.legend([],[], frameon=False)\nplt.show()\n```", "metadata": {"problem_id": 638, "library_problem_id": 127, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 127}}
{"id": 639, "code": "plt.plot(x, y)\nplt.gca().invert_xaxis()\nplt.show()", "metadata": {"problem_id": 639, "library_problem_id": 128, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 128}}
{"id": 640, "code": "```python\nplt.gca().set_clip_on(False)\nplt.scatter(x, y)\nplt.show()\n```", "metadata": {"problem_id": 640, "library_problem_id": 129, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 129}}
{"id": 641, "code": "```python\nplt.scatter(x, y, facecolors='red', edgecolors='black')\nplt.show()\n```", "metadata": {"problem_id": 641, "library_problem_id": 130, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 130}}
{"id": 642, "code": "```python\nfig, axs = plt.subplots(2, 2, figsize=(15, 15))\nfor ax in axs.flat:\n    ax.plot(x, y)\nplt.show()\n```", "metadata": {"problem_id": 642, "library_problem_id": 131, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 131}}
{"id": 643, "code": "```python\nplt.hist(x, bins=np.arange(0, 11, 2), edgecolor='black')\nplt.show()\n```", "metadata": {"problem_id": 643, "library_problem_id": 132, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 132}}
{"id": 644, "code": "```python\nplt.fill_between(x, y - error, y + error, alpha=0.3)\nplt.show()\n```", "metadata": {"problem_id": 644, "library_problem_id": 133, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 133}}
{"id": 645, "code": "```python\nplt.axhline(0, color='white')\nplt.axvline(0, color='white')\n```", "metadata": {"problem_id": 645, "library_problem_id": 134, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 134}}
{"id": 646, "code": "```python\nax.errorbar(box_position, box_height, yerr=box_errors, fmt='o', ecolor=c, capsize=5)\n```", "metadata": {"problem_id": 646, "library_problem_id": 135, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 135}}
{"id": 647, "code": "```python\nfig, axs = plt.subplots(1, 2, figsize=(10, 4))\naxs[0].plot(x, y)\naxs[0].set_title('Y')\naxs[1].plot(a, z)\naxs[1].set_title('Z', pad=20)\nplt.show()\n```", "metadata": {"problem_id": 647, "library_problem_id": 136, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 136}}
{"id": 648, "code": "```python\nfig, axs = plt.subplots(4, 4, figsize=(5, 5), gridspec_kw={'wspace': 0.5, 'hspace': 0.5})\nfor i in range(4):\n    for j in range(4):\n        axs[i, j].plot(x, y)\n        axs[i, j].set_xticks(range(10))\n        axs[i, j].set_yticks(range(10))\nplt.show()\n```", "metadata": {"problem_id": 648, "library_problem_id": 137, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 137}}
{"id": 649, "code": "```python\nplt.figure(figsize=(8, 8))\nplt.matshow(d, fignum=1)\nplt.show()\n```", "metadata": {"problem_id": 649, "library_problem_id": 138, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 138}}
{"id": 650, "code": "```python\ntable = plt.table(cellText=df.values, colLabels=df.columns, loc='center', bbox=[0, 0, 1, 1])\nplt.axis('off')\nplt.show()\n```", "metadata": {"problem_id": 650, "library_problem_id": 139, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 139}}
{"id": 651, "code": "```python\nplt.plot(x, y)\nplt.xticks(ticks=x, labels=x, rotation=45, ha='center', verticalalignment='top')\nplt.xticks(ticks=x, labels=x, rotation=45, ha='center', verticalalignment='bottom')\nplt.show()\n```", "metadata": {"problem_id": 651, "library_problem_id": 140, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 140}}
{"id": 652, "code": "plt.plot(x, y)\nplt.xticks(ticks=x, labels=x, ha='center')\nplt.gca().xaxis.set_tick_params(top=True, bottom=True)\nplt.show()", "metadata": {"problem_id": 652, "library_problem_id": 141, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 140}}
{"id": 653, "code": "```python\nplt.plot(x, y)\nplt.xticks(ticks=x)\nplt.tick_params(axis='x', which='major', bottom=False)\nplt.show()\n```", "metadata": {"problem_id": 653, "library_problem_id": 142, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 140}}
{"id": 654, "code": "```python\ng = sns.catplot(x=\"time\", y=\"pulse\", hue=\"kind\", col=\"diet\", data=df)\ng.set_titles(col_template=\"{col_name}\")\ng.axes[0][0].set_title(\"Group: Fat\")\ng.axes[0][1].set_title(\"Group: No Fat\")\nplt.show()\n```", "metadata": {"problem_id": 654, "library_problem_id": 143, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 143}}
{"id": 655, "code": "```python\ng = sns.catplot(x=\"time\", y=\"pulse\", hue=\"kind\", col=\"diet\", data=df, kind=\"scatter\")\ng.set_axis_labels(\"Exercise Time\", \"Pulse Rate\")\nplt.show()\n```", "metadata": {"problem_id": 655, "library_problem_id": 144, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 143}}
{"id": 656, "code": "```python\nsns.catplot(x=\"time\", y=\"pulse\", hue=\"kind\", col=\"diet\", data=df, kind=\"scatter\")\nplt.ylabel(\"\")\nplt.show()\n```", "metadata": {"problem_id": 656, "library_problem_id": 145, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 143}}
{"id": 657, "code": "```python\nplt.plot(x, y, label=\"y\")\nplt.legend(fontsize=8)\nplt.show()\n```", "metadata": {"problem_id": 657, "library_problem_id": 146, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 146}}
{"id": 658, "code": "```python\nplt.figure(figsize=(5, 5), dpi=300)\nplt.plot(x, y)\nplt.show()\n```", "metadata": {"problem_id": 658, "library_problem_id": 147, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 147}}
{"id": 659, "code": "```python\nplt.plot(x, y, label=\"y\")\nplt.legend(frameon=False)\nplt.show()\n```", "metadata": {"problem_id": 659, "library_problem_id": 148, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 148}}
{"id": 660, "code": "```python\nplt.plot(t, a, label='sin(t)')\nplt.plot(t, b, label='cos(t)')\nplt.plot(t, c, label='sin(t) + cos(t)')\nplt.legend()\nplt.show()\n```", "metadata": {"problem_id": 660, "library_problem_id": 149, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 149}}
{"id": 661, "code": "```python\nsns.stripplot(x=\"sex\", y=\"bill_length_mm\", hue=\"species\", data=df)\nplt.legend([],[], frameon=False)\nplt.show()\n```", "metadata": {"problem_id": 661, "library_problem_id": 150, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 150}}
{"id": 662, "code": "```python\ng = sns.FacetGrid(df, row=\"b\")\ng.map(sns.pointplot, \"a\", \"c\")\nfor ax in g.axes.flatten():\n    ax.set_xticks(np.arange(1, 31))\n    ax.set_xticklabels(np.arange(1, 31)[::2])\nplt.show()\n```", "metadata": {"problem_id": 662, "library_problem_id": 151, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 151}}
{"id": 663, "code": "ax.view_init(elev=50, azim=100)", "metadata": {"problem_id": 663, "library_problem_id": 152, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 152}}
{"id": 664, "code": "```python\nplt.plot(x, y)\nplt.xlabel('x')\nplt.ylabel('y')\nplt.xticks([])\nplt.yticks([])\nplt.show()\n```", "metadata": {"problem_id": 664, "library_problem_id": 153, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 153}}
{"id": 665, "code": "```python\ngs = gridspec.GridSpec(nrows=nrow, ncols=ncol, wspace=0, hspace=0)\nfor i in range(nrow):\n    for j in range(ncol):\n        ax = fig.add_subplot(gs[i, j])\n        ax.imshow(x[i*5:(i+1)*5, j*5:(j+1)*5], cmap='viridis')\n        ax.axis('off')\nplt.show()\n```", "metadata": {"problem_id": 665, "library_problem_id": 154, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 154}}
{"id": 666, "code": "```python\nx.assign(1)\nresult = int(x.numpy())\n```", "metadata": {"problem_id": 666, "library_problem_id": 0, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 667, "code": "```python\nx.assign(114514)\nresult = int(x.numpy())\n```", "metadata": {"problem_id": 667, "library_problem_id": 1, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 0}}
{"id": 668, "code": "```python\nresult = tf.one_hot(labels, depth=10)\n```", "metadata": {"problem_id": 668, "library_problem_id": 2, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 2}}
{"id": 669, "code": "```python\nresult = tf.one_hot(labels, depth=10)\n```", "metadata": {"problem_id": 669, "library_problem_id": 3, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 2}}
{"id": 670, "code": "```python\nresult = tf.one_hot(labels, depth=10, dtype=tf.int32)\n```", "metadata": {"problem_id": 670, "library_problem_id": 4, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 2}}
{"id": 671, "code": "```python\nresult = tf.one_hot(labels, depth=10, dtype=tf.int32)\n### END SOLUTION\nreturn result\n```", "metadata": {"problem_id": 671, "library_problem_id": 5, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 2}}
{"id": 672, "code": "```python\nresult = tf.one_hot(labels, depth=10, dtype=tf.int32)\n```", "metadata": {"problem_id": 672, "library_problem_id": 6, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 2}}
{"id": 673, "code": "```python\nds = ds.flat_map(lambda x: tf.data.Dataset.from_tensor_slices([x, x+1, x+2]))\n```", "metadata": {"problem_id": 673, "library_problem_id": 7, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 7}}
{"id": 674, "code": "```python\n    def my_map_func(i):\n        return tf.data.Dataset.from_tensor_slices([i, i+1, i+2])\n    \n    ds = tf.data.Dataset.from_tensor_slices(example_input)\n    ds = ds.flat_map(my_map_func)\n    element = tf.compat.v1.data.make_one_shot_iterator(ds).get_next()\n    result = []\n    with tf.compat.v1.Session() as sess:\n        for _ in range(9):\n            result.append(sess.run(element))\n    print(result)\n```", "metadata": {"problem_id": 674, "library_problem_id": 8, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 7}}
{"id": 675, "code": "```python\nmask = tf.sequence_mask(lengths, maxlen=8, dtype=tf.int32)\nresult = tf.reverse(mask, axis=[1])\n```", "metadata": {"problem_id": 675, "library_problem_id": 9, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 9}}
{"id": 676, "code": "```python\nmax_length = 8\nmask = tf.sequence_mask(lengths, maxlen=max_length)\nresult = tf.reverse(mask, axis=[-1])\n```", "metadata": {"problem_id": 676, "library_problem_id": 10, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 9}}
{"id": 677, "code": "```python\ntf.sequence_mask(lengths, maxlen=8, dtype=tf.float32)\n```", "metadata": {"problem_id": 677, "library_problem_id": 11, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 9}}
{"id": 678, "code": "```python\nresult = tf.sequence_mask(lengths, maxlen=8, dtype=tf.int32)\n```", "metadata": {"problem_id": 678, "library_problem_id": 12, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 9}}
{"id": 679, "code": "```python\nmask = tf.sequence_mask(lengths, maxlen=8, dtype=tf.float32)\nresult = tf.reverse(mask, axis=[-1])\n```", "metadata": {"problem_id": 679, "library_problem_id": 13, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 9}}
{"id": 680, "code": "```python\ntf.meshgrid(a, b, indexing='ij')\n```", "metadata": {"problem_id": 680, "library_problem_id": 14, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 14}}
{"id": 681, "code": "```python\nresult = tf.tensordot(tf.reshape(a, [-1, 1]), b, axes=0)\n```", "metadata": {"problem_id": 681, "library_problem_id": 15, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 14}}
{"id": 682, "code": "```python\nresult = tf.squeeze(a, axis=2)\n```", "metadata": {"problem_id": 682, "library_problem_id": 16, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 16}}
{"id": 683, "code": "```python\nresult = tf.reshape(a, (50, 100, 1, 512))\n```", "metadata": {"problem_id": 683, "library_problem_id": 17, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 16}}
{"id": 684, "code": "```python\nresult = tf.reshape(a, (1, 50, 100, 1, 512))\n```", "metadata": {"problem_id": 684, "library_problem_id": 18, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 16}}
{"id": 685, "code": "```python\ntf.reduce_sum(A, axis=1)\n```", "metadata": {"problem_id": 685, "library_problem_id": 19, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 19}}
{"id": 686, "code": "```python\ntf.reduce_prod(A, axis=1)\n```", "metadata": {"problem_id": 686, "library_problem_id": 20, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 19}}
{"id": 687, "code": "```python\nresult = tf.math.reciprocal(A)\n```", "metadata": {"problem_id": 687, "library_problem_id": 21, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 19}}
{"id": 688, "code": "```python\ntf.reduce_sum(tf.square(tf.subtract(a, b)), axis=1)\n```", "metadata": {"problem_id": 688, "library_problem_id": 22, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 22}}
{"id": 689, "code": "```python\ntf.sqrt(tf.reduce_sum(tf.square(tf.subtract(a, b)), axis=0))\n```", "metadata": {"problem_id": 689, "library_problem_id": 23, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 22}}
{"id": 690, "code": "```python\nresult = tf.reduce_sum(tf.square(tf.subtract(A, B)), axis=1)\n```", "metadata": {"problem_id": 690, "library_problem_id": 24, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 22}}
{"id": 691, "code": "```python\nresult = tf.gather_nd(x, tf.stack((y, z), axis=1))\n```", "metadata": {"problem_id": 691, "library_problem_id": 25, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 25}}
{"id": 692, "code": "```python\nresult = tf.gather_nd(x, tf.stack((row, col), axis=1))\n```", "metadata": {"problem_id": 692, "library_problem_id": 26, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 25}}
{"id": 693, "code": "```python\nresult = tf.gather_nd(x, tf.stack((y, z), axis=1))\n### END SOLUTION\nreturn result\n```", "metadata": {"problem_id": 693, "library_problem_id": 27, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 25}}
{"id": 694, "code": "```python\ntf.matmul(A, B, transpose_b=True)\n```", "metadata": {"problem_id": 694, "library_problem_id": 28, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 28}}
{"id": 695, "code": "```python\nC = tf.matmul(A, B, transpose_b=True)\n```", "metadata": {"problem_id": 695, "library_problem_id": 29, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 28}}
{"id": 696, "code": "```python\nresult = [tf.strings.unicode_decode(tf.constant([item]), 'UTF-8').numpy().decode('UTF-8') for item in x]\n```", "metadata": {"problem_id": 696, "library_problem_id": 30, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 30}}
{"id": 697, "code": "```python\nresult = [tf.strings.unicode_decode(tf.constant([item]), 'UTF-8').numpy().decode('UTF-8') for item in x]\n```", "metadata": {"problem_id": 697, "library_problem_id": 31, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 30}}
{"id": 698, "code": "```python\nmask = tf.cast(tf.not_equal(x, 0), tf.float32)\nsums = tf.reduce_sum(x * mask, axis=-1)\ncounts = tf.reduce_sum(mask, axis=-1)\nresult = sums / counts\n```", "metadata": {"problem_id": 698, "library_problem_id": 32, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 32}}
{"id": 699, "code": "```python\nmask = tf.cast(tf.not_equal(x, 0), tf.float32)\nsums = tf.reduce_sum(x * mask, axis=-1, keepdims=True)\ncounts = tf.reduce_sum(mask, axis=-1, keepdims=True)\nresult = sums / counts\n```", "metadata": {"problem_id": 699, "library_problem_id": 33, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 32}}
{"id": 700, "code": "```python\nresult = tf.math.divide(tf.reduce_sum(x, axis=-1, keepdims=True), tf.cast(tf.math.count_nonzero(x, axis=-1, keepdims=True), tf.float32))\n### END SOLUTION\nreturn result\n```", "metadata": {"problem_id": 700, "library_problem_id": 34, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 32}}
{"id": 701, "code": "```python\nresult = tf.reduce_sum(tf.matmul(A, B)).numpy()\n```", "metadata": {"problem_id": 701, "library_problem_id": 35, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 35}}
{"id": 702, "code": "```python\nresult = tf.argmax(a, axis=1)\n```", "metadata": {"problem_id": 702, "library_problem_id": 36, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 36}}
{"id": 703, "code": "```python\nresult = tf.argmax(a, axis=1)\n```", "metadata": {"problem_id": 703, "library_problem_id": 37, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 36}}
{"id": 704, "code": "```python\nresult = tf.argmax(a, axis=1)\n### END SOLUTION\nreturn result\n```", "metadata": {"problem_id": 704, "library_problem_id": 38, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 36}}
{"id": 705, "code": "```python\nresult = tf.argmin(a, axis=1)\n```", "metadata": {"problem_id": 705, "library_problem_id": 39, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 36}}
{"id": 706, "code": "```python\nmodel.save(\"my_model\")\n```", "metadata": {"problem_id": 706, "library_problem_id": 40, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 40}}
{"id": 707, "code": "```python\ntf.random.set_seed(seed_x)\nresult = tf.random.uniform(shape=[10], minval=1, maxval=5, dtype=tf.int32)\n```", "metadata": {"problem_id": 707, "library_problem_id": 41, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 41}}
{"id": 708, "code": "```python\ntf.random.set_seed(seed_x)\nresult = tf.random.uniform(shape=[114], minval=2, maxval=6, dtype=tf.int32)\n```", "metadata": {"problem_id": 708, "library_problem_id": 42, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 41}}
{"id": 709, "code": "```python\ntf.random.set_seed(seed_x)\nresult = tf.random.uniform(shape=[10], minval=1, maxval=5, dtype=tf.int32)\n### END SOLUTION\nreturn result\n```", "metadata": {"problem_id": 709, "library_problem_id": 43, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 41}}
{"id": 710, "code": "```python\nresult = tf.__version__\n```", "metadata": {"problem_id": 710, "library_problem_id": 44, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 44}}
{"id": 711, "code": "```python\nnp.log(x)\n```", "metadata": {"problem_id": 711, "library_problem_id": 0, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 712, "code": "```python\nnp.log(x), y))\n```", "metadata": {"problem_id": 712, "library_problem_id": 1, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 0}}
{"id": 713, "code": "```python\nfrom scipy.optimize import curve_fit\n\ndef exp_func(x, A, B, C):\n    return A * np.exp(B * x) + C\n\nresult, _ = curve_fit(exp_func, x, y, p0=p0)\n```", "metadata": {"problem_id": 713, "library_problem_id": 2, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 0}}
{"id": 714, "code": "```python\nstatistic, p_value = stats.ks_2samp(x, y)\n```", "metadata": {"problem_id": 714, "library_problem_id": 3, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 3}}
{"id": 715, "code": "```python\nresult = stats.ks_2samp(x, y)[1] < alpha\n```", "metadata": {"problem_id": 715, "library_problem_id": 4, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 3}}
{"id": 716, "code": "```python\nresult = optimize.minimize(lambda x: ((x[0] + x[1] - x[2]) - 2)**2 + ((3*x[0] - x[1] - x[2])**2) + sin(x[1]) + cos(x[1]) + 4, initial_guess)\n```", "metadata": {"problem_id": 716, "library_problem_id": 5, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 5}}
{"id": 717, "code": "```python\np_values = scipy.stats.norm.cdf(z_scores)\n```", "metadata": {"problem_id": 717, "library_problem_id": 6, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 6}}
{"id": 718, "code": "```python\np_values = scipy.stats.norm.cdf(z_scores)\n```", "metadata": {"problem_id": 718, "library_problem_id": 7, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 6}}
{"id": 719, "code": "```python\nz_scores = scipy.stats.norm.ppf(p_values)\n```", "metadata": {"problem_id": 719, "library_problem_id": 8, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 6}}
{"id": 720, "code": "```python\nresult = stats.lognorm.cdf(x, s=mu, scale=np.exp(stddev))\n```", "metadata": {"problem_id": 720, "library_problem_id": 9, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 9}}
{"id": 721, "code": "```python\nexpected_value, median = dist.mean(), dist.median()\n```", "metadata": {"problem_id": 721, "library_problem_id": 10, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 9}}
{"id": 722, "code": "```python\nresult = sa.multiply(sb)\n```", "metadata": {"problem_id": 722, "library_problem_id": 11, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 11}}
{"id": 723, "code": "```python\nresult = sA.multiply(sB.T)\n### END SOLUTION\nreturn result\n```", "metadata": {"problem_id": 723, "library_problem_id": 12, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 11}}
{"id": 724, "code": "```python\ninterpolator = scipy.interpolate.LinearNDInterpolator(points, V)\nresult = interpolator(request)\n```", "metadata": {"problem_id": 724, "library_problem_id": 13, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 13}}
{"id": 725, "code": "```python\ninterpolator = scipy.interpolate.LinearNDInterpolator(points, V)\nresult = interpolator(request)\n```", "metadata": {"problem_id": 725, "library_problem_id": 14, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 13}}
{"id": 726, "code": "```python\nfrom scipy import misc\nfrom scipy.ndimage import rotate\nimport numpy as np\n\ndata_orig = misc.face()\nx0, y0 = 580, 300  # left eye; (xrot,yrot) should point there\nangle = np.random.randint(1, 360)\n\n# Calculate the center of the image\ncenter_y, center_x = np.array(data_orig.shape[:2]) / 2.\n\n# Translate the point to the origin\ntranslated_x = x0 - center_x\ntranslated_y = y0 - center_y\n\n# Rotate the translated point\nrotated_x = translated_x * np.cos(np.deg2rad(angle)) - translated_y * np.sin(np.deg2rad(angle))\nrotated_y = translated_x * np.sin(np.deg2rad(angle)) + translated_y * np.cos(np.deg2rad(angle))\n\n# Translate the point back\nxrot = rotated_x + center_x\nyrot = rotated_y + center_y\n\ndata_rot = rotate(data_orig, angle)\n```", "metadata": {"problem_id": 726, "library_problem_id": 15, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 15}}
{"id": 727, "code": "```python\nresult = M.diagonal()\n```", "metadata": {"problem_id": 727, "library_problem_id": 16, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 16}}
{"id": 728, "code": "```python\nresult = stats.kstest(times, lambda x: x / T)\n```", "metadata": {"problem_id": 728, "library_problem_id": 17, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 17}}
{"id": 729, "code": "```python\nresult = stats.kstest(times, lambda x: x / T)\nreturn result\n### END SOLUTION\n```", "metadata": {"problem_id": 729, "library_problem_id": 18, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 17}}
{"id": 730, "code": "```python\nresult = stats.kstest(times, 'uniform', args=(0, T), alternative='two-sided').pvalue > 0.05\n```", "metadata": {"problem_id": 730, "library_problem_id": 19, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 17}}
{"id": 731, "code": "```python\nFeature = sparse.hstack([c1, c2])\n```", "metadata": {"problem_id": 731, "library_problem_id": 20, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 20}}
{"id": 732, "code": "```python\nFeature = hstack([c1, c2]).tocsr()\n```", "metadata": {"problem_id": 732, "library_problem_id": 21, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 20}}
{"id": 733, "code": "```python\nFeature = sparse.vstack([c1, c2])\n```", "metadata": {"problem_id": 733, "library_problem_id": 22, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 20}}
{"id": 734, "code": "```python\ndist_matrix = scipy.spatial.distance.cdist(points1, points2, 'euclidean')\nrow_ind, col_ind = scipy.optimize.linear_sum_assignment(dist_matrix)\nresult = col_ind\n```", "metadata": {"problem_id": 734, "library_problem_id": 23, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 23}}
{"id": 735, "code": "```python\ndist_matrix = scipy.spatial.distance.cdist(points1, points2, 'cityblock')\nrow_ind, col_ind = scipy.optimize.linear_sum_assignment(dist_matrix)\nresult = col_ind\n```", "metadata": {"problem_id": 735, "library_problem_id": 24, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 23}}
{"id": 736, "code": "```python\nb = sparse.csr_matrix((b.shape[0], b.shape[1]))\n```", "metadata": {"problem_id": 736, "library_problem_id": 25, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 25}}
{"id": 737, "code": "```python\nbinary_img = img > threshold\nlabeled_array, num_features = ndimage.label(binary_img)\nresult = num_features\n```", "metadata": {"problem_id": 737, "library_problem_id": 26, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 26}}
{"id": 738, "code": "```python\nbinary_img = img < threshold\nlabeled_array, num_features = ndimage.label(binary_img)\nresult = num_features\n```", "metadata": {"problem_id": 738, "library_problem_id": 27, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 26}}
{"id": 739, "code": "```python\nresult = len(ndimage.label(img > threshold)[0])\n```", "metadata": {"problem_id": 739, "library_problem_id": 28, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 26}}
{"id": 740, "code": "```python\nbinary_img = img > threshold\nlabeled_array, num_features = ndimage.label(binary_img)\ncenter_of_mass = ndimage.center_of_mass(img, labeled_array, range(1, num_features + 1))\ndistances = [np.sqrt(com[0]**2 + com[1]**2) for com in center_of_mass]\nresult = distances\n```", "metadata": {"problem_id": 740, "library_problem_id": 29, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 26}}
{"id": 741, "code": "```python\nM += M.T - sparse.triu(M.T)\n```", "metadata": {"problem_id": 741, "library_problem_id": 30, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 30}}
{"id": 742, "code": "```python\nsA += sA.T - sA.multiply(sA.T)\n```", "metadata": {"problem_id": 742, "library_problem_id": 31, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 30}}
{"id": 743, "code": "```python\nsquare = scipy.ndimage.binary_opening(square).astype(int)\n```", "metadata": {"problem_id": 743, "library_problem_id": 32, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 32}}
{"id": 744, "code": "```python\nfrom scipy.ndimage import generate_binary_structure, label, remove_small_objects\n\n# Define the binary structure for connectivity\nstructure = generate_binary_structure(2, 2)\n\n# Label connected components\nlabeled_array, num_features = label(square, structure=structure)\n\n# Remove small objects (cells) that are not connected to the boundary\ncleaned_array = remove_small_objects(labeled_array == 1, min_size=1)\n\n# Set the cleaned array back to the original values\nsquare[square != 0] = cleaned_array[square != 0]\n```", "metadata": {"problem_id": 744, "library_problem_id": 33, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 32}}
{"id": 745, "code": "```python\nmean = col.mean()\nstandard_deviation = col.std()\n```", "metadata": {"problem_id": 745, "library_problem_id": 34, "library": "Scipy", "test_case_cnt": 4, "perturbation_type": "Origin", "perturbation_origin_id": 34}}
{"id": 746, "code": "```python\nmax_val = col.data.max()\nmin_val = col.data.min()\n```", "metadata": {"problem_id": 746, "library_problem_id": 35, "library": "Scipy", "test_case_cnt": 4, "perturbation_type": "Semantic", "perturbation_origin_id": 34}}
{"id": 747, "code": "```python\nfrom scipy.stats import mode\n\n# Convert sparse column to dense array\ndense_col = col.toarray().flatten()\n\n# Calculate median and mode\nmedian_value = np.median(dense_col)\nmode_value = mode(dense_col)[0][0]\n\nMedian, Mode = median_value, mode_value\n```", "metadata": {"problem_id": 747, "library_problem_id": 36, "library": "Scipy", "test_case_cnt": 4, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 34}}
{"id": 748, "code": "```python\npopt, pcov = curve_fit(lambda x, *params: sum(a * np.cos((i + 1) * np.pi / tau * x) for i, a in enumerate(params)), z, Ua, p0=[0] * degree)\n```", "metadata": {"problem_id": 748, "library_problem_id": 37, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 37}}
{"id": 749, "code": "```python\nfrom scipy.spatial import distance_matrix\n\n# Flatten the array and get unique IDs\nunique_ids = np.unique(example_array)\nid_indices = {id: np.argwhere(example_array == id) for id in unique_ids}\n\n# Calculate pairwise distances\npairwise_distances = distance_matrix(list(id_indices.values()), list(id_indices.values()))\n\n# Create a list of tuples containing 'from ID', 'to ID', and 'distance'\nresult = [(unique_ids[i], unique_ids[j], dist) for i in range(len(unique_ids)) for j in range(i+1, len(unique_ids)) for dist in pairwise_distances[i][j]]\n```", "metadata": {"problem_id": 749, "library_problem_id": 38, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 38}}
{"id": 750, "code": "```python\nfrom scipy.ndimage import label, center_of_mass\nfrom scipy.spatial.distance import pdist, squareform\n\n# Label connected components\nlabeled_array, num_features = label(example_array)\n\n# Calculate centers of mass for each labeled region\ncenters = center_of_mass(example_array, labeled_array, range(1, num_features + 1))\n\n# Convert centers of mass to a format suitable for pdist\ncenters = np.array([center[::-1] for center in centers])\n\n# Calculate pairwise Manhattan distances\nmanhattan_distances = pdist(centers, 'cityblock')\n\n# Convert the condensed distance matrix to a square form\ndistance_matrix = squareform(manhattan_distances)\n\n# Create a list of tuples (from ID, to ID, distance)\nresult = [(i+1, j+1, distance) for i in range(num_features) for j in range(i+1, num_features) for distance in manhattan_distances[(i*num_features+j)]]\n```", "metadata": {"problem_id": 750, "library_problem_id": 39, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 38}}
{"id": 751, "code": "```python\nimport numpy as np\nimport scipy.spatial.distance\n\ndef find_nearest_edges_distance(raster):\n    unique_ids = np.unique(raster)\n    unique_ids = unique_ids[unique_ids != 0]  # Exclude background value\n    num_ids = len(unique_ids)\n\n    edge_positions = {}\n    for id_val in unique_ids:\n        positions = np.argwhere(raster == id_val)\n        min_row = positions[:, 0].min()\n        max_row = positions[:, 0].max()\n        min_col = positions[:, 1].min()\n        max_col = positions[:, 1].max()\n        edge_positions[id_val] = [(min_row, min_col), (min_row, max_col), (max_row, min_col), (max_row, max_col)]\n\n    distances = np.zeros((num_ids, num_ids))\n    for i in range(num_ids):\n        for j in range(i + 1, num_ids):\n            id_i, id_j = unique_ids[i], unique_ids[j]\n            pos_i = edge_positions[id_i]\n            pos_j = edge_positions[id_j]\n            dists = []\n            for p1 in pos_i:\n                for p2 in pos_j:\n                    dists.append(np.linalg.norm(p1 - p2))\n            distances[i, j] = np.min(dists)\n            distances[j, i] = distances[i, j]\n\n    return unique_ids, distances\n\nunique_ids, distances = find_nearest_edges_distance(example_array)\nprint(\"Unique IDs:\", unique_ids)\nprint(\"Distances:\\n\", distances)\n```", "metadata": {"problem_id": 751, "library_problem_id": 40, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 38}}
{"id": 752, "code": "```python\nresult = np.zeros((5, 100))\nfor j in range(5):\n    tck = interpolate.splrep(x[:, j], y[:, j], k=2, s=4)\n    result[j] = interpolate.splev(x_val, tck, der=0)\n```", "metadata": {"problem_id": 752, "library_problem_id": 41, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 41}}
{"id": 753, "code": "```python\nstatistic, critical_values, significance_level = ss.anderson_ksamp([x1, x2, x3, x4])\n```", "metadata": {"problem_id": 753, "library_problem_id": 42, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 42}}
{"id": 754, "code": "```python\nresult = ss.anderson_ksamp([x1, x2])\nis_same_population = result.significance_level[0] >= 0.05\n```", "metadata": {"problem_id": 754, "library_problem_id": 43, "library": "Scipy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 42}}
{"id": 755, "code": "```python\ndef tau1(x, y):\n    tau, p_value = stats.kendalltau(x, y)\n    return tau\n\nfor col1 in df.columns:\n    for col2 in df.columns:\n        if col1 != col2:\n            df[f'{col1}{col2}'] = df[[col1, col2]].rolling(window=3).apply(lambda x: tau1(x[col1], x[col2]), raw=False)\n```", "metadata": {"problem_id": 755, "library_problem_id": 44, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 44}}
{"id": 756, "code": "```python\nresult = sa.nnz == 0\n```", "metadata": {"problem_id": 756, "library_problem_id": 45, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 45}}
{"id": 757, "code": "```python\nresult = sa.nnz == 0\n```", "metadata": {"problem_id": 757, "library_problem_id": 46, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 45}}
{"id": 758, "code": "```python\nresult = block_diag(*a)\n```", "metadata": {"problem_id": 758, "library_problem_id": 47, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 47}}
{"id": 759, "code": "```python\np_value = stats.ranksums(pre_course_scores, during_course_scores).pvalue\n```", "metadata": {"problem_id": 759, "library_problem_id": 48, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 48}}
{"id": 760, "code": "```python\np_value = f(pre_course_scores, during_course_scores).pvalue\n```", "metadata": {"problem_id": 760, "library_problem_id": 49, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 48}}
{"id": 761, "code": "```python\nmean_a = np.mean(a)\nstd_a = np.std(a, ddof=0)\nkurtosis_result = np.sum(((a - mean_a) / std_a)**4) / len(a)\n```", "metadata": {"problem_id": 761, "library_problem_id": 50, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 50}}
{"id": 762, "code": "```python\nkurtosis_result = scipy.stats.kurtosis(a, fisher=True, bias=False)\n```", "metadata": {"problem_id": 762, "library_problem_id": 51, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 50}}
{"id": 763, "code": "```python\nresult = interpolator(s, t).flatten()\n```", "metadata": {"problem_id": 763, "library_problem_id": 52, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 52}}
{"id": 764, "code": "```python\nresult = interpolator(s, t)\n```", "metadata": {"problem_id": 764, "library_problem_id": 53, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 52}}
{"id": 765, "code": "```python\nresult = np.array([vor.point_region[vor.find_simplex(point)] for point in extraPoints])\n```", "metadata": {"problem_id": 765, "library_problem_id": 54, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 54}}
{"id": 766, "code": "```python\nresult = np.array([vor.point_region[vor.find_simplex(point)] for point in extraPoints])\n```", "metadata": {"problem_id": 766, "library_problem_id": 55, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 54}}
{"id": 767, "code": "```python\nfrom scipy.sparse import csr_matrix\n\n# Assuming 'vectors' is your list of numpy arrays with varying lengths\nmax_length = max(len(vec) for vec in vectors)\n\n# Pad each vector with zeros to match the maximum length\npadded_vectors = [np.pad(vec, (0, max_length - len(vec)), mode='constant') for vec in vectors]\n\n# Create a sparse matrix from the padded vectors\nresult = csr_matrix(padded_vectors)\n```", "metadata": {"problem_id": 767, "library_problem_id": 56, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 56}}
{"id": 768, "code": "```python\nb = scipy.ndimage.median_filter(a, size=3, origin=(-1, 0))\n```", "metadata": {"problem_id": 768, "library_problem_id": 57, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 57}}
{"id": 769, "code": "```python\nresult = M[row, column]\n```", "metadata": {"problem_id": 769, "library_problem_id": 58, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 58}}
{"id": 770, "code": "```python\nresult = M[row, column].toarray().flatten()\n```", "metadata": {"problem_id": 770, "library_problem_id": 59, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 58}}
{"id": 771, "code": "```python\nnew_array = scipy.interpolate.interp1d(x, array, axis=0)(x_new)\n```", "metadata": {"problem_id": 771, "library_problem_id": 60, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 60}}
{"id": 772, "code": "```python\nprob = NormalDistro(u, o2, x)\n```", "metadata": {"problem_id": 772, "library_problem_id": 61, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 61}}
{"id": 773, "code": "```python\nP_inner = scipy.integrate.quad(NDfx, -dev, dev)[0]\n```", "metadata": {"problem_id": 773, "library_problem_id": 62, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 61}}
{"id": 774, "code": "```python\nresult = sf.dct(np.eye(N), type=2, norm='ortho')\n```", "metadata": {"problem_id": 774, "library_problem_id": 63, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 63}}
{"id": 775, "code": "```python\nresult = sparse.diags(matrix, offsets=[-1, 0, 1]).toarray()\n```", "metadata": {"problem_id": 775, "library_problem_id": 64, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 64}}
{"id": 776, "code": "```python\nresult = scipy.stats.binom.pmf(np.arange(N+1), N, p).reshape(-1, 1) @ scipy.stats.binom.pmf(np.arange(N+1), N, p)\n```", "metadata": {"problem_id": 776, "library_problem_id": 65, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 65}}
{"id": 777, "code": "```python\nresult = df.apply(stats.zscore)\n```", "metadata": {"problem_id": 777, "library_problem_id": 66, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 66}}
{"id": 778, "code": "```python\nresult = df.apply(stats.zscore)\n```", "metadata": {"problem_id": 778, "library_problem_id": 67, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 66}}
{"id": 779, "code": "```python\nz_scores = df.apply(stats.zscore)\nresult = pd.concat([df, z_scores.add_prefix('zscore_')], axis=1)\n```", "metadata": {"problem_id": 779, "library_problem_id": 68, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 66}}
{"id": 780, "code": "```python\nz_scores = df.apply(stats.zscore)\nresult = pd.concat([df.round(3), z_scores.round(3)], keys=['data', 'zscore'])\n```", "metadata": {"problem_id": 780, "library_problem_id": 69, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 66}}
{"id": 781, "code": "```python\nresult = scipy.optimize.line_search(test_func, test_grad, starting_point, direction)\n```", "metadata": {"problem_id": 781, "library_problem_id": 70, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 70}}
{"id": 782, "code": "```python\nmid = np.array([[shape[0]//2, shape[1]//2]])\nresult = distance.cdist(np.indices(shape).reshape(2,-1).T, mid, 'euclidean').reshape(shape)\n```", "metadata": {"problem_id": 782, "library_problem_id": 71, "library": "Scipy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 71}}
{"id": 783, "code": "```python\nmid = np.array([[shape[0]//2, shape[1]//2]])\nresult = distance.cdist(np.indices(shape).reshape(2,-1).T, mid, 'cityblock').reshape(shape)\n```", "metadata": {"problem_id": 783, "library_problem_id": 72, "library": "Scipy", "test_case_cnt": 3, "perturbation_type": "Semantic", "perturbation_origin_id": 71}}
{"id": 784, "code": "```python\nmid = np.array([[shape[0]//2, shape[1]//2]])\nresult = distance.cdist(np.indices(shape).reshape(2,-1).T, mid, 'euclidean').reshape(shape)\nreturn result\n### END SOLUTION\n```", "metadata": {"problem_id": 784, "library_problem_id": 73, "library": "Scipy", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 71}}
{"id": 785, "code": "```python\nresult = scipy.ndimage.zoom(x, (shape[0]/x.shape[0], shape[1]/x.shape[1]), order=1)\n```", "metadata": {"problem_id": 785, "library_problem_id": 74, "library": "Scipy", "test_case_cnt": 4, "perturbation_type": "Origin", "perturbation_origin_id": 74}}
{"id": 786, "code": "```python\nresult = scipy.optimize.least_squares(lambda x: a.dot(x**2) - y, x0)\nout = result.x\n```", "metadata": {"problem_id": 786, "library_problem_id": 75, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 75}}
{"id": 787, "code": "```python\nresult = scipy.optimize.minimize(lambda x: np.sum((a @ (x ** 2) - y) ** 2), x0, method='L-BFGS-B', bounds=scipy.optimize.Bounds(x_lower_bounds, None))\nout = result.x\n```", "metadata": {"problem_id": 787, "library_problem_id": 76, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 75}}
{"id": 788, "code": "```python\ndef dN1_dt_time_varying(t, N1):\n    return -100 * N1 + np.sin(t)\n\nsol = solve_ivp(fun=dN1_dt_time_varying, t_span=time_span, y0=[N0,])\n\nresult = sol.y\n```", "metadata": {"problem_id": 788, "library_problem_id": 77, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 77}}
{"id": 789, "code": "```python\ndef dN1_dt_time_varying(t, N1):\n    input_condition = t - np.sin(t) if 0 < t < 2*np.pi else 2*np.pi\n    return -100 * N1 + input_condition\n\nsol = solve_ivp(fun=dN1_dt_time_varying, t_span=time_span, y0=[N0,])\n\nresult = sol.y\n```", "metadata": {"problem_id": 789, "library_problem_id": 78, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 77}}
{"id": 790, "code": "```python\ndef dN1_dt_time_varying(t, N1):\n    return -100 * N1 - np.cos(t)\n\nsol = solve_ivp(fun=dN1_dt_time_varying, t_span=time_span, y0=[N0,])\n\nresult = sol.y\n```", "metadata": {"problem_id": 790, "library_problem_id": 79, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 77}}
{"id": 791, "code": "```python\nfor t in range(4):\n    def const(x, t=t):    \n        return x[t] - I[t]\n    cons.append({'type':'ineq', 'fun': const})\n```", "metadata": {"problem_id": 791, "library_problem_id": 80, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 80}}
{"id": 792, "code": "```python\nresult = sparse.vstack([sa, sb], format='csr')\n```", "metadata": {"problem_id": 792, "library_problem_id": 81, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 81}}
{"id": 793, "code": "```python\nresult = sparse.hstack([sa, sb], format='csr')\n```", "metadata": {"problem_id": 793, "library_problem_id": 82, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 81}}
{"id": 794, "code": "```python\nresult = scipy.integrate.quad(lambda x: 2*x*c, low, high)[0]\n```", "metadata": {"problem_id": 794, "library_problem_id": 83, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 83}}
{"id": 795, "code": "```python\nresult = scipy.integrate.quad(lambda x: 2 * x * c, low, high)[0]\n### END SOLUTION\nreturn result\n```\n\nThis code defines a function `f` that takes three arguments: `c`, `low`, and `high`. It uses `scipy.integrate.quad` to compute the definite integral of the function `2 * x * c` from `low` to `high`. The `[0]` at the end extracts just the result from the tuple returned by `quad`.", "metadata": {"problem_id": 795, "library_problem_id": 84, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 83}}
{"id": 796, "code": "```python\nV += x * sparse.eye(V.shape[0], format='dok')\n```", "metadata": {"problem_id": 796, "library_problem_id": 85, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 85}}
{"id": 797, "code": "```python\nV.data += x\n```", "metadata": {"problem_id": 797, "library_problem_id": 86, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 85}}
{"id": 798, "code": "```python\nV.data += x\nV.data += y\n```", "metadata": {"problem_id": 798, "library_problem_id": 87, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 85}}
{"id": 799, "code": "```python\nsa[:, Col] *= (1 / Len)\n```", "metadata": {"problem_id": 799, "library_problem_id": 88, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 88}}
{"id": 800, "code": "```python\nsa.data[sa.indptr[:-1]] /= sa.indptr[1:] - sa.indptr[:-1]\n```", "metadata": {"problem_id": 800, "library_problem_id": 89, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 88}}
{"id": 801, "code": "```python\na = (a > 0).astype(int)\n```", "metadata": {"problem_id": 801, "library_problem_id": 90, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 90}}
{"id": 802, "code": "```python\na = (a > 0).astype(int)\n```", "metadata": {"problem_id": 802, "library_problem_id": 91, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 90}}
{"id": 803, "code": "```python\nfrom scipy.spatial import distance_matrix\n\n# Calculate the distance matrix between data points and centroids\ndist_matrix = distance_matrix(data, centroids)\n\n# Find the indices of the minimum distances (closest elements) for each cluster\nresult = np.argmin(dist_matrix, axis=0)\n```", "metadata": {"problem_id": 803, "library_problem_id": 92, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 92}}
{"id": 804, "code": "```python\nfrom scipy.spatial import KDTree\n\ntree = KDTree(data)\ndistances, indices = tree.query(centroids, k=1)\nclosest_points = data[indices]\nresult = closest_points\n```", "metadata": {"problem_id": 804, "library_problem_id": 93, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 92}}
{"id": 805, "code": "```python\nfrom scipy.spatial import distance_matrix\n\n# Calculate the distance matrix between data points and centroids\ndist_matrix = distance_matrix(data, centroids)\n\n# Find the indices of the k-th closest elements to each centroid\nresult = np.argsort(dist_matrix, axis=0)[k-1]\n```", "metadata": {"problem_id": 805, "library_problem_id": 94, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 92}}
{"id": 806, "code": "```python\nresult = np.array([fsolve(lambda a: eqn(x, a, b), x0=0.5, args=(x, b)) for x, b in zip(xdata, bdata)])\n```", "metadata": {"problem_id": 806, "library_problem_id": 95, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 95}}
{"id": 807, "code": "```python\nresult = []\nfor x, a in zip(xdata, adata):\n    sol = fsolve(lambda b: eqn(x, a, b), x0=0.5)\n    sorted_sol = np.sort(sol)\n    result.append(sorted_sol.tolist())\n```", "metadata": {"problem_id": 807, "library_problem_id": 96, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 95}}
{"id": 808, "code": "```python\nresult = stats.kstest(sample_data, 'norm', args=(np.mean(sample_data), np.std(sample_data)))\n```", "metadata": {"problem_id": 808, "library_problem_id": 97, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 97}}
{"id": 809, "code": "```python\nresult = stats.kstest(sample_data, lambda x: bekkers(x, estimated_a, estimated_m, estimated_d))[1] < 0.05\n```", "metadata": {"problem_id": 809, "library_problem_id": 98, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 97}}
{"id": 810, "code": "```python\nimport numpy as np\n\ndef rolling_integral(df, window):\n    times = df.index.values.astype('datetime64[ns]').view('int64') / 1e9  # Convert time to seconds since epoch\n    values = df['A'].values\n    integrals = []\n    for i in range(len(values)):\n        if i < window:\n            integral = integrate.trapz(values[:i+1], times[:i+1])\n        else:\n            integral = integrate.trapz(values[i-window+1:i+1], times[i-window+1:i+1])\n        integrals.append(integral)\n    return pd.Series(integrals, index=df.index)\n\nwindow_size = '25S'  # Define your desired window size\nrolling_window = int(pd.Timedelta(window_size).total_seconds())\nintegral_df = rolling_integral(df, rolling_window)\n```", "metadata": {"problem_id": 810, "library_problem_id": 99, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 99}}
{"id": 811, "code": "```python\nresult = scipy.interpolate.griddata(x, y, eval, method='linear')\n```", "metadata": {"problem_id": 811, "library_problem_id": 100, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 100}}
{"id": 812, "code": "```python\nfrom scipy.stats import multinomial\n\n# Count the occurrences of each category\ncounts = a['A1'].value_counts().sort_index().values\n\n# Perform maximum likelihood estimation\nparams, _ = multinomial.fit(counts)\n\n# Create a dictionary with category weights\nweights = dict(enumerate(params))\n\nprint(weights)\n```", "metadata": {"problem_id": 812, "library_problem_id": 101, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 101}}
{"id": 813, "code": "```python\nresult = sciopt.minimize(lambda p: e(p, x, y), x0=np.array([1.0, 1.0]), bounds=sciopt.Bounds(pmin, pmax)).x\n```", "metadata": {"problem_id": 813, "library_problem_id": 102, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 102}}
{"id": 814, "code": "```python\nresult = np.where((np.convolve(arr, np.ones(2*n+1)/len(np.ones(2*n+1)), mode='same') == arr))[0]\n```", "metadata": {"problem_id": 814, "library_problem_id": 103, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 103}}
{"id": 815, "code": "```python\nresult = []\nfor i in range(arr.shape[0]):\n    for j in range(arr.shape[1]):\n        neighbors = []\n        for k in range(max(0, j-n), min(j+n+1, arr.shape[1])):\n            neighbors.append(arr[i, k])\n        if all(arr[i, j] <= x for x in neighbors):\n            result.append([i, j])\n```", "metadata": {"problem_id": 815, "library_problem_id": 104, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 103}}
{"id": 816, "code": "```python\ndf = df[(np.abs(stats.zscore(df.select_dtypes(include=[np.number]))) < 3).all(axis=1)]\n```", "metadata": {"problem_id": 816, "library_problem_id": 105, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 105}}
{"id": 817, "code": "```python\ndata1 = pd.DataFrame(data.data, columns=data.feature_names)\n```", "metadata": {"problem_id": 817, "library_problem_id": 0, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 818, "code": "```python\ndata1 = pd.DataFrame(data.data, columns=data.feature_names)\n```", "metadata": {"problem_id": 818, "library_problem_id": 1, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 0}}
{"id": 819, "code": "```python\ndata1 = pd.DataFrame(data.data, columns=data.feature_names)\n```", "metadata": {"problem_id": 819, "library_problem_id": 2, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 0}}
{"id": 820, "code": "```python\nresult = pd.DataFrame(data.data, columns=data.feature_names)\n### END SOLUTION\nreturn result\n```", "metadata": {"problem_id": 820, "library_problem_id": 3, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 0}}
{"id": 821, "code": "```python\nfrom sklearn.preprocessing import MultiLabelBinarizer\n\nmlb = MultiLabelBinarizer()\ndf_out = pd.concat([df[['Col1', 'Col2']], pd.DataFrame(mlb.fit_transform(df['Col3']), columns=mlb.classes_)], axis=1)\n```", "metadata": {"problem_id": 821, "library_problem_id": 4, "library": "Sklearn", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 4}}
{"id": 822, "code": "```python\ndf_out = pd.get_dummies(df.set_index('Col1').explode('Col3')).groupby(level=0).sum().reset_index()\n```", "metadata": {"problem_id": 822, "library_problem_id": 5, "library": "Sklearn", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 4}}
{"id": 823, "code": "```python\nfrom sklearn.preprocessing import MultiLabelBinarizer\n\nmlb = MultiLabelBinarizer()\none_hot_encoded = mlb.fit_transform(df.iloc[:, -1])\ndf_out = pd.concat([df.iloc[:, :-1], pd.DataFrame(one_hot_encoded, columns=mlb.classes_)], axis=1)\n```", "metadata": {"problem_id": 823, "library_problem_id": 6, "library": "Sklearn", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 4}}
{"id": 824, "code": "```python\ndf_out = pd.get_dummies(df.iloc[:, -1]).groupby(level=0).max()\ndf = pd.concat([df.iloc[:, :-1], df_out], axis=1)\n```", "metadata": {"problem_id": 824, "library_problem_id": 7, "library": "Sklearn", "test_case_cnt": 4, "perturbation_type": "Semantic", "perturbation_origin_id": 4}}
{"id": 825, "code": "```python\ndf_out = pd.get_dummies(df.iloc[:, -1]).groupby(level=0).max().reset_index(drop=True)\ndf_out = pd.concat([df.iloc[:, :-1], df_out], axis=1)\n```", "metadata": {"problem_id": 825, "library_problem_id": 8, "library": "Sklearn", "test_case_cnt": 4, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 4}}
{"id": 826, "code": "```python\nfrom sklearn.calibration import CalibratedClassifierCV\n\ncalibrated_model = CalibratedClassifierCV(svmmodel, cv=5)\ncalibrated_model.fit(X, y)\nproba = calibrated_model.predict_proba(x_test)[:, 1]\n```", "metadata": {"problem_id": 826, "library_problem_id": 9, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 9}}
{"id": 827, "code": "```python\ncalibrated_model = svm.calibration.CalibratedClassifierCV(model, cv=5)\ncalibrated_model.fit(X, y)\nproba = calibrated_model.predict_proba(x_predict)\n```", "metadata": {"problem_id": 827, "library_problem_id": 10, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 9}}
{"id": 828, "code": "```python\ndf_transformed = pd.DataFrame(transform_output.toarray())\ndf = pd.concat([df_origin.reset_index(drop=True), df_transformed], axis=1)\n```", "metadata": {"problem_id": 828, "library_problem_id": 11, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 11}}
{"id": 829, "code": "```python\ndf_transformed = pd.DataFrame(transform_output.toarray())\ndf = pd.concat([df_origin.reset_index(drop=True), df_transformed], axis=1)\n```", "metadata": {"problem_id": 829, "library_problem_id": 12, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 11}}
{"id": 830, "code": "```python\nresult = pd.concat([df.reset_index(drop=True), pd.DataFrame(transform_output.toarray())], axis=1)\nreturn result\n### END SOLUTION\n```", "metadata": {"problem_id": 830, "library_problem_id": 13, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 11}}
{"id": 831, "code": "```python\nsteps = clf.named_steps\ndel steps['poly']\nclf.steps = list(steps.items())\n```", "metadata": {"problem_id": 831, "library_problem_id": 14, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 14}}
{"id": 832, "code": "```python\nsteps = clf.named_steps\ndel steps['dim_svm']\nclf.steps = list(steps.items())\n```", "metadata": {"problem_id": 832, "library_problem_id": 15, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 14}}
{"id": 833, "code": "```python\nsteps = clf.named_steps\ndel steps['pOly']\nclf.steps = list(steps.items())\n```", "metadata": {"problem_id": 833, "library_problem_id": 16, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 14}}
{"id": 834, "code": "```python\nsteps = clf.named_steps\ndel steps['poly']\nsteps['new_step'] = ('new_step', SVC())\n```", "metadata": {"problem_id": 834, "library_problem_id": 17, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 17}}
{"id": 835, "code": "```python\nsteps = clf.named_steps\ndel steps['dim_svm']\nsteps['new_step'] = SVC()\n```", "metadata": {"problem_id": 835, "library_problem_id": 18, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 17}}
{"id": 836, "code": "```python\nsteps = clf.named_steps\nsteps['new_step'] = ('t1919810', PCA())\nclf.steps = list(steps.items())\n```", "metadata": {"problem_id": 836, "library_problem_id": 19, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 17}}
{"id": 837, "code": "```python\nb = gridsearch.best_score_\nc = gridsearch.predict(testX)\n```", "metadata": {"problem_id": 837, "library_problem_id": 20, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 20}}
{"id": 838, "code": "```python\nbest_model = gridsearch.best_estimator_\nb = best_model.score(testX, testY)\nc = best_model.predict(testX)\n```", "metadata": {"problem_id": 838, "library_problem_id": 21, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 20}}
{"id": 839, "code": "```python\nproba = []\nfor train_index, test_index in cv:\n    X_train, X_test = X[train_index], X[test_index]\n    y_train, y_test = y[train_index], y[test_index]\n    logreg.fit(X_train, y_train)\n    proba.extend(logreg.predict_proba(X_test))\n```", "metadata": {"problem_id": 839, "library_problem_id": 22, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 22}}
{"id": 840, "code": "```python\nproba = []\nfor train_index, test_index in cv:\n    X_train, X_test = X[train_index], X[test_index]\n    y_train, y_test = y[train_index], y[test_index]\n    logreg.fit(X_train, y_train)\n    proba.extend(logreg.predict_proba(X_test)[:, 1])\n```", "metadata": {"problem_id": 840, "library_problem_id": 23, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 22}}
{"id": 841, "code": "```python\ninversed = scaler.inverse_transform(scaled)\n```", "metadata": {"problem_id": 841, "library_problem_id": 24, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 24}}
{"id": 842, "code": "```python\ninversed = scaler.inverse_transform(scaled)\nreturn inversed\n### END SOLUTION\n```", "metadata": {"problem_id": 842, "library_problem_id": 25, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 24}}
{"id": 843, "code": "```python\nmodel_name = type(model).__name__\n```", "metadata": {"problem_id": 843, "library_problem_id": 26, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 26}}
{"id": 844, "code": "```python\nmodel_name = type(model).__name__\n```", "metadata": {"problem_id": 844, "library_problem_id": 27, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 26}}
{"id": 845, "code": "```python\nmodel_name = type(model).__name__\n```", "metadata": {"problem_id": 845, "library_problem_id": 28, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 26}}
{"id": 846, "code": "```python\ntf_idf_out = pipe.named_steps[\"tf_idf\"].transform(data.test)\n```", "metadata": {"problem_id": 846, "library_problem_id": 29, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 29}}
{"id": 847, "code": "```python\ntf_idf_out = pipe.named_steps[\"tf_idf\"].transform(data.test)\n```", "metadata": {"problem_id": 847, "library_problem_id": 30, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 29}}
{"id": 848, "code": "```python\nselect_out = pipe.named_steps['select'].transform(data)\n```", "metadata": {"problem_id": 848, "library_problem_id": 31, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 29}}
{"id": 849, "code": "```python\nclf = GridSearchCV(bc, param_grid, cv=5)\nclf.fit(X_train, y_train)\nproba = clf.predict_proba(X_test)\n```", "metadata": {"problem_id": 849, "library_problem_id": 32, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 32}}
{"id": 850, "code": "```python\npredict = regressor.predict(X_test)\n```", "metadata": {"problem_id": 850, "library_problem_id": 33, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 33}}
{"id": 851, "code": "```python\ny = y.reshape(-1, 1)\nregressor = RandomForestRegressor(n_estimators=150, min_samples_split=2, random_state=42)\nrgr = regressor.fit(X, y.flatten())\npredict = rgr.predict(X_test)\n```", "metadata": {"problem_id": 851, "library_problem_id": 34, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 33}}
{"id": 852, "code": "```python\ntfidf = TfidfVectorizer(preprocessor=preprocess)\n```", "metadata": {"problem_id": 852, "library_problem_id": 35, "library": "Sklearn", "test_case_cnt": 0, "perturbation_type": "Origin", "perturbation_origin_id": 35}}
{"id": 853, "code": "```python\ndef prePro(text):\n    return text.lower()\n\ntfidf = TfidfVectorizer(preprocessor=prePro)\n```", "metadata": {"problem_id": 853, "library_problem_id": 36, "library": "Sklearn", "test_case_cnt": 0, "perturbation_type": "Semantic", "perturbation_origin_id": 35}}
{"id": 854, "code": "```python\ndf_out = pd.DataFrame(preprocessing.scale(data), index=data.index, columns=data.columns)\n```", "metadata": {"problem_id": 854, "library_problem_id": 37, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 37}}
{"id": 855, "code": "```python\ndf_out = pd.DataFrame(preprocessing.scale(data), index=data.index, columns=data.columns)\n```", "metadata": {"problem_id": 855, "library_problem_id": 38, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 37}}
{"id": 856, "code": "```python\ncoef = grid.best_estimator_.named_steps['model'].coef_\n```", "metadata": {"problem_id": 856, "library_problem_id": 39, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 39}}
{"id": 857, "code": "```python\ncoef = grid.best_estimator_.named_steps['model'].coef_\n```", "metadata": {"problem_id": 857, "library_problem_id": 40, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 39}}
{"id": 858, "code": "```python\nselected_features = X.columns[model.get_support()]\ncolumn_names = selected_features.values\n```", "metadata": {"problem_id": 858, "library_problem_id": 41, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 41}}
{"id": 859, "code": "```python\nselected_features = X.columns[(model.get_support())]\n```", "metadata": {"problem_id": 859, "library_problem_id": 42, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 41}}
{"id": 860, "code": "```python\nselected_features = model.get_support(indices=True)\ncolumn_names = X.columns[selected_features]\n```", "metadata": {"problem_id": 860, "library_problem_id": 43, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 41}}
{"id": 861, "code": "```python\nselected_features = X.columns[model.get_support()]\ncolumn_names = selected_features.tolist()\n```", "metadata": {"problem_id": 861, "library_problem_id": 44, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 41}}
{"id": 862, "code": "```python\nclosest_50_samples = km.cluster_centers_[p]\ndistances = np.linalg.norm(X - closest_50_samples, axis=1)\nindices_of_closest_50 = np.argsort(distances)[:50]\nclosest_50_samples = X[indices_of_closest_50]\n```", "metadata": {"problem_id": 862, "library_problem_id": 45, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 45}}
{"id": 863, "code": "```python\nclosest_50_samples = km.cluster_centers_[p-1]\n```", "metadata": {"problem_id": 863, "library_problem_id": 46, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 45}}
{"id": 864, "code": "```python\nclosest_100_samples = km.cluster_centers_[p]\ndistances = np.linalg.norm(X - closest_100_samples, axis=1)\nindices_of_closest_100 = np.argsort(distances)[:100]\nclosest_100_samples = X[indices_of_closest_100]\n```", "metadata": {"problem_id": 864, "library_problem_id": 47, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 45}}
{"id": 865, "code": "```python\n    distances = np.linalg.norm(X - km.cluster_centers_[p], axis=1)\n    closest_indices = np.argsort(distances)[:50]\n    samples = X[closest_indices]\n    return samples\n    ### END SOLUTION\n```", "metadata": {"problem_id": 865, "library_problem_id": 48, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 45}}
{"id": 866, "code": "```python\nX_train = pd.get_dummies(X_train, columns=[0])\n```", "metadata": {"problem_id": 866, "library_problem_id": 49, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 49}}
{"id": 867, "code": "```python\nX_train = pd.get_dummies(X_train)\n```", "metadata": {"problem_id": 867, "library_problem_id": 50, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 49}}
{"id": 868, "code": "```python\nfrom sklearn.svm import SVR\nsvr = SVR(kernel='rbf')\nsvr.fit(X, y)\npredict = svr.predict(X)\n```", "metadata": {"problem_id": 868, "library_problem_id": 51, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 51}}
{"id": 869, "code": "```python\nfrom sklearn.svm import SVR\n\nmodel = SVR(kernel='rbf')\nmodel.fit(X, y)\npredict = model.predict(X)\n```", "metadata": {"problem_id": 869, "library_problem_id": 52, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 51}}
{"id": 870, "code": "```python\nfrom sklearn.svm import SVR\nsvr_poly = SVR(kernel='poly', degree=2)\nsvr_poly.fit(X, y)\npredict = svr_poly.predict(X)\n```", "metadata": {"problem_id": 870, "library_problem_id": 53, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 51}}
{"id": 871, "code": "```python\nfrom sklearn.svm import SVR\n\nmodel = SVR(kernel='poly', degree=2)\nmodel.fit(X, y)\npredict = model.predict(X)\n```", "metadata": {"problem_id": 871, "library_problem_id": 54, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 53}}
{"id": 872, "code": "```python\nquery_tfidf = tfidf.transform(queries)\ncosine_similarities_of_queries = query_tfidf * tfidf.T\n```", "metadata": {"problem_id": 872, "library_problem_id": 55, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 55}}
{"id": 873, "code": "```python\nquery_tfidf = tfidf.transform(queries)\ncosine_similarities_of_queries = query_tfidf * tfidf.T\n```", "metadata": {"problem_id": 873, "library_problem_id": 56, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 55}}
{"id": 874, "code": "```python\nquery_tfidf = tfidf.transform(queries)\ncosine_similarities_of_queries = query_tfidf * tfidf.T\nreturn cosine_similarities_of_queries.toarray()\n### END SOLUTION\n```", "metadata": {"problem_id": 874, "library_problem_id": 57, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 55}}
{"id": 875, "code": "```python\nfrom sklearn.preprocessing import MultiLabelBinarizer\n\nmlb = MultiLabelBinarizer()\nnew_features = mlb.fit_transform(features)\n```", "metadata": {"problem_id": 875, "library_problem_id": 58, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 58}}
{"id": 876, "code": "```python\nfrom sklearn.preprocessing import MultiLabelBinarizer\n\nmlb = MultiLabelBinarizer()\nnew_f = mlb.fit_transform(f)\n```", "metadata": {"problem_id": 876, "library_problem_id": 59, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 58}}
{"id": 877, "code": "```python\nfrom sklearn.preprocessing import MultiLabelBinarizer\n\nmlb = MultiLabelBinarizer()\nnew_features = mlb.fit_transform(features)\n```", "metadata": {"problem_id": 877, "library_problem_id": 60, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 58}}
{"id": 878, "code": "```python\nfrom sklearn.preprocessing import MultiLabelBinarizer\n\nmlb = MultiLabelBinarizer()\nnew_features = mlb.fit_transform(features)\nreturn new_features\n### END SOLUTION\n```", "metadata": {"problem_id": 878, "library_problem_id": 61, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 58}}
{"id": 879, "code": "```python\nfrom sklearn.preprocessing import MultiLabelBinarizer\n\nmlb = MultiLabelBinarizer()\nnew_features = mlb.fit_transform(features)\n```", "metadata": {"problem_id": 879, "library_problem_id": 62, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 58}}
{"id": 880, "code": "```python\nfrom sklearn.cluster import AgglomerativeClustering\nimport numpy as np\n\n# Assuming data_matrix is already defined as per the problem statement\ndata_matrix = np.array([[0,0.8,0.9],[0.8,0,0.2],[0.9,0.2,0]])\n\n# Perform hierarchical clustering\nclustering = AgglomerativeClustering(n_clusters=2, affinity='precomputed', linkage='complete')\ncluster_labels = clustering.fit_predict(data_matrix)\n\nprint(cluster_labels)\n```", "metadata": {"problem_id": 880, "library_problem_id": 63, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 63}}
{"id": 881, "code": "```python\nfrom sklearn.cluster import AgglomerativeClustering\n\n# Assuming data_matrix is already defined\nclustering_model = AgglomerativeClustering(n_clusters=2, affinity='precomputed', linkage='complete')\ncluster_labels = clustering_model.fit_predict(data_matrix)\n```", "metadata": {"problem_id": 881, "library_problem_id": 64, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 63}}
{"id": 882, "code": "```python\nfrom sklearn.cluster import AgglomerativeClustering\n\n# Assuming simM is already defined as per the problem statement\nclustering = AgglomerativeClustering(n_clusters=2, affinity='precomputed', linkage='complete')\ncluster_labels = clustering.fit_predict(simM)\n```", "metadata": {"problem_id": 882, "library_problem_id": 65, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 63}}
{"id": 883, "code": "```python\nfrom scipy.cluster.hierarchy import linkage, fcluster\nfrom scipy.spatial.distance import squareform\n\n# Convert the distance matrix to a condensed format required by linkage\ncondensed_distance_matrix = squareform(data_matrix)\n\n# Perform hierarchical clustering\nZ = linkage(condensed_distance_matrix, 'average')\n\n# Assign cluster labels\ncluster_labels = fcluster(Z, t=2, criterion='maxclust')\n```", "metadata": {"problem_id": 883, "library_problem_id": 66, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 66}}
{"id": 884, "code": "```python\nfrom scipy.cluster.hierarchy import linkage, fcluster\nfrom scipy.spatial.distance import squareform\n\n# Convert the similarity matrix to a distance matrix\ndistance_matrix = 1 - np.array(data_matrix)\nnp.fill_diagonal(distance_matrix, 0)\n\n# Perform hierarchical clustering\nZ = linkage(squareform(distance_matrix), 'average')\n\n# Assign cluster labels\ncluster_labels = fcluster(Z, t=2, criterion='maxclust')\n```", "metadata": {"problem_id": 884, "library_problem_id": 67, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 66}}
{"id": 885, "code": "```python\nfrom scipy.cluster.hierarchy import linkage, fcluster\nfrom scipy.spatial.distance import squareform\n\n# Convert the similarity matrix to a distance matrix\ndistM = 1 - np.array(simM)\nnp.fill_diagonal(distM, 0)\n\n# Perform hierarchical clustering\nZ = linkage(squareform(distM), 'average')\n\n# Assign cluster labels\ncluster_labels = fcluster(Z, t=2, criterion='maxclust')\n```", "metadata": {"problem_id": 885, "library_problem_id": 68, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 66}}
{"id": 886, "code": "```python\nfrom sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\ncentered_scaled_data = scaler.fit_transform(data)\n```", "metadata": {"problem_id": 886, "library_problem_id": 69, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 69}}
{"id": 887, "code": "```python\nfrom sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\ncentered_scaled_data = scaler.fit_transform(data)\n```", "metadata": {"problem_id": 887, "library_problem_id": 70, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 69}}
{"id": 888, "code": "```python\nfrom sklearn.preprocessing import PowerTransformer\n\npt = PowerTransformer(method='box-cox', standardize=True)\nbox_cox_data = pt.fit_transform(data)\n```", "metadata": {"problem_id": 888, "library_problem_id": 71, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 71}}
{"id": 889, "code": "```python\nfrom sklearn.preprocessing import PowerTransformer\n\npt = PowerTransformer(method='box-cox', standardize=True)\nbox_cox_data = pt.fit_transform(data.reshape(-1, 1))\n```", "metadata": {"problem_id": 889, "library_problem_id": 72, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 71}}
{"id": 890, "code": "```python\nfrom sklearn.preprocessing import PowerTransformer\n\npt = PowerTransformer(method='yeo-johnson', standardize=True)\nyeo_johnson_data = pt.fit_transform(data)\n```", "metadata": {"problem_id": 890, "library_problem_id": 73, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 73}}
{"id": 891, "code": "```python\nfrom sklearn.preprocessing import PowerTransformer\n\npt = PowerTransformer(method='yeo-johnson', standardize=True)\nyeo_johnson_data = pt.fit_transform(data)\n```", "metadata": {"problem_id": 891, "library_problem_id": 74, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 73}}
{"id": 892, "code": "```python\nvectorizer = CountVectorizer(token_pattern=r\"(?u)\\b\\w+\\b\", strip_accents='unicode', lowercase=True)\ntransformed_text = vectorizer.fit_transform(text)\n```", "metadata": {"problem_id": 892, "library_problem_id": 75, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 75}}
{"id": 893, "code": "```python\nfrom sklearn.model_selection import train_test_split\n\nx = dataset.iloc[:, :-1]\ny = dataset.iloc[:, -1]\n\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)\n```", "metadata": {"problem_id": 893, "library_problem_id": 76, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 76}}
{"id": 894, "code": "```python\nfrom sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(data.iloc[:, :-1], data.iloc[:, -1], test_size=0.2, random_state=42)\n```", "metadata": {"problem_id": 894, "library_problem_id": 77, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 76}}
{"id": 895, "code": "```python\nfrom sklearn.model_selection import train_test_split\n\nx = dataset.iloc[:, :-1]\ny = dataset.iloc[:, -1]\n\nx_train, x_temp, y_train, y_temp = train_test_split(x, y, test_size=0.5, random_state=42)\nx_test, x_val, y_test, y_val = train_test_split(x_temp, y_temp, test_size=(2/3), random_state=42)\n```", "metadata": {"problem_id": 895, "library_problem_id": 78, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 76}}
{"id": 896, "code": "```python\nfrom sklearn.model_selection import train_test_split\n\nx = data.iloc[:, :-1]\ny = data.iloc[:, -1]\n\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)\n\nreturn x_train, y_train, x_test, y_test\n### END SOLUTION\n```", "metadata": {"problem_id": 896, "library_problem_id": 79, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 76}}
{"id": 897, "code": "```python\nlabels = kmeans.labels_\n```", "metadata": {"problem_id": 897, "library_problem_id": 80, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 80}}
{"id": 898, "code": "```python\nlabels = kmeans.labels_\n```", "metadata": {"problem_id": 898, "library_problem_id": 81, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 80}}
{"id": 899, "code": "```python\nselected_feature_names = np.asarray(vectorizer.get_feature_names())[LinearSVC(penalty='l1', dual=False).fit(X, y).coef_.flatten() != 0]\n```", "metadata": {"problem_id": 899, "library_problem_id": 82, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 82}}
{"id": 900, "code": "```python\nmodel = LinearSVC(penalty='l1', dual=False).fit(X, y)\nselected_features = X.multiply(model.coef_)\nselected_feature_names = np.asarray(vectorizer.get_feature_names())[selected_features.sum(axis=0).nonzero()[1]]\n```", "metadata": {"problem_id": 900, "library_problem_id": 83, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 82}}
{"id": 901, "code": "```python\nmodel = LinearSVC(penalty='l1', dual=False).fit(X, y)\nselected_indices = np.where(model.coef_[0] != 0)[0]\nselected_feature_names = np.asarray(vectorizer.get_feature_names())[selected_indices]\nreturn selected_feature_names\n### END SOLUTION\n```", "metadata": {"problem_id": 901, "library_problem_id": 84, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 82}}
{"id": 902, "code": "```python\nvocabulary = {'Jscript','.Net','TypeScript','SQL', 'NodeJS','Angular','Mongo','CSS','Python','PHP','Photoshop','Oracle','Linux','C++',\"Java\",'TeamCity','Frontend','Backend','Full stack', 'UI Design', 'Web','Integration','Database design','UX'}\nvectorizer = CountVectorizer(stop_words=\"english\", binary=True, lowercase=False, vocabulary=vocabulary)\nX = vectorizer.fit_transform(corpus)\nfeature_names = vectorizer.get_feature_names()\n```", "metadata": {"problem_id": 902, "library_problem_id": 85, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 85}}
{"id": 903, "code": "```python\nvocabulary = {'Jscript','.Net','TypeScript','NodeJS','Angular','Mongo','CSS','Python','PHP','Photoshop','Oracle','Linux','C++',\"Java\",'TeamCity','Frontend','Backend','Full stack', 'UI Design', 'Web','Integration','Database design','UX'}\nvectorizer = CountVectorizer(stop_words=\"english\", binary=True, lowercase=False, vocabulary=vocabulary)\nX = vectorizer.fit_transform(corpus)\nfeature_names = vectorizer.get_feature_names()\n```", "metadata": {"problem_id": 903, "library_problem_id": 86, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 85}}
{"id": 904, "code": "```python\nfeature_names = ['.Net', 'Angular', 'Backend', 'C++', 'CSS', 'Database design', 'Frontend', 'Full stack', 'Integration', 'Java', 'Jscript', 'Linux', 'Mongo', 'NodeJS', 'Oracle', 'PHP', 'Photoshop', 'Python', 'SQL', 'TeamCity', 'TypeScript', 'UI Design', 'UX', 'Web']\nX = np.zeros((len(corpus), len(feature_names)), dtype=int)\n\nfor i, doc in enumerate(corpus):\n    words = doc.split()\n    for word in words:\n        if word in feature_names:\n            index = feature_names.index(word)\n            X[i, index] = 1\n```", "metadata": {"problem_id": 904, "library_problem_id": 87, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 85}}
{"id": 905, "code": "```python\nfeature_names = ['.Net', 'Angular', 'Backend', 'C++', 'CSS', 'Database design', 'Frontend', 'Full stack', 'Integration', 'Java', 'Jscript', 'Linux', 'Mongo', 'NodeJS', 'Oracle', 'PHP', 'Photoshop', 'Python', 'TeamCity', 'TypeScript', 'UI Design', 'UX', 'Web']\nX = np.zeros((len(corpus), len(feature_names)), dtype=int)\n\nfor i, doc in enumerate(corpus):\n    words = doc.split()\n    for word in words:\n        if word in feature_names:\n            X[i, feature_names.index(word)] = 1\n```", "metadata": {"problem_id": 905, "library_problem_id": 88, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 85}}
{"id": 906, "code": "```python\nslopes = []\nfor col in df1.columns:\n    if col != 'Time':\n        df2 = df1[~np.isnan(df1[col])]\n        if len(df2) > 1:\n            df3 = df2[['Time', col]]\n            npMatrix = np.matrix(df3)\n            X, Y = npMatrix[:, 0], npMatrix[:, 1]\n            slope = LinearRegression().fit(X, Y)\n            slopes.append(slope.coef_[0])\n        else:\n            slopes.append(np.nan)\n```", "metadata": {"problem_id": 906, "library_problem_id": 89, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 89}}
{"id": 907, "code": "```python\nslopes = []\nfor col in df1.columns:\n    if col != 'Time':\n        df2 = df1[~np.isnan(df1[col])]\n        df3 = df2[['Time', col]]\n        npMatrix = np.matrix(df3)\n        X, Y = npMatrix[:, 0], npMatrix[:, 1]\n        slope = LinearRegression().fit(X, Y)\n        m = slope.coef_[0]\n        slopes.append(m)\nslopes = np.array(slopes)\n```", "metadata": {"problem_id": 907, "library_problem_id": 90, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 89}}
{"id": 908, "code": "```python\nlabel_encoder = LabelEncoder()\ndf['Sex'] = label_encoder.fit_transform(df['Sex'])\n```", "metadata": {"problem_id": 908, "library_problem_id": 91, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 91}}
{"id": 909, "code": "```python\ndf['Sex'] = LabelEncoder().fit_transform(df['Sex'])\n```", "metadata": {"problem_id": 909, "library_problem_id": 92, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 91}}
{"id": 910, "code": "```python\nle = LabelEncoder()\ndf['Sex'] = le.fit_transform(df['Sex'])\n```", "metadata": {"problem_id": 910, "library_problem_id": 93, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 91}}
{"id": 911, "code": "```python\ntraining_set_score = ElasticNet.score(X_train, y_train)\ntest_set_score = ElasticNet.score(X_test, y_test)\n```", "metadata": {"problem_id": 911, "library_problem_id": 94, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 94}}
{"id": 912, "code": "```python\ntransformed = MinMaxScaler().fit_transform(np_array.reshape(-1, 1)).reshape(2, 2)\n```", "metadata": {"problem_id": 912, "library_problem_id": 95, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 95}}
{"id": 913, "code": "```python\nreshaped_array = np_array.reshape(-1, 1)\nscaler = MinMaxScaler()\nscaled_reshaped_array = scaler.fit_transform(reshaped_array)\ntransformed = scaled_reshaped_array.reshape(np_array.shape)\n```", "metadata": {"problem_id": 913, "library_problem_id": 96, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 95}}
{"id": 914, "code": "```python\nnew_a = a.reshape(-1, 1)\nscaler = MinMaxScaler()\nnew_a_scaled = scaler.fit_transform(new_a)\nnew_a = new_a_scaled.reshape(a.shape)\nreturn new_a\n### END SOLUTION\n```", "metadata": {"problem_id": 914, "library_problem_id": 97, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 95}}
{"id": 915, "code": "```python\npredict = clf.predict(b)\n```", "metadata": {"problem_id": 915, "library_problem_id": 98, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 98}}
{"id": 916, "code": "```python\nnew_X = np.array(X)\nclf.fit(new_X, ['2', '3'])\n```", "metadata": {"problem_id": 916, "library_problem_id": 99, "library": "Sklearn", "test_case_cnt": 0, "perturbation_type": "Origin", "perturbation_origin_id": 99}}
{"id": 917, "code": "```python\nnew_X = np.array([[1, 1], [1, 0]])\n```", "metadata": {"problem_id": 917, "library_problem_id": 100, "library": "Sklearn", "test_case_cnt": 0, "perturbation_type": "Surface", "perturbation_origin_id": 99}}
{"id": 918, "code": "```python\nnew_X = np.array(X).astype(str)\nclf.fit(new_X, ['4', '5'])\n```", "metadata": {"problem_id": 918, "library_problem_id": 101, "library": "Sklearn", "test_case_cnt": 0, "perturbation_type": "Surface", "perturbation_origin_id": 99}}
{"id": 919, "code": "```python\nlogReg.fit(X, y)\npredict = logReg.predict([[12, 15432, 40, 20, 33, 40000, 12800, 20, 19841, 0, 0]])\n```", "metadata": {"problem_id": 919, "library_problem_id": 102, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 102}}
{"id": 920, "code": "```python\nX = dataframe.iloc[:, :-1].astype(float).values\ny = dataframe.iloc[:, -1].values.reshape(-1, 1)\nlogReg = LogisticRegression()\nlogReg.fit(X, y)\npredict = logReg.predict(X)\n```", "metadata": {"problem_id": 920, "library_problem_id": 103, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 102}}
{"id": 921, "code": "```python\ntrain_size = int(len(features_dataframe) * 0.2)\ntrain_dataframe = features_dataframe.iloc[:train_size]\ntest_dataframe = features_dataframe.iloc[train_size:]\n```", "metadata": {"problem_id": 921, "library_problem_id": 104, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 104}}
{"id": 922, "code": "```python\ntrain_size = int(len(features_dataframe) * 0.8)\ntrain_dataframe = features_dataframe.iloc[:train_size]\ntest_dataframe = features_dataframe.iloc[train_size:]\n```", "metadata": {"problem_id": 922, "library_problem_id": 105, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 104}}
{"id": 923, "code": "```python\ntrain_size = 0.2\nsplit_index = int(len(features_dataframe) * (1 - train_size))\ntrain_dataframe = features_dataframe.iloc[:split_index]\ntest_dataframe = features_dataframe.iloc[split_index:]\n```", "metadata": {"problem_id": 923, "library_problem_id": 106, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 104}}
{"id": 924, "code": "```python\ndf['X2_scale'], df['X3_scale'] = zip(*df.groupby('Month').apply(lambda x: scaler.fit_transform(x[['X2', 'X3']])))\n```", "metadata": {"problem_id": 924, "library_problem_id": 107, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 107}}
{"id": 925, "code": "```python\nfor month in myData['Month'].unique():\n    myData.loc[myData['Month'] == month, ['new_A2', 'new_A3']] = scaler.fit_transform(myData.loc[myData['Month'] == month, ['A2', 'A3']])\n```", "metadata": {"problem_id": 925, "library_problem_id": 108, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 107}}
{"id": 926, "code": "```python\nfeature_names = count.get_feature_names_out()\n```", "metadata": {"problem_id": 926, "library_problem_id": 109, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 109}}
{"id": 927, "code": "```python\nfeature_names = count.get_feature_names_out()\n```", "metadata": {"problem_id": 927, "library_problem_id": 110, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 109}}
{"id": 928, "code": "```python\nfull_results = pd.DataFrame(GridSearch_fitted.cv_results_)\n```", "metadata": {"problem_id": 928, "library_problem_id": 111, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 111}}
{"id": 929, "code": "```python\nfull_results = pd.DataFrame(GridSearch_fitted.cv_results_)\nfull_results.sort_values(by='mean_fit_time', inplace=True)\n```", "metadata": {"problem_id": 929, "library_problem_id": 112, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 111}}
{"id": 930, "code": "```python\nfrom sklearn.externals import joblib\n\n# Save the model in the file named \"sklearn_model.pkl\"\njoblib.dump(fitted_model, 'sklearn_model.pkl')\n```", "metadata": {"problem_id": 930, "library_problem_id": 113, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 113}}
{"id": 931, "code": "```python\ncosine_similarity_matrix = cosine_similarity(tfidf_matrix)\n```", "metadata": {"problem_id": 931, "library_problem_id": 114, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 114}}
{"id": 932, "code": "```python\nfor param_group in optim.param_groups:\n    param_group['lr'] = 0.001\n```", "metadata": {"problem_id": 932, "library_problem_id": 0, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 933, "code": "```python\nfor param_group in optim.param_groups:\n    param_group['lr'] = 0.001\n```", "metadata": {"problem_id": 933, "library_problem_id": 1, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 0}}
{"id": 934, "code": "```python\nfor param_group in optim.param_groups:\n    param_group['lr'] = 0.0005\n```", "metadata": {"problem_id": 934, "library_problem_id": 2, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 0}}
{"id": 935, "code": "```python\nfor param_group in optim.param_groups:\n    param_group['lr'] = new_learning_rate\n```", "metadata": {"problem_id": 935, "library_problem_id": 3, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 0}}
{"id": 936, "code": "```python\nweights = torch.FloatTensor(word2vec.wv.vectors)\nembedding_layer = torch.nn.Embedding.from_pretrained(weights)\nembedded_input = embedding_layer(input_Tensor)\n```", "metadata": {"problem_id": 936, "library_problem_id": 4, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 4}}
{"id": 937, "code": "```python\nimport torch.nn as nn\n\n# Assuming 'word2vec' is your trained Gensim model\nembedding_weights = torch.FloatTensor(word2vec.wv.vectors)\n\n# Create a PyTorch embedding layer\nembedding_layer = nn.Embedding.from_pretrained(embedding_weights, freeze=True)\n\n# Now you can use 'embedding_layer' to embed your input data\nembedded_input = embedding_layer(input_Tensor)\n```", "metadata": {"problem_id": 937, "library_problem_id": 5, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 4}}
{"id": 938, "code": "```python\npx = pd.DataFrame(x.numpy())\n```", "metadata": {"problem_id": 938, "library_problem_id": 6, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 6}}
{"id": 939, "code": "```python\npx = pd.DataFrame(x.numpy())\n```", "metadata": {"problem_id": 939, "library_problem_id": 7, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 6}}
{"id": 940, "code": "```python\npx = pd.DataFrame(x.numpy())\n```", "metadata": {"problem_id": 940, "library_problem_id": 8, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 6}}
{"id": 941, "code": "```python\nC = B[:, A_log.nonzero(as_tuple=True)[0]]\n```", "metadata": {"problem_id": 941, "library_problem_id": 9, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 9}}
{"id": 942, "code": "```python\nC = B[:, A_logical.nonzero(as_tuple=True)[0]]\n```", "metadata": {"problem_id": 942, "library_problem_id": 10, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 9}}
{"id": 943, "code": "```python\nC = B[:, A_log.nonzero(as_tuple=True)[0]]\n```", "metadata": {"problem_id": 943, "library_problem_id": 11, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 9}}
{"id": 944, "code": "```python\nC = B[:, A_log.nonzero(as_tuple=True)[0]]\n```", "metadata": {"problem_id": 944, "library_problem_id": 12, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Semantic", "perturbation_origin_id": 9}}
{"id": 945, "code": "```python\nC = B[:, A_log.nonzero(as_tuple=True)[0]]\n```", "metadata": {"problem_id": 945, "library_problem_id": 13, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 9}}
{"id": 946, "code": "```python\nC = B[:, A_log.nonzero(as_tuple=True)[0]]\n```", "metadata": {"problem_id": 946, "library_problem_id": 14, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 9}}
{"id": 947, "code": "```python\nC = B[:, idx]\n```", "metadata": {"problem_id": 947, "library_problem_id": 15, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 9}}
{"id": 948, "code": "```python\nx_tensor = torch.tensor(x_array.tolist(), dtype=torch.float16)\n```", "metadata": {"problem_id": 948, "library_problem_id": 16, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 16}}
{"id": 949, "code": "```python\nx_tensor = torch.tensor(x.tolist(), dtype=torch.float64)\n```", "metadata": {"problem_id": 949, "library_problem_id": 17, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 16}}
{"id": 950, "code": "```python\nt = torch.tensor(a.tolist(), dtype=torch.float16)\n### END SOLUTION\nreturn t\n```", "metadata": {"problem_id": 950, "library_problem_id": 18, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 16}}
{"id": 951, "code": "```python\nmask = (torch.arange(max(lens)).expand(len(lens), max(lens)) < torch.tensor(lens).unsqueeze(1)).to(torch.long)\n```", "metadata": {"problem_id": 951, "library_problem_id": 19, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 19}}
{"id": 952, "code": "```python\nmax_len = max(lens)\nmask = (torch.arange(max_len).expand(len(lens), max_len) < torch.tensor(lens).unsqueeze(1)).long()\n```", "metadata": {"problem_id": 952, "library_problem_id": 20, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 19}}
{"id": 953, "code": "```python\nmask = (torch.arange(max(lens)).unsqueeze(0) < torch.tensor(lens).unsqueeze(1)).long()\n```", "metadata": {"problem_id": 953, "library_problem_id": 21, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 19}}
{"id": 954, "code": "```python\nmax_len = max(lens)\nmask = (torch.arange(max_len).expand(len(lens), max_len) < torch.tensor(lens).unsqueeze(1)).long()\nreturn mask\n### END SOLUTION\n```", "metadata": {"problem_id": 954, "library_problem_id": 22, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 19}}
{"id": 955, "code": "```python\nTensor_3D = torch.diag_embed(diag_ele)\n```", "metadata": {"problem_id": 955, "library_problem_id": 23, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 23}}
{"id": 956, "code": "```python\nresult = t.unsqueeze(-1) * torch.eye(t.size(1), device=t.device)\n### END SOLUTION\nreturn result\n```", "metadata": {"problem_id": 956, "library_problem_id": 24, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 23}}
{"id": 957, "code": "```python\nab = torch.cat((a, b.unsqueeze(0)), dim=0)\n```", "metadata": {"problem_id": 957, "library_problem_id": 25, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 25}}
{"id": 958, "code": "```python\nab = torch.cat((a, b), dim=0)\n```", "metadata": {"problem_id": 958, "library_problem_id": 26, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 25}}
{"id": 959, "code": "```python\nab = torch.cat((a, b.unsqueeze(0)), dim=0)\n```", "metadata": {"problem_id": 959, "library_problem_id": 27, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 25}}
{"id": 960, "code": "```python\na[:, lengths:, :] = 0\n```", "metadata": {"problem_id": 960, "library_problem_id": 28, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 28}}
{"id": 961, "code": "```python\na[:, lengths:, :] = 2333\n```", "metadata": {"problem_id": 961, "library_problem_id": 29, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 28}}
{"id": 962, "code": "```python\na[:, :lengths, :] = 0\n```", "metadata": {"problem_id": 962, "library_problem_id": 30, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 28}}
{"id": 963, "code": "```python\na[:, :lengths, :] = 2333\n```", "metadata": {"problem_id": 963, "library_problem_id": 31, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 28}}
{"id": 964, "code": "```python\ntensor_of_tensors = torch.stack(list_of_tensors)\n```", "metadata": {"problem_id": 964, "library_problem_id": 32, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 32}}
{"id": 965, "code": "```python\nnew_tensors = torch.stack(list)\n```", "metadata": {"problem_id": 965, "library_problem_id": 33, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 32}}
{"id": 966, "code": "```python\ntt = torch.stack(lt)\n### END SOLUTION\nreturn tt\n```", "metadata": {"problem_id": 966, "library_problem_id": 34, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 32}}
{"id": 967, "code": "```python\ntensor_of_tensors = torch.stack(list_of_tensors)\n```", "metadata": {"problem_id": 967, "library_problem_id": 35, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 32}}
{"id": 968, "code": "```python\nresult = t[idx, torch.arange(t.size(1))]\n```", "metadata": {"problem_id": 968, "library_problem_id": 36, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 36}}
{"id": 969, "code": "```python\nresult = t[torch.arange(t.size(0)), torch.from_numpy(idx)]\n```", "metadata": {"problem_id": 969, "library_problem_id": 37, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 36}}
{"id": 970, "code": "```python\nresult = t[np.arange(len(idx)), idx]\n```", "metadata": {"problem_id": 970, "library_problem_id": 38, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 36}}
{"id": 971, "code": "```python\nresult = torch.gather(x, 1, ids.unsqueeze(-1).expand(-1, -1, 2))\n```", "metadata": {"problem_id": 971, "library_problem_id": 39, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 39}}
{"id": 972, "code": "```python\nresult = torch.gather(x, 1, ids.unsqueeze(-1).expand(-1, -1, x.size(-1))).squeeze(1)\n```", "metadata": {"problem_id": 972, "library_problem_id": 40, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 39}}
{"id": 973, "code": "```python\ntorch.gather(x, 1, ids.unsqueeze(-1).expand(-1, -1, x.size(-1))).squeeze(1)\n```", "metadata": {"problem_id": 973, "library_problem_id": 41, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 39}}
{"id": 974, "code": "```python\ny = torch.argmax(softmax_output, dim=1).unsqueeze(1)\n```", "metadata": {"problem_id": 974, "library_problem_id": 42, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 42}}
{"id": 975, "code": "```python\ny = torch.argmax(softmax_output, dim=1).unsqueeze(1)\n```", "metadata": {"problem_id": 975, "library_problem_id": 43, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 42}}
{"id": 976, "code": "```python\ny = torch.argmin(softmax_output, dim=1, keepdim=True)\n```", "metadata": {"problem_id": 976, "library_problem_id": 44, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 42}}
{"id": 977, "code": "```python\ny, _ = torch.max(softmax_output, dim=1, keepdim=True)\nreturn y\n```", "metadata": {"problem_id": 977, "library_problem_id": 45, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 42}}
{"id": 978, "code": "```python\ny, _ = torch.min(softmax_output, dim=1)\nreturn y\n```", "metadata": {"problem_id": 978, "library_problem_id": 46, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 42}}
{"id": 979, "code": "```python\nlog_p = F.log_softmax(input, dim=1)\ntarget_one_hot = F.one_hot(target, num_classes=c).permute(0, 3, 1, 2).float()\nloss = -(target_one_hot * log_p).sum(dim=(1, 2, 3)).mean() / mask.data.sum()\n```", "metadata": {"problem_id": 979, "library_problem_id": 47, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 47}}
{"id": 980, "code": "```python\ncnt_equal = (A == B).sum().item()\n```", "metadata": {"problem_id": 980, "library_problem_id": 48, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 48}}
{"id": 981, "code": "```python\ncnt_equal = (A == B).sum().item()\n```", "metadata": {"problem_id": 981, "library_problem_id": 49, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 48}}
{"id": 982, "code": "```python\ncnt_not_equal = (A != B).sum().item()\n```", "metadata": {"problem_id": 982, "library_problem_id": 50, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 48}}
{"id": 983, "code": "```python\ncnt_equal = (A == B).sum().item()\n```", "metadata": {"problem_id": 983, "library_problem_id": 51, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 48}}
{"id": 984, "code": "```python\ncnt_equal = torch.sum(A[-x:] == B[-x:]).item()\n```", "metadata": {"problem_id": 984, "library_problem_id": 52, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 48}}
{"id": 985, "code": "```python\ncnt_not_equal = torch.sum(A[-x:] != B[-x:]).item()\n```", "metadata": {"problem_id": 985, "library_problem_id": 53, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 48}}
{"id": 986, "code": "```python\ntensors_31 = [torch.chunk(a[:, :, :, i:i+chunk_dim, :], chunk_dim, dim=3)[0] for i in range(a.size(3)-chunk_dim+1)]\n```", "metadata": {"problem_id": 986, "library_problem_id": 54, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 54}}
{"id": 987, "code": "```python\ntensors_31 = [torch.chunk(a[:, :, i:i+chunk_dim], chunk_dim, dim=2)[0] for i in range(a.size(2)-chunk_dim+1)]\n```", "metadata": {"problem_id": 987, "library_problem_id": 55, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 54}}
{"id": 988, "code": "```python\noutput[mask == 1] = clean_input_spectrogram[mask == 1]\n```", "metadata": {"problem_id": 988, "library_problem_id": 56, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 56}}
{"id": 989, "code": "```python\noutput[mask == 0] = clean_input_spectrogram[mask == 0]\n```", "metadata": {"problem_id": 989, "library_problem_id": 57, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 56}}
{"id": 990, "code": "```python\nsigned_min = torch.where(torch.abs(x) < torch.abs(y), x * torch.sign(x), y * torch.sign(y))\n```", "metadata": {"problem_id": 990, "library_problem_id": 58, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 58}}
{"id": 991, "code": "```python\nsigned_max = torch.where(torch.abs(x) > torch.abs(y), x * torch.sign(x), y * torch.sign(y))\n```", "metadata": {"problem_id": 991, "library_problem_id": 59, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 58}}
{"id": 992, "code": "```python\nsigned_min = torch.where(torch.abs(x) < torch.abs(y), x * torch.sign(x), y * torch.sign(y))\n```", "metadata": {"problem_id": 992, "library_problem_id": 60, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 58}}
{"id": 993, "code": "```python\nconfidence_score = torch.softmax(output, dim=1)[:, 1].item()\n```", "metadata": {"problem_id": 993, "library_problem_id": 61, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 61}}
{"id": 994, "code": "```python\nresult = torch.cat((a[:, :-1], (a[:, -1:] + b[:, :1]) / 2, b[:, 1:]), dim=1)\n```", "metadata": {"problem_id": 994, "library_problem_id": 62, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 62}}
{"id": 995, "code": "```python\nresult = torch.cat((a[:, :-1], (a[:, -1:] + b[:, :1]) / 2, b[:, 1:]), dim=1)\n```", "metadata": {"problem_id": 995, "library_problem_id": 63, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 62}}
{"id": 996, "code": "```python\nresult = torch.cat((torch.zeros_like(t), t, torch.zeros_like(t)), dim=1)\n```", "metadata": {"problem_id": 996, "library_problem_id": 64, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 64}}
{"id": 997, "code": "```python\nresult = torch.cat((torch.zeros_like(t), t, torch.zeros_like(t)), dim=1)\n```", "metadata": {"problem_id": 997, "library_problem_id": 65, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 64}}
{"id": 998, "code": "```python\nresult = torch.cat((torch.full((5, 1, 2), -1), t, torch.full((1, 1, 2), -1)), dim=0)\n```", "metadata": {"problem_id": 998, "library_problem_id": 66, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 64}}
{"id": 999, "code": "```python\nresult = torch.matmul(data, W.unsqueeze(-1)).squeeze(-1).view(10, 2, 3)\n```", "metadata": {"problem_id": 999, "library_problem_id": 67, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 67}}
